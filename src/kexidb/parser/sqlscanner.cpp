
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 368
#define YY_END_OF_BUFFER 369
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1785] =
    {   0,
      346,  346,    0,    0,    0,    0,  369,  368,  346,  368,
       10,   11,   18,    7,    8,    3,    4,   21,    5,    9,
        6,   23,   20,    2,   14,   12,   16,   19,    1,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  366,  355,  362,  353,  354,  349,
      350,  365,  351,  352,  364,  348,  361,  356,  358,  363,
      347,  367,  346,    0,    0,  343,    0,   22,   23,   15,
       13,   17,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  345,  345,  341,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  366,  360,  357,  359,  367,    0,    0,
        0,  342,   22,   23,  345,  345,  345,  345,  345,  345,
      345,  345,  345,   45,  345,  345,  345,   49,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,   61,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  148,  345,  345,  345,  345,  345,  345,
      345,  157,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  168,  345,  345,  345,  345,  345,  345,  345,  183,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  228,  345,  230,  345,
      345,  345,  234,  345,  345,  345,  345,  345,  345,  345,
      243,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  306,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  344,   23,   25,  345,  345,
       28,   29,  345,   36,  345,  345,   39,   40,   41,   43,
      345,  345,  345,  345,  345,  345,   52,  345,  345,  345,
      345,  345,   58,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,   90,   91,  345,  345,
      345,  345,  345,  345,  345,  345,  110,  345,  345,  345,
      112,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  132,  345,  345,
      345,  345,  345,  140,  345,  345,  345,  345,  345,  345,
      345,  149,  345,  345,  345,  345,  345,  345,  155,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  178,  345,  345,  345,
      345,  345,  187,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  198,  345,  345,  345,  345,  203,  345,  205,
      345,  210,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  221,  222,  345,  345,  345,  345,  229,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      244,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  278,  345,  345,  345,  281,  345,  345,  345,
      285,  345,  345,  345,  345,  345,  345,  345,  294,  345,
      345,  345,  299,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,    0,   23,  345,   27,  345,  345,
      345,  345,  345,  345,  345,  345,   44,  345,   48,  345,

      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
       64,   65,  345,  345,  345,   69,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  103,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  119,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  130,
      131,  345,  345,  345,  137,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  153,  154,  345,
      345,  158,  345,  345,  345,  162,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  182,  345,  185,  345,  345,  189,  345,  191,  345,
      345,  194,  345,  345,  345,  199,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  218,
      345,  220,  223,  345,  345,  345,  227,  231,  232,  345,
      345,  345,  345,  345,  239,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  256,
      257,  345,  259,  345,  345,  345,  345,  345,  345,  345,
      267,  268,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  280,  282,  345,  284,  345,  345,  345,  345,  345,
      291,  345,  345,  345,  345,  345,  345,  301,  302,  345,

      345,  345,  345,  345,  312,  345,  345,  345,  345,  345,
      345,  345,  345,  322,  345,  345,  345,  345,  345,  345,
      330,  331,  332,  345,  345,  335,  345,  337,  345,  339,
      345,    0,  345,  345,  345,  345,  345,  345,  345,  345,
       38,   42,  345,   47,  345,  345,  345,   54,  345,  345,
      345,  345,   60,  345,  345,  345,  345,  345,  345,   73,
       74,  345,   76,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,   92,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  345,  143,  144,
      145,  146,  147,  345,  345,  152,  345,  345,  159,  160,
      345,  345,  345,  345,  345,  345,  345,  170,  345,  345,
      173,  174,  345,  345,  345,  345,  345,  345,  345,  345,
      190,  345,  193,  345,  196,  345,  200,  201,  202,  345,
      206,  345,  345,  345,  212,  345,  214,  215,  345,  217,
      219,  345,  345,  345,  345,  235,  236,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  250,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  265,
      345,  269,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  286,  345,  345,  345,  345,  292,  345,  345,  345,
      298,  345,  345,  345,  345,  345,  345,  345,  345,  315,
      316,  345,  345,  345,  320,  321,  323,  325,  345,  345,
      345,  345,  345,  345,  334,    0,  345,  345,  345,    0,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,   53,  345,   56,   57,  345,  345,  345,  345,   68,
      345,  345,  345,  345,  345,   79,   80,  345,   82,  345,
      345,  345,  345,  345,   93,  345,  345,  100,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  118,  345,  345,  345,  345,  345,  345,  345,

      345,  128,  129,  345,  134,  135,  345,  345,  139,  345,
      345,  345,  345,  345,  156,  161,  345,  345,  165,  166,
      345,  345,  345,  345,  345,  176,  345,  345,  345,  345,
      345,  345,  192,  345,  197,  345,  207,  345,  209,  211,
      345,  345,  224,  345,  345,  233,  237,  345,  345,  241,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  254,
      345,  345,  345,  261,  345,  345,  264,  345,  270,  345,
      272,  273,  345,  275,  345,  277,  345,  345,  345,  345,
      345,  345,  345,  345,  297,  345,  345,  345,  345,  345,
      345,  345,  345,  317,  345,  319,  324,  345,  345,  345,

      329,  345,    0,  345,  345,  345,    0,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,   55,  345,
       62,  345,   66,   67,  345,  345,  345,   77,  345,   81,
       83,  345,  345,  345,   88,  345,   94,   99,  345,  101,
      345,  345,  345,  345,  345,  345,  345,  345,  113,  114,
      115,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  138,  345,  142,  150,  151,  345,  345,
      345,  345,  169,  345,  345,  345,  177,  345,  345,  345,
      186,  345,  345,  345,  345,  345,  345,  225,  345,  345,
      240,  345,  345,  345,  247,  345,  249,  345,  345,  253,

      255,  345,  345,  262,  345,  345,  345,  345,  345,  279,
      345,  287,  345,  345,  345,  345,  295,  345,  345,  345,
      345,  307,  308,  345,  345,  345,  318,  345,  327,  328,
      345,    0,  345,  338,  345,    0,   26,   30,  345,  345,
      345,  345,  345,   37,  345,  345,  345,  345,   63,  345,
      345,   75,  345,  345,  345,   87,  345,  345,  345,  102,
      345,  345,  345,  345,  345,  345,  345,  345,  117,  120,
      345,  345,  345,  345,  345,  345,  127,  133,  345,  141,
      345,  345,  164,  345,  345,  345,  345,  345,  181,  345,
      188,  345,  345,  345,  345,  216,  345,  238,  345,  245,

      345,  248,  345,  345,  345,  345,  263,  266,  345,  345,
      276,  283,  288,  289,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  313,  345,  333,    0,  345,  345,   24,
       31,  345,  345,  345,   35,   46,  345,  345,  345,  345,
       71,  345,   78,  345,  345,  345,  345,  345,  345,  345,
      345,  107,  108,  345,  345,  345,  345,  345,  345,  124,
      345,  345,  136,  345,  345,  167,  171,  172,  345,  179,
      345,  184,  345,  204,  345,  345,  345,  345,  246,  345,
      252,  258,  345,  345,  345,  345,  293,  345,  300,  303,
      345,  345,  345,  310,  345,  326,    0,  345,  345,  345,

       33,  345,  345,  345,   59,  345,  345,   84,   85,  345,
      345,  345,  345,  345,  345,  106,  345,  111,  116,  121,
      345,  123,  125,  345,  345,  345,  345,  345,  195,  345,
      345,  345,  242,  251,  260,  345,  345,  290,  345,  345,
      345,  345,  345,    0,  345,  345,   32,   34,  345,  345,
       70,  345,   86,  345,  345,  345,  104,  345,  345,  122,
      345,  345,  345,  175,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  309,  311,    0,  345,  345,  345,  345,
      345,  345,   95,   96,  345,  345,  109,  126,  345,  345,
      180,  345,  345,  226,  271,  345,  345,  345,  345,    0,

      336,  345,   50,  345,  345,   89,  345,  345,  314,  163,
      345,  345,  345,  345,  304,  345,    0,  340,   51,  345,
      345,  105,  345,  213,  345,  296,  345,    0,  345,  345,
      208,  274,  305,    0,   72,  345,    0,   97,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   98,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   17,
       16,   16,   16,   16,   16,   16,   16,   18,   19,   20,
       21,   22,   23,   24,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
        1,    1,    1,    1,   25,    1,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    1,   53,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    4,    1,    1,    1,
        1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1792] =
    {   0,
        0,    0,   52,   75,   74,    0, 4070, 8208,   54,    0,
     8208, 8208, 4053, 8208, 8208, 8208, 8208, 8208,  113, 8208,
     8208,   52, 8208, 8208,   58, 8208, 4038, 8208, 8208,  104,
      110,  126,  128,  171,  195,  127,  102,  167,   99, 4019,
      188,  197,  214,  233,  241, 4002,  225,  260,  278,  208,
      183,  252,    0, 4017,   89, 8208, 8208, 8208, 8208, 8208,
     8208, 8208, 8208, 8208, 8208, 8208,  113, 8208, 4016, 8208,
     8208,    0,  134, 4032, 4019, 8208, 4022,  159,  171, 8208,
     8208, 8208,    0, 3980, 3980,  171,  101,  174, 3989,  320,
      363, 3973, 3985,  305,  218, 3986,  388,  157,  173,  135,

     3975,  387, 3984, 3970,  203,  325,  271,  181, 3972, 8208,
     3967, 3981, 3981,  279, 3971, 3962, 3963, 3965,  432,  273,
     3964, 3966,  200, 3962,  455,  243, 3954, 3954, 3969, 3959,
     3958, 3958,  499,  549, 3961, 3950, 3936,  229, 3959,  316,
      310,  388, 3932,  181,  329,  217, 3936,  251, 3940, 3920,
      442,  288, 3923, 3940,  588,  618,  315,  654, 3921, 3935,
      361, 3921,  682, 3929, 3918,  388, 3934,  333, 3921,  681,
     3927,  400, 3932, 3914,  258,  452, 3916,  452, 3929, 3916,
      315, 3924,  411, 3908,  353, 3913, 3913, 3904,  727,  446,
     3906,  381,  454,  548,  351, 3892, 3900, 3890, 3889, 3864,

     3865, 3881, 3871,  457, 8208, 8208, 8208,    0, 3892,  482,
     3883, 8208,  482,  488,  751, 3841,  790,  813,  837, 3854,
      876,  899,  922, 8208,  945, 3835, 3843, 8208, 3824,  543,
      978, 3822, 3827, 3803, 3816, 3814, 1001, 3813, 8208,  547,
     3812, 3791, 3782, 3774, 3788, 3771, 3768, 3764,  542,  455,
      606, 3751, 1025, 1048, 3754, 3766,  615,  393, 1071, 3745,
     1114,  554, 3751, 3743, 3738, 3724, 3729,  577, 3732, 3721,
     3706, 3716, 1150, 3710, 3705, 3697, 3680, 1174,  523, 3679,
     3685, 3668,  277, 8208, 1197, 3663, 3663, 3663, 3660, 1241,
     3662, 8208, 3639, 3639, 3631, 3633, 3623, 3617, 3609, 3614,

     3614, 8208, 3606,  551, 3588, 3602, 3585, 3591, 1264, 8208,
     3583, 3571, 3564, 1303, 3576, 3553, 3553, 3542, 3554, 3555,
     3545, 3544, 3538, 1326, 3531, 3532, 3524, 3529, 1349, 3513,
     1372, 1417, 3510, 3513, 3523, 3518, 3525, 3505, 3503, 3518,
     1462, 1485, 3510, 3516, 3515, 3516, 8208, 1508, 8208, 3493,
     3503, 3507, 8208, 3510,  524, 3489, 3501, 3476, 3492, 3475,
     8208, 1531, 3475,  670,  576,  558, 3471, 3455, 3452, 3467,
      392, 3456,  587, 3440, 3435, 3441, 3436, 3419, 3433, 3418,
     3421,  564, 3410, 3410, 3393, 1554, 3381, 3389, 1593, 3397,
     3380, 3386, 1616, 3361, 3375, 3360, 1663,  625, 3357, 1686,

     3352, 3344, 3352, 8208,  618, 3342,  613, 3327,  573, 3331,
     3334, 3329, 3326, 3305, 3308, 3291,  621, 3307, 3287, 3289,
      643, 3291,  651, 3273, 3270, 8208,  700, 8208, 3275, 1709,
     8208, 8208, 1068, 8208, 3274, 3258, 8208, 8208, 8208, 8208,
     3257, 1732, 3247, 1755, 3249, 3254, 8208, 3235, 3229, 3237,
     3227, 3213, 8208, 3218, 3209, 3218, 1778, 1801, 3206, 3199,
     3202, 1824, 3186, 3191, 3190, 3173, 3183, 3161, 3164, 3151,
     3161, 3156, 3131, 3141, 3144, 3134, 8208, 8208, 3118, 3108,
     3126, 3121, 3101, 3106, 3103, 1849, 8208, 3098, 3103, 3081,
     8208, 3079, 3081, 3060, 3062, 3050, 1873, 3055, 3050, 3055,

     3042, 3035, 3037, 3027, 3023, 1915, 1938, 8208, 3029, 3008,
     3007, 1961, 2993, 8208, 2994, 3010, 2996, 2992, 2970, 2969,
     2970, 8208, 2969, 2959, 2963, 2006, 2029, 2948, 8208, 2964,
     2052, 2935, 2938, 2930, 2075, 2923, 2930, 2914, 2927, 2900,
     2896, 2916, 2900, 2890, 2878,  680, 8208,  656,  706, 2896,
     2118, 2887, 8208, 2865, 2141, 2880, 2164, 2855, 2862, 2187,
     2873,  673, 8208, 2210, 2851, 2855, 2859, 8208, 2851, 8208,
      676, 8208, 2859, 2852, 2855, 2843, 2842, 2845, 2841, 2233,
     2842, 2256, 8208, 8208, 2279, 2839, 2836, 2312, 8208, 2335,
     2358, 2840, 2836, 2835, 2831, 2839, 2381, 2834, 2841, 2823,

     8208, 2811, 2821, 2819, 2814, 2808, 2790, 2798, 2792, 2775,
     2777, 2765, 2404, 2427, 2784, 2450, 2762, 2778, 2777, 2759,
     2765, 2748, 2765, 2473, 2496, 2744, 2743, 2750, 2733, 2730,
     2731, 2728, 8208, 2716, 2707, 2519, 8208, 2542, 2709, 2565,
     8208,  717, 2693, 2690, 2708, 2588, 2677, 2678, 8208, 2687,
     2682, 2681, 8208, 2661, 2611, 2634, 2667, 2664, 2645, 2684,
     2660, 2654, 2644, 2636, 2641, 2635, 2636, 2647, 2707, 2644,
     2645, 2640, 2640, 2638, 2631, 2730, 2753, 2776, 2640, 2805,
     2644, 2828, 2627, 2851,  710,  715, 2621, 8208, 2640, 2625,
      448, 2634, 2633, 2636, 2894, 2917, 8208, 2616, 8208, 2940,

     2617, 2625, 2621, 2963, 2620, 2595, 2589, 2608, 2986, 2599,
     8208, 8208, 2587, 2578, 2573, 8208, 2578, 2577, 3009, 3032,
     2560, 3055, 2549, 2554, 2547, 2537, 2536, 2543, 2527, 2530,
     2516, 2514, 3078, 2518, 2502, 2507, 2493, 2497, 2499, 8208,
      713,  729, 2497, 2483, 2487, 2469, 2465, 2458, 2470, 8208,
     2456, 2449, 2439, 2433, 2438, 2441, 2427, 2417, 2425, 8208,
     8208, 2405, 2414, 2398, 8208, 2388, 2388, 2392, 2393, 3101,
     3124, 3147, 3170, 3193, 2388, 2384, 3216, 8208, 8208, 2383,
     2371, 8208, 3239, 3262, 2366, 8208, 2372, 2353, 2349, 2355,
     2341, 2345, 3285, 2338, 2337, 3308, 3331, 2318, 2307, 2321,

      734, 8208, 2296, 8208, 2309, 2313, 8208, 3354, 8208, 2296,
     3377, 8208, 2280, 3400, 2288, 8208, 3423, 3446, 3469, 2273,
     3492, 2286, 2262, 2281, 3515, 3558, 3581, 2271, 3604, 8208,
     3627, 8208, 8208, 2278, 2274, 2282, 8208, 8208, 8208, 2267,
     3650, 3673, 2260, 2278, 8208, 2270, 2258, 2241, 2250, 2239,
     2230, 2229, 2219, 3696, 2224, 2231, 2222, 2221, 2209, 8208,
     8208, 2198, 8208, 2207, 2182, 2198, 2182, 2185, 3719, 2188,
     8208, 8208, 3742,   40,   50,   90,  126,  132,  165,  213,
      236, 8208, 8208,  327, 8208, 3765,  350,  418,  529,  550,
     8208, 3788,  592,  634,  643,  780,  681, 8208, 8208,  688,

      715,  742,  731,  758, 8208,  754, 3811, 3834,  755,  738,
      757, 3857, 3880, 8208, 3903, 3926,  749,  763,  751,  751,
     8208, 8208, 8208,  749, 3969, 8208,  758, 8208,  777, 8208,
      792,  802,  784,  780,  795,  803,  804,  825,  828,  817,
     8208, 8208,  829, 8208,  830,  826, 4020, 8208,  827, 4043,
     4066,  828, 8208,  838,  837,  838, 4089,  841,  827, 8208,
     8208,  845, 8208,  846, 4112, 4135,  844, 4158,  830,  855,
      836,  847,  852, 8208, 4181,  873,  859, 4204,  875,  871,
      876,  896,  887,  898,  908,  909,  921,  913,  921,  916,
      944, 4227,  935,  927,  933,  933,  936,  949,  950, 4250,

     4273,  952, 4296, 4319,  953, 4352,  958,  949, 8208, 8208,
     8208, 8208, 8208,  956,  966, 8208,  969, 4375, 8208, 8208,
     4398,  980,  972, 4421, 4444,  992,  999, 8208,  985,  994,
     8208, 8208, 1007, 4467,  999, 1022, 1027, 1020, 1014, 1033,
     8208, 4490, 8208, 1041, 8208, 4513, 8208, 8208, 8208, 1036,
     8208, 4536, 4579, 4602, 8208, 1052, 8208, 8208, 1061, 8208,
     8208, 4625, 1060, 1059, 4648, 8208, 8208, 4671, 1057, 1062,
     4694, 1055, 1062, 1069, 1074, 1058, 1057, 8208, 1078, 1063,
     1065, 4717, 1070, 1075, 1080, 4740, 1090, 1102, 4763, 8208,
     1103, 8208, 4786, 1114, 4809, 4832, 4875, 1112, 4898, 1096,

     1103, 8208, 1113, 1104, 1100, 1107, 8208, 1113, 1119, 4921,
     8208, 1124, 1128, 1116, 1113, 1136, 1139, 1152, 1134, 8208,
     8208, 4944, 1141, 4967, 8208, 8208, 8208, 8208, 4990, 1164,
     1148, 1169, 5013, 1172, 8208, 1155, 1170, 1185, 1195, 1210,
     1194, 1182, 1185, 1183, 1185, 1191, 1189, 1203, 1194, 1184,
     1208, 8208, 5036, 8208, 8208, 1205, 5059, 5087, 5110, 8208,
     1199, 1209, 1210, 5133, 1201, 8208, 8208, 5156, 8208, 5179,
     1211, 1216, 5212, 1207, 8208, 5235, 5258, 8208, 5282, 1227,
     1215, 1230, 1230, 1240, 1254, 1236, 1263, 5305, 5328, 5351,
     1263, 1262, 8208, 1262, 1248, 1250, 1270, 1254, 1268, 1269,

     1255, 8208, 8208, 1273, 8208, 8208, 1262, 5374, 8208, 1266,
     5397, 5420, 5443, 1282, 8208, 8208, 1278, 1259, 8208, 8208,
     1274, 5466, 1280, 1293, 1286, 8208, 5489, 1304, 1305, 1303,
     5512, 1323, 8208, 1325, 8208, 1324, 8208, 1340, 8208, 8208,
     1339, 1339, 8208, 5535, 1347, 8208, 8208, 1334, 5558, 8208,
     1358, 1350, 1357, 5581, 1368, 5604, 1367, 1357, 5627, 8208,
     5650, 1364, 1374, 8208, 5673, 1358, 8208, 1368, 8208, 1357,
     8208, 8208, 1381, 8208, 1377, 8208, 5696, 1363, 5719, 1366,
     1380, 1377, 1373, 5742, 8208, 1370, 1376, 1385, 5766, 5789,
     1371, 1372, 1391, 8208, 5812, 8208, 8208, 1379, 5835, 5858,

     8208, 1380, 1400, 1408, 5881, 1412, 1427, 5904, 5927, 1401,
     1401, 1414, 1409, 1405, 5950, 1411, 1426, 1410, 8208, 1409,
     8208, 5973, 8208, 8208, 1423, 1413, 5996, 8208, 1418, 8208,
     8208, 1418, 1420, 6019, 8208, 1421, 8208, 8208, 1433, 8208,
     6042, 1423, 1440, 1422, 1432, 1436, 1441, 1445, 8208, 8208,
     8208, 1454, 6065, 6088, 1461, 1468, 1469, 1463, 1486, 1486,
     6111, 6134, 1486, 8208, 6157, 8208, 8208, 8208, 1490, 1491,
     6180, 1507, 8208, 1504, 1498, 1524, 8208, 1514, 6203, 1521,
     8208, 6226, 1525, 1526, 1552, 1550, 6249, 8208, 1542, 6272,
     8208, 1543, 6295, 1544, 8208, 6318, 8208, 1554, 1555, 8208,

     8208, 1536, 1557, 8208, 6341, 6364, 1554, 1562, 6387, 8208,
     6410, 8208, 6433, 6456, 1551, 1559, 8208, 1561, 1543, 1556,
     1573, 8208, 8208, 1565, 1611, 6479, 8208, 1559, 8208, 8208,
     6502, 1576, 1579, 8208, 1576, 1616, 8208, 8208, 6525, 1592,
     1598, 1614, 6548, 8208, 6571, 1602, 1618, 1616, 8208, 1605,
     6594, 8208, 6618, 1612, 1607, 8208, 1624, 1628, 1621, 8208,
     1630, 1623, 1625, 6641, 6664, 1629, 1631, 1632, 8208, 8208,
     1620, 1639, 1618, 6687, 1624, 1649, 8208, 8208, 6710, 8208,
     1646, 1642, 8208, 6733, 6756, 6779, 1644, 6802, 8208, 6835,
     8208, 1659, 6858, 1672, 1658, 8208, 1681, 8208, 1669, 8208,

     6881, 8208, 1671, 6904, 6927, 1681, 8208, 8208, 1697, 1706,
     8208, 8208, 8208, 8208, 1705, 6950, 1698, 6973, 6996, 1865,
     1708, 7019, 1709, 8208, 7042, 8208, 1714, 1719, 1713, 8208,
     8208, 1727, 7065, 1738, 8208, 8208, 1749, 1746, 7088, 1761,
     8208, 1758, 8208, 7111, 7134, 1771, 1761, 1769, 1772, 1779,
     7177, 8208, 8208, 1798, 7200, 7223, 7246, 1785, 7269, 8208,
     7292, 1791, 8208, 1795, 1811, 8208, 8208, 8208, 1823, 8208,
     1814, 8208, 7315, 8208, 1810, 1817, 1821, 7338, 8208, 7361,
     8208, 8208, 7384, 1832, 1833, 7407, 8208, 1836, 8208, 8208,
     1849, 1856, 1860, 8208, 1861, 8208, 1871, 1872, 1874, 7430,

     8208, 7453, 1865, 1876, 8208, 7476, 1877, 8208, 8208, 7499,
     1869, 1879, 1880, 7522, 1882, 8208, 1873, 8208, 8208, 8208,
     7545, 8208, 8208, 1868, 1877, 1885, 7568, 1880, 8208, 1872,
     1891, 1898, 8208, 8208, 8208, 1899, 1894, 8208, 1905, 1898,
     1915, 7591, 7614, 1911, 1936, 1936, 8208, 8208, 1928, 1938,
     8208, 1939, 8208, 1954, 7637, 7660, 8208, 1957, 7703, 8208,
     7726, 1958, 1950, 8208, 7749, 1960, 1961, 7772, 7795, 1962,
     1967, 1951, 1949, 8208, 8208, 1955, 7818, 1958, 7841, 1953,
     1967, 7864, 8208, 8208, 1955, 1958, 8208, 8208, 7887, 7910,
     8208, 1972, 1964, 8208, 8208, 1974, 1960, 7933, 1961, 1984,

     8208, 7956, 8208, 7979, 1966, 8208, 1986, 8002, 8208, 8208,
     1983, 8025, 1984, 8048, 8208, 2003, 2006, 8208, 8208, 2002,
     2007, 8208, 8071, 8208, 8094, 8208, 8117, 2016, 8140, 2015,
     8208, 8208, 8208, 2004, 8208, 8163, 2030, 8208, 2022, 2026,
     2036, 2050, 2042, 2046, 2040, 2052, 2068, 2068, 2058, 2074,
     2061, 2065, 2081, 2080, 2079, 2057, 2071, 2081, 2061, 2075,
     2075, 2077, 2088, 2088, 2085, 2089, 2086, 2100, 2090, 2115,
     2103, 2102, 2127, 2115, 2130, 2135, 2131, 2154, 2136, 2151,
     2149, 2140, 8208, 8208, 8187, 8191, 8195, 2199, 2200, 8199,
     8203

    } ;

static yyconst flex_int16_t yy_def[1792] =
    {   0,
     1784,    1, 1785, 1785, 1785,    5, 1784, 1784, 1784, 1786,
     1784, 1784, 1787, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1789, 1784, 1790, 1787, 1784, 1791, 1784, 1784, 1784,
     1784, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1788, 1788, 1784, 1784, 1784, 1784, 1789, 1790, 1790,
     1791, 1784, 1784, 1784, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1788, 1788, 1784, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788, 1784, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1784, 1784, 1784, 1788, 1788,
     1784, 1784, 1788, 1784, 1788, 1788, 1784, 1784, 1784, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788, 1788, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1784, 1784, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788, 1788, 1788,
     1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788, 1788, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1788, 1784, 1788, 1784,
     1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1784, 1784, 1788, 1788, 1788, 1788, 1784, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1784, 1788, 1788, 1788,
     1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1784, 1784, 1788, 1784, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788, 1784, 1788,

     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1784, 1784, 1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1784, 1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1784, 1788,
     1788, 1784, 1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1784, 1788, 1784, 1788, 1788, 1784, 1788, 1784, 1788,
     1788, 1784, 1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1788, 1784, 1784, 1788, 1788, 1788, 1784, 1784, 1784, 1788,
     1788, 1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1784, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1784, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1784, 1784, 1788, 1784, 1788, 1788, 1788, 1788, 1788,
     1784, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1784, 1788,

     1788, 1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788,
     1784, 1784, 1784, 1788, 1788, 1784, 1788, 1784, 1788, 1784,
     1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1784, 1784, 1788, 1784, 1788, 1788, 1788, 1784, 1788, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1784, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1784,
     1784, 1784, 1784, 1788, 1788, 1784, 1788, 1788, 1784, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788, 1788,
     1784, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1784, 1788, 1784, 1788, 1784, 1788, 1784, 1784, 1784, 1788,
     1784, 1788, 1788, 1788, 1784, 1788, 1784, 1784, 1788, 1784,
     1784, 1788, 1788, 1788, 1788, 1784, 1784, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1784, 1788, 1788, 1788, 1788, 1784, 1788, 1788, 1788,
     1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1784, 1788, 1788, 1788, 1784, 1784, 1784, 1784, 1788, 1788,
     1788, 1788, 1788, 1788, 1784, 1784, 1788, 1788, 1788, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1784, 1788, 1784, 1784, 1788, 1788, 1788, 1788, 1784,
     1788, 1788, 1788, 1788, 1788, 1784, 1784, 1788, 1784, 1788,
     1788, 1788, 1788, 1788, 1784, 1788, 1788, 1784, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1784, 1784, 1788, 1784, 1784, 1788, 1788, 1784, 1788,
     1788, 1788, 1788, 1788, 1784, 1784, 1788, 1788, 1784, 1784,
     1788, 1788, 1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788,
     1788, 1788, 1784, 1788, 1784, 1788, 1784, 1788, 1784, 1784,
     1788, 1788, 1784, 1788, 1788, 1784, 1784, 1788, 1788, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1788, 1788, 1788, 1784, 1788, 1788, 1784, 1788, 1784, 1788,
     1784, 1784, 1788, 1784, 1788, 1784, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1784, 1784, 1788, 1788, 1788,

     1784, 1788, 1784, 1788, 1788, 1788, 1784, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788,
     1784, 1788, 1784, 1784, 1788, 1788, 1788, 1784, 1788, 1784,
     1784, 1788, 1788, 1788, 1784, 1788, 1784, 1784, 1788, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1784,
     1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1784, 1784, 1784, 1788, 1788,
     1788, 1788, 1784, 1788, 1788, 1788, 1784, 1788, 1788, 1788,
     1784, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1788, 1788,
     1784, 1788, 1788, 1788, 1784, 1788, 1784, 1788, 1788, 1784,

     1784, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1784,
     1788, 1784, 1788, 1788, 1788, 1788, 1784, 1788, 1788, 1788,
     1788, 1784, 1784, 1788, 1788, 1788, 1784, 1788, 1784, 1784,
     1788, 1784, 1788, 1784, 1788, 1784, 1784, 1784, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1784, 1788,
     1788, 1784, 1788, 1788, 1788, 1784, 1788, 1788, 1788, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1784, 1784,
     1788, 1788, 1788, 1788, 1788, 1788, 1784, 1784, 1788, 1784,
     1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1784, 1788,
     1784, 1788, 1788, 1788, 1788, 1784, 1788, 1784, 1788, 1784,

     1788, 1784, 1788, 1788, 1788, 1788, 1784, 1784, 1788, 1788,
     1784, 1784, 1784, 1784, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1784, 1784, 1788, 1788, 1784,
     1784, 1788, 1788, 1788, 1784, 1784, 1788, 1788, 1788, 1788,
     1784, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1784, 1784, 1788, 1788, 1788, 1788, 1788, 1788, 1784,
     1788, 1788, 1784, 1788, 1788, 1784, 1784, 1784, 1788, 1784,
     1788, 1784, 1788, 1784, 1788, 1788, 1788, 1788, 1784, 1788,
     1784, 1784, 1788, 1788, 1788, 1788, 1784, 1788, 1784, 1784,
     1788, 1788, 1788, 1784, 1788, 1784, 1784, 1788, 1788, 1788,

     1784, 1788, 1788, 1788, 1784, 1788, 1788, 1784, 1784, 1788,
     1788, 1788, 1788, 1788, 1788, 1784, 1788, 1784, 1784, 1784,
     1788, 1784, 1784, 1788, 1788, 1788, 1788, 1788, 1784, 1788,
     1788, 1788, 1784, 1784, 1784, 1788, 1788, 1784, 1788, 1788,
     1788, 1788, 1788, 1784, 1788, 1788, 1784, 1784, 1788, 1788,
     1784, 1788, 1784, 1788, 1788, 1788, 1784, 1788, 1788, 1784,
     1788, 1788, 1788, 1784, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1784, 1784, 1784, 1788, 1788, 1788, 1788,
     1788, 1788, 1784, 1784, 1788, 1788, 1784, 1784, 1788, 1788,
     1784, 1788, 1788, 1784, 1784, 1788, 1788, 1788, 1788, 1784,

     1784, 1788, 1784, 1788, 1788, 1784, 1788, 1788, 1784, 1784,
     1788, 1788, 1788, 1788, 1784, 1788, 1784, 1784, 1784, 1788,
     1788, 1784, 1788, 1784, 1788, 1784, 1788, 1784, 1788, 1788,
     1784, 1784, 1784, 1784, 1784, 1788, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784,    0, 1784, 1784, 1784, 1784, 1784, 1784,
     1784

    } ;

static yyconst flex_int16_t yy_nxt[8262] =
    {   0,
        8,    9,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   29,    8,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       53,    8,    8,   55,   55,   73,   73,   56,   57,   58,
       59,   60,   61,   62,   63, 1093,   64,   79,   79,   65,
       66,   67,   68,   69,   70,   71,   55,   55,   80,   81,
       56,   57,   58,   59,   60,   61,   62,   63, 1094,   64,
      204,  204,   65,   66,   67,   68,   69,   70,   71,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   77, 1095,  127,   78,   78,
       84,   85,   86,  205,  206,   73,   73,  219,  135,   94,
       87,  128,   88,   95,  136,  220,   89,   90,   91,   92,
       93,   98,   96,  105, 1096,   99,  123,  106,  100,   97,
      244,  107,  101,  124,  245,  102,  125,  108,  103,  126,
      109,  104,  110,  110,  213,  213, 1097,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  214,  214,  110,  110,
      110,  110,  110,  110,  110,  129,  217,  130,  131,  218,

      240,  241,  221, 1098,  132,  133,  242,  111,  195,  112,
      134,  243,  196,  138,  113,  139,  197,  140,  269,  114,
      115,  141,  144,  222,  116,  328,  270,  142,  117,  329,
      145,  118,  143,  119,  120,  191,  146,  121,  289,  148,
      122,  149,  147,  150,  290,  332,  192,  258,  193,  235,
      169,  194,  259,  151,  170,  333,  236, 1099,  171,  152,
      153,  154,  237,  155,  172,  173,  161,  315,  294,  174,
      162,  156,  316,  157,  163,  158, 1100,  164,  159,  160,
      165,  198,  295,  166,  199,  200,  167,  175,  335,  176,
      381,  201,  177,  178,  202,  336,  265,  179,  266,  180,

      382,  181,  520,  185,  182,  183,  275,  186,  276,  184,
      187,  188,  277,  267,  268,  285,  521,  189,  286,  278,
      190,  224,  224,  279,  343,  344,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  232,  233,  224,  224,  224,
      224,  224,  224,  224,  351,  321,  318,  225,  322,  234,
      260,  393,  261,  226,  319,  262,  330,  394,  368,  352,
     1101,  263,  320,  227,  228,  228,  369,  331,  264,  228,
      228,  228,  228,  228,  228,  228,  228,  228, 1103,  399,
      228,  228,  228,  228,  228,  228,  228,  416,  229,  239,
      239,  400,  357,  417,  239,  239,  239,  239,  239,  239,

      239,  239,  239,  358,  359,  239,  239,  239,  239,  239,
      239,  239,  247,  248,  409,  323,  410,  364,  485,  324,
      615,  365,  486,  249,  250,  251,  325,  366,  616,  252,
      253,  254,  255,  284,  284,  326,  377,  396,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  378,  397,  284,
      284,  284,  284,  284,  284,  284,  292,  292,  204,  204,
     1104,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      339,  406,  292,  292,  292,  292,  292,  292,  292,  383,
      340,  936,  411,  388,  426,  210,  341,  937,  384,  342,
      389,  407,  469,  385,  412,  470,  386,  213,  213,  293,

      302,  302,  390,  427,  427,  302,  302,  302,  302,  302,
      302,  302,  302,  302,   83,   83,  302,  302,  302,  302,
      302,  302,  302,   83,   83,   83,  303,  304,   83,   83,
       83,   83,  305,   83,   83,   83,   83,  306,   83,  307,
       83,   83,  308,  309,   83,   83,   83,   83,   83,   83,
      310,  310,  515,  594, 1105,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  595,  516,  310,  310,  310,  310,
      310,  310,  310,  413,  456,  445,  457,  414,  467,  494,
      541,  415,  446,  495,  542,  609,  610,  468,  311,  347,
      347,  458, 1106,  628,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  629,  501,  347,  347,  347,  347,  347,
      347,  347,  663,  606,  664,  607,  618,  502,  348,  349,
      349,  503,  608,  619,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  471, 1108,  349,  349,  349,  349,  349,
      349,  349,  660,  481,  472,  657,  658,  672,  673,  473,
      474,  661,  475,  650,  350,  353,  353,  482,  483,  484,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  651,
      674,  353,  353,  353,  353,  353,  353,  353, 1109,  681,
     1110,  678,  354,  361,  361,  679,  682,  800,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  603,  801,  361,

      361,  361,  361,  361,  361,  361,  371,  802,  802,  814,
      604,  372,  685,  605,  685,  686,  686,  815,  798,  821,
      822,  373,  799, 1112,  374,  932,  932,  375,  404,  404,
      686,  686, 1113,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  886,  981,  404,  404,  404,  404,  404,  404,
      404,  405,  428,  428, 1114,  982,  887,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  983, 1115,  428,  428,
      428,  428,  428,  428,  428, 1116,  984, 1036,  985, 1119,
     1037, 1111, 1111, 1117, 1122, 1123, 1124, 1130, 1131, 1132,
      429,  431,  431, 1133, 1118, 1134,  431,  431,  431,  431,

      431,  431,  431,  431,  431, 1137, 1138,  431,  431,  431,
      431,  431,  431,  431,  432,  432, 1139, 1140, 1140,  432,
      432,  432,  432,  432,  432,  432,  432,  432, 1141, 1142,
      432,  432,  432,  432,  432,  432,  432,  433,  434,  434,
     1143, 1144, 1145,  434,  434,  434,  434,  434,  434,  434,
      434,  434, 1146, 1147,  434,  434,  434,  434,  434,  434,
      434, 1148, 1149, 1150, 1151, 1153, 1156, 1157, 1158, 1159,
     1161, 1162, 1163, 1168, 1170, 1164,  435,  437,  437, 1165,
     1171, 1172,  437,  437,  437,  437,  437,  437,  437,  437,
      437, 1173, 1174,  437,  437,  437,  437,  437,  437,  437,

      438,  438, 1176, 1177, 1179,  438,  438,  438,  438,  438,
      438,  438,  438,  438, 1180, 1181,  438,  438,  438,  438,
      438,  438,  438,  439,  439, 1182, 1183, 1184,  439,  439,
      439,  439,  439,  439,  439,  439,  439, 1185, 1186,  439,
      439,  439,  439,  439,  439,  439,  440,  440, 1187, 1188,
     1189,  440,  440,  440,  440,  440,  440,  440,  440,  440,
     1190, 1194,  440,  440,  440,  440,  440,  440,  440, 1191,
     1196, 1197, 1198, 1192, 1199, 1195, 1200, 1201,  441,  447,
      447, 1204, 1208, 1210,  447,  447,  447,  447,  447,  447,
      447,  447,  447, 1211, 1212,  447,  447,  447,  447,  447,

      447,  447,  453,  453, 1213, 1214, 1217,  453,  453,  453,
      453,  453,  453,  453,  453,  453, 1218, 1221,  453,  453,
      453,  453,  453,  453,  453,  454,  477,  477, 1222, 1223,
     1224,  477,  477,  477,  477,  477,  477,  477,  477,  477,
     1225, 1227,  477,  477,  477,  477,  477,  477,  477,  478,
      478, 1228, 1229, 1230,  478,  478,  478,  478,  478,  478,
      478,  478,  478, 1231, 1232,  478,  478,  478,  478,  478,
      478,  478,  487,  487, 1234, 1236, 1241,  487,  487,  487,
      487,  487,  487,  487,  487,  487, 1242, 1244,  487,  487,
      487,  487,  487,  487,  487, 1245,  689, 1248, 1249, 1251,

      690, 1252, 1253, 1254, 1255,  691, 1256, 1257, 1258, 1259,
      488,  692, 1261, 1262,  489,  491,  491,  693, 1263, 1265,
      491,  491,  491,  491,  491,  491,  491,  491,  491, 1266,
     1268,  491,  491,  491,  491,  491,  491,  491, 1270, 1275,
     1277, 1278, 1279, 1280, 1281, 1282, 1283,  492, 1284, 1286,
      493,  508,  508, 1287, 1288, 1289,  508,  508,  508,  508,
      508,  508,  508,  508,  508, 1290, 1291,  508,  508,  508,
      508,  508,  508,  508,  509,  514,  514, 1292, 1293, 1295,
      514,  514,  514,  514,  514,  514,  514,  514,  514, 1298,
     1299,  514,  514,  514,  514,  514,  514,  514,  522,  522,

     1300, 1302, 1303,  522,  522,  522,  522,  522,  522,  522,
      522,  522, 1304, 1305,  522,  522,  522,  522,  522,  522,
      522, 1306, 1307, 1308, 1307, 1309,  523, 1310, 1311, 1312,
     1313, 1314, 1315, 1316, 1317, 1318, 1320, 1325, 1326, 1327,
     1329,  524,  529,  529, 1333, 1334, 1336,  529,  529,  529,
      529,  529,  529,  529,  529,  529, 1341, 1342,  529,  529,
      529,  529,  529,  529,  529,  547,  547, 1343, 1344, 1345,
      547,  547,  547,  547,  547,  547,  547,  547,  547, 1346,
     1347,  547,  547,  547,  547,  547,  547,  547, 1348, 1352,
     1353, 1354, 1355,  548, 1356, 1357, 1358, 1359, 1360, 1361,

     1362, 1363, 1365,  549,  553,  553, 1369, 1370, 1371,  553,
      553,  553,  553,  553,  553,  553,  553,  553, 1372, 1374,
      553,  553,  553,  553,  553,  553,  553,  563,  563, 1375,
     1376, 1378,  563,  563,  563,  563,  563,  563,  563,  563,
      563, 1379, 1380,  563,  563,  563,  563,  563,  563,  563,
      568,  568, 1382, 1383, 1384,  568,  568,  568,  568,  568,
      568,  568,  568,  568, 1385, 1386,  568,  568,  568,  568,
      568,  568,  568,  570,  570, 1387, 1389, 1390,  570,  570,
      570,  570,  570,  570,  570,  570,  570, 1392, 1393,  570,
      570,  570,  570,  570,  570,  570, 1394, 1396, 1398, 1399,

     1402, 1403, 1405, 1406, 1407, 1408, 1409, 1411, 1413, 1414,
     1415, 1416, 1419, 1420, 1421, 1424, 1425,  571,  572,  572,
     1426, 1428, 1431,  572,  572,  572,  572,  572,  572,  572,
      572,  572, 1432, 1433,  572,  572,  572,  572,  572,  572,
      572, 1435, 1436, 1436, 1439, 1440, 1441, 1442, 1443, 1445,
      573, 1446, 1447, 1448, 1450, 1451, 1453, 1454, 1455, 1457,
     1461, 1458,  574,  583,  583, 1462, 1463, 1464,  583,  583,
      583,  583,  583,  583,  583,  583,  583, 1459, 1465,  583,
      583,  583,  583,  583,  583,  583,  584,  584, 1466, 1467,
     1468,  584,  584,  584,  584,  584,  584,  584,  584,  584,

     1471, 1472,  584,  584,  584,  584,  584,  584,  584,  589,
      589, 1473, 1474, 1475,  589,  589,  589,  589,  589,  589,
      589,  589,  589, 1476, 1479,  589,  589,  589,  589,  589,
      589,  589,  601,  601, 1481, 1482, 1484,  601,  601,  601,
      601,  601,  601,  601,  601,  601, 1485, 1486,  601,  601,
      601,  601,  601,  601,  601,  633,  633, 1487, 1488, 1490,
      633,  633,  633,  633,  633,  633,  633,  633,  633, 1492,
     1493,  633,  633,  633,  633,  633,  633,  633, 1494, 1495,
     1497, 1499, 1501, 1503, 1504, 1505, 1506, 1509, 1510, 1515,
     1516, 1517, 1518,  634,  637,  637, 1519, 1520, 1521,  637,

      637,  637,  637,  637,  637,  637,  637,  637, 1525, 1527,
      637,  637,  637,  637,  637,  637,  637,  641,  641, 1528,
     1529, 1532,  641,  641,  641,  641,  641,  641,  641,  641,
      641, 1530, 1530,  641,  641,  641,  641,  641,  641,  641,
     1522, 1533, 1534,  642, 1523,  643, 1537, 1538, 1539, 1540,
     1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1554,  644,
     1555, 1556, 1557,  645,  649,  649, 1558, 1559, 1561,  649,
      649,  649,  649,  649,  649,  649,  649,  649, 1562, 1564,
      649,  649,  649,  649,  649,  649,  649,  653,  653, 1565,
     1569, 1573,  653,  653,  653,  653,  653,  653,  653,  653,

      653, 1575, 1576,  653,  653,  653,  653,  653,  653,  653,
      688,  688, 1577, 1578, 1580,  688,  688,  688,  688,  688,
      688,  688,  688,  688, 1583, 1584,  688,  688,  688,  688,
      688,  688,  688,  697,  697, 1585, 1586, 1588,  697,  697,
      697,  697,  697,  697,  697,  697,  697, 1593, 1595,  697,
      697,  697,  697,  697,  697,  697,  699,  699, 1597, 1598,
     1599,  699,  699,  699,  699,  699,  699,  699,  699,  699,
     1600,  700,  699,  699,  699,  699,  699,  699,  699,  711,
      711, 1602, 1603, 1604,  711,  711,  711,  711,  711,  711,
      711,  711,  711, 1606, 1607,  711,  711,  711,  711,  711,

      711,  711,  712,  712, 1611, 1612, 1613,  712,  712,  712,
      712,  712,  712,  712,  712,  712, 1614, 1615,  712,  712,
      712,  712,  712,  712,  712,  716,  716, 1617, 1621, 1624,
      716,  716,  716,  716,  716,  716,  716,  716,  716, 1625,
     1626,  716,  716,  716,  716,  716,  716,  716,  717,  718,
      740,  740, 1627, 1628, 1630,  740,  740,  740,  740,  740,
      740,  740,  740,  740, 1631, 1632,  740,  740,  740,  740,
      740,  740,  740,  741,  750,  750, 1636, 1637, 1639,  750,
      750,  750,  750,  750,  750,  750,  750,  750, 1640, 1641,
      750,  750,  750,  750,  750,  750,  750, 1591, 1642, 1643,

     1644, 1645, 1592, 1646, 1649, 1650, 1652, 1654, 1655, 1656,
     1658, 1659, 1661, 1662, 1663,  751,  760,  760, 1665, 1666,
     1667,  760,  760,  760,  760,  760,  760,  760,  760,  760,
     1668, 1669,  760,  760,  760,  760,  760,  760,  760,  761,
      761, 1670, 1671, 1672,  761,  761,  761,  761,  761,  761,
      761,  761,  761, 1673, 1676,  761,  761,  761,  761,  761,
      761,  761,  765,  765, 1677, 1678, 1679,  765,  765,  765,
      765,  765,  765,  765,  765,  765, 1680, 1681,  765,  765,
      765,  765,  765,  765,  765, 1682, 1686, 1689, 1690, 1692,
     1693, 1696, 1697, 1698, 1699, 1700, 1702, 1704, 1705, 1707,

     1708, 1711, 1712, 1713, 1714, 1716,  766,  778,  778, 1717,
     1720, 1721,  778,  778,  778,  778,  778,  778,  778,  778,
      778, 1723, 1725,  778,  778,  778,  778,  778,  778,  778,
      779,  779, 1727, 1728, 1729,  779,  779,  779,  779,  779,
      779,  779,  779,  779, 1730, 1734,  779,  779,  779,  779,
      779,  779,  779,  782,  782, 1736, 1737, 1739,  782,  782,
      782,  782,  782,  782,  782,  782,  782, 1740, 1741,  782,
      782,  782,  782,  782,  782,  782,  786,  786, 1742, 1743,
     1744,  786,  786,  786,  786,  786,  786,  786,  786,  786,
     1745, 1746,  786,  786,  786,  786,  786,  786,  786, 1747,

     1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
     1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,  787,  804,
      804, 1766, 1767, 1768,  804,  804,  804,  804,  804,  804,
      804,  804,  804, 1769, 1770,  804,  804,  804,  804,  804,
      804,  804,  807,  807, 1771, 1772, 1773,  807,  807,  807,
      807,  807,  807,  807,  807,  807, 1774, 1775,  807,  807,
      807,  807,  807,  807,  807,  809,  809, 1776, 1777, 1778,
      809,  809,  809,  809,  809,  809,  809,  809,  809, 1779,
     1780,  809,  809,  809,  809,  809,  809,  809,  812,  812,
     1781, 1782, 1783,  812,  812,  812,  812,  812,  812,  812,

      812,  812,   83,  208,  812,  812,  812,  812,  812,  812,
      812,  816,  816, 1091, 1089, 1088,  816,  816,  816,  816,
      816,  816,  816,  816,  816, 1087, 1086,  816,  816,  816,
      816,  816,  816,  816,  830,  830, 1085, 1084, 1083,  830,
      830,  830,  830,  830,  830,  830,  830,  830, 1082, 1081,
      830,  830,  830,  830,  830,  830,  830,  832,  832, 1080,
     1079, 1077,  832,  832,  832,  832,  832,  832,  832,  832,
      832, 1076, 1075,  832,  832,  832,  832,  832,  832,  832,
      833,  833, 1074, 1073, 1072,  833,  833,  833,  833,  833,
      833,  833,  833,  833, 1071, 1070,  833,  833,  833,  833,

      833,  833,  833, 1069, 1068, 1065, 1064, 1063, 1062, 1059,
     1054, 1053,  834,  837,  837, 1052, 1050, 1046,  837,  837,
      837,  837,  837,  837,  837,  837,  837, 1044, 1042,  837,
      837,  837,  837,  837,  837,  837,  838,  838, 1040, 1039,
     1038,  838,  838,  838,  838,  838,  838,  838,  838,  838,
     1035, 1034,  838,  838,  838,  838,  838,  838,  838,  839,
      839, 1033, 1030, 1029,  839,  839,  839,  839,  839,  839,
      839,  839,  839, 1027, 1026,  839,  839,  839,  839,  839,
      839,  839,  845,  845, 1025, 1024, 1023,  845,  845,  845,
      845,  845,  845,  845,  845,  845, 1022, 1021,  845,  845,

      845,  845,  845,  845,  845,  860,  860, 1018, 1017, 1015,
      860,  860,  860,  860,  860,  860,  860,  860,  860, 1014,
     1008,  860,  860,  860,  860,  860,  860,  860,  861,  861,
     1007, 1006, 1005,  861,  861,  861,  861,  861,  861,  861,
      861,  861, 1004, 1003,  861,  861,  861,  861,  861,  861,
      861,  863,  863, 1002, 1001, 1000,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  999,  998,  863,  863,  863,
      863,  863,  863,  863,  871,  871,  997,  996,  995,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  994,  993,
      871,  871,  871,  871,  871,  871,  871,  872,  872,  992,

      991,  990,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  989,  988,  872,  872,  872,  872,  872,  872,  872,
      882,  882,  987,  986,  980,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  979,  978,  882,  882,  882,  882,
      882,  882,  882,  883,  883,  977,  976,  975,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  973,  972,  883,
      883,  883,  883,  883,  883,  883,  885,  885,  971,  970,
      969,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      968,  967,  885,  885,  885,  885,  885,  885,  885,  891,
      891,  966,  965,  964,  891,  891,  891,  891,  891,  891,

      891,  891,  891,  962,  959,  891,  891,  891,  891,  891,
      891,  891,  898,  898,  958,  957,  956,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  955,  954,  898,  898,
      898,  898,  898,  898,  898,  899,  899,  952,  951,  950,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  949,
      947,  899,  899,  899,  899,  899,  899,  899,  946,  945,
      943,  940,  939,  938,  935,  934,  933,  929,  927,  925,
      920,  919,  918,  917,  916,  915,  913,  900,  912,  911,
      910,  909,  908,  907,  901,  905,  905,  906,  904,  903,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  902,

      897,  905,  905,  905,  905,  905,  905,  905,  914,  914,
      896,  895,  894,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  893,  892,  914,  914,  914,  914,  914,  914,
      914,  921,  921,  890,  889,  888,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  884,  881,  921,  921,  921,
      921,  921,  921,  921,  922,  922,  880,  879,  878,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  877,  876,
      922,  922,  922,  922,  922,  922,  922,  923,  923,  875,
      874,  873,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  870,  869,  923,  923,  923,  923,  923,  923,  923,

      868,  867,  866,  865,  864,  924,  926,  926,  862,  859,
      858,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      857,  856,  926,  926,  926,  926,  926,  926,  926,  928,
      928,  855,  854,  853,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  852,  851,  928,  928,  928,  928,  928,
      928,  928,  930,  930,  850,  849,  848,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  847,  846,  930,  930,
      930,  930,  930,  930,  930,  844,  843,  842,  841,  840,
      836,  835,  831,  829,  828,  827,  826,  825,  824,  823,
      820,  819,  818,  817,  931,  941,  941,  813,  811,  810,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  808,
      806,  941,  941,  941,  941,  941,  941,  941,  942,  942,
      805,  803,  797,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  796,  795,  942,  942,  942,  942,  942,  942,
      942,  944,  944,  794,  793,  792,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  791,  790,  944,  944,  944,
      944,  944,  944,  944,  948,  948,  789,  788,  785,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  784,  783,
      948,  948,  948,  948,  948,  948,  948,  953,  953,  781,
      780,  777,  953,  953,  953,  953,  953,  953,  953,  953,

      953,  776,  775,  953,  953,  953,  953,  953,  953,  953,
      960,  960,  774,  773,  772,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  771,  770,  960,  960,  960,  960,
      960,  960,  960,  961,  961,  769,  768,  767,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  764,  763,  961,
      961,  961,  961,  961,  961,  961,  963,  963,  762,  759,
      758,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      757,  756,  963,  963,  963,  963,  963,  963,  963,  974,
      974,  755,  754,  753,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  752,  749,  974,  974,  974,  974,  974,

      974,  974, 1009, 1009,  748,  747,  746, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009,  745,  744, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1010, 1010,  743,  742,  739,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,  738,
      737, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1011, 1011,
      736,  735,  734, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,  733,  732, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1012, 1012,  731,  730,  729, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012,  728,  727, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1013, 1013,  726,  725,  724, 1013,

     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,  723,  722,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1016, 1016,  721,
      720,  719, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016,  715,  714, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1019, 1019,  713,  710,  709, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019,  708,  707, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1020, 1020,  706,  705,  704, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020,  703,  702, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1028, 1028,  701,  698,
      696, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,

      695,  694, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1031,
     1031,  687,  684,  683, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031,  680,  677, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1032, 1032,  676,  675,  671, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032,  670,  669, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1041, 1041,  668,  667,  666,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,  665,
      662, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1043, 1043,
      659,  656,  655, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043,  654,  652, 1043, 1043, 1043, 1043, 1043, 1043,

     1043, 1045, 1045,  648,  647,  646, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045,  640,  639, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1047, 1047,  638,  636,  635, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,  632,  631,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1048, 1048,  630,
      627,  626, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048,  625,  624, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1049, 1049,  623,  622,  621, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049,  620,  617, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1051, 1051,  614,  613,  612, 1051, 1051,

     1051, 1051, 1051, 1051, 1051, 1051, 1051,  611,  602, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1055, 1055,  600,  599,
      598, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
      597,  596, 1055, 1055, 1055, 1055, 1055, 1055, 1055,  593,
      592,  591,  590,  588,  587,  586,  585,  582,  581,  580,
      579,  578,  577,  576,  575,  569,  567,  566, 1056, 1057,
     1057,  565,  564,  562, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057,  561,  560, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1058, 1058,  559,  558,  557, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058,  556,  555, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1060, 1060,  554,  552,  551,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,  550,
      546, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1061, 1061,
      545,  544,  543, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061,  540,  539, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1066, 1066,  538,  537,  536, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066,  535,  534, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1067, 1067,  533,  532,  531, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  530,  528,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1078, 1078,  527,

      526,  525, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078,  519,  518, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1090, 1090,  517,  513,  512, 1090, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1090,  511,  510, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1092, 1092,  507,  506,  505, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092,  504,  500, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1102, 1102,  499,  498,
      497, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
      496,  490, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1107,
     1107,  480,  479,  476, 1107, 1107, 1107, 1107, 1107, 1107,

     1107, 1107, 1107,  466,  465, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1120, 1120,  464,  463,  462, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120,  461,  460, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1121, 1121,  459,  455,  452,
     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,  451,
      450, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1125, 1125,
      449,  448,  444, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
     1125, 1125,  443,  442, 1125, 1125, 1125, 1125, 1125, 1125,
     1125, 1126, 1126,  436,  430,  212, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126,  210,  425, 1126, 1126, 1126,

     1126, 1126, 1126, 1126, 1127, 1127,  424,  423,  422, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,  421,  420,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1128, 1128,  419,
      418,  408, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128,  403,  402, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
      401,  398,  395,  392,  391,  387,  380,  379,  376,  370,
      367,  363,  362,  360,  356,  355,  346,  345,  338, 1129,
     1135, 1135,  337,  334,  327, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135,  317,  314, 1135, 1135, 1135, 1135,
     1135, 1135, 1135,  313,  312,  301,  300,  299,  298,  297,

      296,  291,  288,  287,  283,  282,  281,  280,  274,  273,
      272,  271,  257,  256,  246,  238,  231,  230,  223,  216,
     1136, 1152, 1152,  215,  212,   76, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152,  210,  207, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1154, 1154,  203,  168,  137, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,   82,   76,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1784,
     1784, 1784, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1784, 1784, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1160, 1160, 1784, 1784, 1784, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1784, 1784, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1166, 1166, 1784, 1784, 1784, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1784, 1784, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1167, 1167, 1784, 1784,
     1784, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1784, 1784, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1169,
     1169, 1784, 1784, 1784, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1784, 1784, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1175, 1175, 1784, 1784, 1784, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1784, 1784, 1175, 1175,

     1175, 1175, 1175, 1175, 1175, 1178, 1178, 1784, 1784, 1784,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1784,
     1784, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1193, 1193,
     1784, 1784, 1784, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1784, 1784, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1202, 1202, 1784, 1784, 1784, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1784, 1784, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1203, 1203, 1784, 1784, 1784, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1784, 1784,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1205, 1205, 1784,

     1784, 1784, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1784, 1784, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1206, 1206, 1784, 1784, 1784, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1784, 1784, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1207, 1209, 1209, 1784, 1784, 1784, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1784, 1784, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1215, 1215, 1784, 1784,
     1784, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1784, 1784, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216,

     1216, 1784, 1784, 1784, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1784, 1784, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1219, 1219, 1784, 1784, 1784, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1784, 1784, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1220, 1220, 1784, 1784, 1784,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1784,
     1784, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1226, 1226,
     1784, 1784, 1784, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1784, 1784, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1233, 1233, 1784, 1784, 1784, 1233, 1233, 1233, 1233,

     1233, 1233, 1233, 1233, 1233, 1784, 1784, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1235, 1235, 1784, 1784, 1784, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1784, 1784,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1237, 1237, 1784,
     1784, 1784, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1784, 1784, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1238,
     1239, 1239, 1784, 1784, 1784, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1784, 1784, 1239, 1239, 1239, 1239,

     1239, 1239, 1239, 1240, 1240, 1784, 1784, 1784, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1784, 1784, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1243, 1243, 1784, 1784,
     1784, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1784, 1784, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1246,
     1246, 1784, 1784, 1784, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1784, 1784, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1247, 1247, 1784, 1784, 1784, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1784, 1784, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1250, 1250, 1784, 1784, 1784,

     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1784,
     1784, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1260, 1260,
     1784, 1784, 1784, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1784, 1784, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1264, 1264, 1784, 1784, 1784, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1784, 1784, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1267, 1267, 1784, 1784, 1784, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1784, 1784,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1269, 1269, 1784,
     1784, 1784, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,

     1269, 1784, 1784, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1271, 1271, 1784, 1784, 1784, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1784, 1784, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1272, 1272, 1784, 1784, 1784, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1784, 1784, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1273, 1274, 1274, 1784, 1784,
     1784, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1784, 1784, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1276,

     1276, 1784, 1784, 1784, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1784, 1784, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1285, 1285, 1784, 1784, 1784, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1784, 1784, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1294, 1294, 1784, 1784, 1784,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1784,
     1784, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1296, 1296,
     1784, 1784, 1784, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1784, 1784, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1297, 1297, 1784, 1784, 1784, 1297, 1297, 1297, 1297,

     1297, 1297, 1297, 1297, 1297, 1784, 1784, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1301, 1301, 1784, 1784, 1784, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1784, 1784,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1319, 1319, 1784,
     1784, 1784, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1784, 1784, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1321, 1321, 1784, 1784, 1784, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1784, 1784, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1784, 1784, 1784, 1784, 1322, 1323, 1323,
     1784, 1784, 1784, 1323, 1323, 1323, 1323, 1323, 1323, 1323,

     1323, 1323, 1784, 1784, 1323, 1323, 1323, 1323, 1323, 1323,
     1323, 1324, 1324, 1784, 1784, 1784, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1784, 1784, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1328, 1328, 1784, 1784, 1784, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1784, 1784,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1330, 1330, 1784,
     1784, 1784, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1784, 1784, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1331, 1331, 1784, 1784, 1784, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1784, 1784, 1331, 1331, 1331, 1331,

     1331, 1331, 1331, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1332, 1335, 1335, 1784, 1784, 1784, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1784, 1784, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1337, 1337, 1784, 1784,
     1784, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1784, 1784, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1338,
     1338, 1784, 1784, 1784, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1784, 1784, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1339, 1340, 1340, 1784, 1784, 1784, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1784, 1784, 1340,

     1340, 1340, 1340, 1340, 1340, 1340, 1349, 1349, 1784, 1784,
     1784, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1784, 1784, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350,
     1350, 1784, 1784, 1784, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1784, 1784, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1351, 1351, 1784, 1784, 1784, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1784, 1784, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1364, 1364, 1784, 1784, 1784,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1784,
     1784, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1366, 1366,

     1784, 1784, 1784, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1784, 1784, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1367, 1367, 1784, 1784, 1784, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1784, 1784, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1368, 1368, 1784, 1784, 1784, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1784, 1784,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1373, 1373, 1784,
     1784, 1784, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1784, 1784, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1377, 1377, 1784, 1784, 1784, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1784, 1784, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1381, 1381, 1784, 1784, 1784, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1784, 1784, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1388, 1388, 1784, 1784,
     1784, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1784, 1784, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1391,
     1391, 1784, 1784, 1784, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1784, 1784, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1395, 1395, 1784, 1784, 1784, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1784, 1784, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1397, 1397, 1784, 1784, 1784,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1784,
     1784, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1400, 1400,
     1784, 1784, 1784, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1784, 1784, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1401, 1401, 1784, 1784, 1784, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1784, 1784, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1404, 1404, 1784, 1784, 1784, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1784, 1784,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1410, 1410, 1784,

     1784, 1784, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1784, 1784, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1412, 1412, 1784, 1784, 1784, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1784, 1784, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1417, 1417, 1784, 1784, 1784, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1784, 1784, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1418, 1422, 1422, 1784,
     1784, 1784, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1784, 1784, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1423, 1423, 1784, 1784, 1784, 1423, 1423, 1423, 1423, 1423,

     1423, 1423, 1423, 1423, 1784, 1784, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1427, 1427, 1784, 1784, 1784, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1784, 1784, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1429, 1429, 1784, 1784,
     1784, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1784, 1784, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1430,
     1430, 1784, 1784, 1784, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1784, 1784, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1434, 1434, 1784, 1784, 1784, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1784, 1784, 1434, 1434,

     1434, 1434, 1434, 1434, 1434, 1437, 1437, 1784, 1784, 1784,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1784,
     1784, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1438, 1438,
     1784, 1784, 1784, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1784, 1784, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1444, 1444, 1784, 1784, 1784, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1784, 1784, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1449, 1449, 1784, 1784, 1784, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1784, 1784,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1452, 1452, 1784,

     1784, 1784, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1784, 1784, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1456, 1456, 1784, 1784, 1784, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1784, 1784, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1460, 1460, 1784, 1784, 1784, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1784, 1784, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1469, 1469, 1784, 1784,
     1784, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1784, 1784, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1470,
     1470, 1784, 1784, 1784, 1470, 1470, 1470, 1470, 1470, 1470,

     1470, 1470, 1470, 1784, 1784, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1477, 1477, 1784, 1784, 1784, 1477, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1477, 1784, 1784, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1478, 1478, 1784, 1784, 1784,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1784,
     1784, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1480, 1480,
     1784, 1784, 1784, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1784, 1784, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1483, 1483, 1784, 1784, 1784, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1784, 1784, 1483, 1483, 1483,

     1483, 1483, 1483, 1483, 1489, 1489, 1784, 1784, 1784, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1784, 1784,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1491, 1491, 1784,
     1784, 1784, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1784, 1784, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1496, 1496, 1784, 1784, 1784, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1784, 1784, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1498, 1498, 1784, 1784, 1784, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1784, 1784, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1500, 1500, 1784, 1784,

     1784, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1784, 1784, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1502,
     1502, 1784, 1784, 1784, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1784, 1784, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1507, 1507, 1784, 1784, 1784, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1784, 1784, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1508, 1508, 1784, 1784, 1784,
     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1784,
     1784, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1511, 1511,
     1784, 1784, 1784, 1511, 1511, 1511, 1511, 1511, 1511, 1511,

     1511, 1511, 1784, 1784, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1512, 1512, 1784, 1784, 1784, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1784, 1784, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1513, 1513, 1784, 1784, 1784, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1784, 1784,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1514, 1514, 1784,
     1784, 1784, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1514, 1784, 1784, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1524, 1524, 1784, 1784, 1784, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1784, 1784, 1524, 1524, 1524, 1524,

     1524, 1524, 1524, 1526, 1526, 1784, 1784, 1784, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1784, 1784, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1531, 1531, 1784, 1784,
     1784, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
     1784, 1784, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1535,
     1535, 1784, 1784, 1784, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1535, 1784, 1784, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1536, 1536, 1784, 1784, 1784, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1784, 1784, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1541, 1541, 1784, 1784, 1784,

     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1784,
     1784, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1542, 1543,
     1543, 1784, 1784, 1784, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1784, 1784, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1552, 1552, 1784, 1784, 1784, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1784, 1784, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1553, 1553, 1784, 1784, 1784,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1784,
     1784, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1560, 1560,
     1784, 1784, 1784, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1784, 1784, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1563, 1563, 1784, 1784, 1784, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1784, 1784, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1566, 1566, 1784, 1784, 1784, 1566,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1784, 1784,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1567, 1567, 1784,
     1784, 1784, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1784, 1784, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1568, 1568, 1784, 1784, 1784, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1784, 1784, 1568, 1568, 1568, 1568,

     1568, 1568, 1568, 1570, 1570, 1784, 1784, 1784, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1784, 1784, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1571, 1572, 1572, 1784, 1784,
     1784, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1784, 1784, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1574,
     1574, 1784, 1784, 1784, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1784, 1784, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1579, 1579, 1784, 1784, 1784, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1784, 1784, 1579, 1579,

     1579, 1579, 1579, 1579, 1579, 1581, 1581, 1784, 1784, 1784,
     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1784,
     1784, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1582, 1582,
     1784, 1784, 1784, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1784, 1784, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1587, 1587, 1784, 1784, 1784, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1784, 1784, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1589, 1589, 1784, 1784, 1784, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1784, 1784,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1590, 1590, 1784,

     1784, 1784, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1784, 1784, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1594, 1594, 1784, 1784, 1784, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1784, 1784, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1596, 1596, 1784, 1784, 1784, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1784, 1784, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1601, 1601, 1784, 1784,
     1784, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601,
     1784, 1784, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1605,
     1605, 1784, 1784, 1784, 1605, 1605, 1605, 1605, 1605, 1605,

     1605, 1605, 1605, 1784, 1784, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1608, 1608, 1784, 1784, 1784, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1784, 1784, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1609, 1609, 1784, 1784, 1784,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1784,
     1784, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1610, 1616, 1616,
     1784, 1784, 1784, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
     1616, 1616, 1784, 1784, 1616, 1616, 1616, 1616, 1616, 1616,

     1616, 1618, 1618, 1784, 1784, 1784, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1784, 1784, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1619, 1619, 1784, 1784, 1784, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1784, 1784,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1620, 1620, 1784,
     1784, 1784, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1784, 1784, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1622, 1622, 1784, 1784, 1784, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1784, 1784, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1623, 1623, 1784, 1784, 1784, 1623, 1623,

     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1784, 1784, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1629, 1629, 1784, 1784,
     1784, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1784, 1784, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1633,
     1633, 1784, 1784, 1784, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1784, 1784, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1634, 1634, 1784, 1784, 1784, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1784, 1784, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1635, 1635, 1784, 1784, 1784,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1784,

     1784, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1638, 1638,
     1784, 1784, 1784, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1784, 1784, 1638, 1638, 1638, 1638, 1638, 1638,
     1638, 1647, 1647, 1784, 1784, 1784, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1784, 1784, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1648, 1648, 1784, 1784, 1784, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1784, 1784,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1651, 1651, 1784,
     1784, 1784, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1784, 1784, 1651, 1651, 1651, 1651, 1651, 1651, 1651,

     1653, 1653, 1784, 1784, 1784, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1784, 1784, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1657, 1657, 1784, 1784, 1784, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1784, 1784, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1660, 1660, 1784, 1784,
     1784, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1784, 1784, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1664,
     1664, 1784, 1784, 1784, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1784, 1784, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1674, 1674, 1784, 1784, 1784, 1674, 1674, 1674,

     1674, 1674, 1674, 1674, 1674, 1674, 1784, 1784, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1675, 1675, 1784, 1784, 1784,
     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1784,
     1784, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1683, 1683,
     1784, 1784, 1784, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
     1683, 1683, 1784, 1784, 1683, 1683, 1683, 1683, 1683, 1683,
     1683, 1684, 1684, 1784, 1784, 1784, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1684, 1784, 1784, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,

     1784, 1784, 1784, 1685, 1687, 1687, 1784, 1784, 1784, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1784, 1784,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1688, 1688, 1784,
     1784, 1784, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
     1688, 1784, 1784, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
     1691, 1691, 1784, 1784, 1784, 1691, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1691, 1784, 1784, 1691, 1691, 1691, 1691,
     1691, 1691, 1691, 1694, 1694, 1784, 1784, 1784, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1784, 1784, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1695, 1695, 1784, 1784,

     1784, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695,
     1784, 1784, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1701,
     1701, 1784, 1784, 1784, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1784, 1784, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1703, 1703, 1784, 1784, 1784, 1703, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1784, 1784, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1706, 1706, 1784, 1784, 1784,
     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1784,
     1784, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1709, 1709,
     1784, 1784, 1784, 1709, 1709, 1709, 1709, 1709, 1709, 1709,

     1709, 1709, 1784, 1784, 1709, 1709, 1709, 1709, 1709, 1709,
     1709, 1710, 1710, 1784, 1784, 1784, 1710, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1710, 1784, 1784, 1710, 1710, 1710,
     1710, 1710, 1710, 1710, 1715, 1715, 1784, 1784, 1784, 1715,
     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1784, 1784,
     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1718, 1718, 1784,
     1784, 1784, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1718, 1784, 1784, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
     1719, 1719, 1784, 1784, 1784, 1719, 1719, 1719, 1719, 1719,
     1719, 1719, 1719, 1719, 1784, 1784, 1719, 1719, 1719, 1719,

     1719, 1719, 1719, 1722, 1722, 1784, 1784, 1784, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1784, 1784, 1722,
     1722, 1722, 1722, 1722, 1722, 1722, 1724, 1724, 1784, 1784,
     1784, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
     1784, 1784, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1726,
     1726, 1784, 1784, 1784, 1726, 1726, 1726, 1726, 1726, 1726,
     1726, 1726, 1726, 1784, 1784, 1726, 1726, 1726, 1726, 1726,
     1726, 1726, 1731, 1731, 1784, 1784, 1784, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1731, 1731, 1784, 1784, 1731, 1731,
     1731, 1731, 1731, 1731, 1731, 1732, 1732, 1784, 1784, 1784,

     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1784,
     1784, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1733, 1733,
     1784, 1784, 1784, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1784, 1784, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1735, 1735, 1784, 1784, 1784, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1784, 1784, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1738, 1738, 1784, 1784, 1784, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1784, 1784,
     1738, 1738, 1738, 1738, 1738, 1738, 1738,    8,    8,    8,
        8,   74,   74, 1784,   74,   75,   75,   75,   75,  209,

     1784,  209,  209,  211,  211,  211,  211,    7, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784
    } ;

static yyconst flex_int16_t yy_chk[8262] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    9,    9,    3,    3,    3,
        3,    3,    3,    3,    3,  874,    3,   22,   22,    3,
        3,    3,    3,    3,    3,    3,    4,    4,   25,   25,
        4,    4,    4,    4,    4,    4,    4,    4,  875,    4,
       55,   55,    4,    4,    4,    4,    4,    4,    4,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   19,  876,   37,   19,   19,
       30,   30,   30,   67,   67,   73,   73,   87,   39,   31,
       30,   37,   30,   31,   39,   87,   30,   30,   30,   30,
       30,   32,   31,   33,  877,   32,   36,   33,   32,   31,
      100,   33,   32,   36,  100,   32,   36,   33,   32,   36,
       33,   32,   34,   34,   78,   78,  878,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   79,   79,   34,   34,
       34,   34,   34,   34,   34,   38,   86,   38,   38,   86,

       98,   98,   88,  879,   38,   38,   99,   34,   51,   34,
       38,   99,   51,   41,   34,   41,   51,   41,  108,   34,
       35,   41,   42,   88,   35,  144,  108,   41,   35,  144,
       42,   35,   41,   35,   35,   50,   42,   35,  123,   43,
       35,   43,   42,   43,  123,  146,   50,  105,   50,   95,
       47,   50,  105,   43,   47,  146,   95,  880,   47,   43,
       44,   44,   95,   44,   47,   47,   45,  138,  126,   47,
       45,   44,  138,   44,   45,   44,  881,   45,   44,   44,
       45,   52,  126,   45,   52,   52,   45,   48,  148,   48,
      175,   52,   48,   48,   52,  148,  107,   48,  107,   48,

      175,   48,  283,   49,   48,   48,  114,   49,  114,   48,
       49,   49,  114,  107,  107,  120,  283,   49,  120,  114,
       49,   90,   90,  114,  152,  152,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   94,   94,   90,   90,   90,
       90,   90,   90,   90,  157,  141,  140,   90,  141,   94,
      106,  181,  106,   90,  140,  106,  145,  181,  168,  157,
      884,  106,  140,   90,   91,   91,  168,  145,  106,   91,
       91,   91,   91,   91,   91,   91,   91,   91,  887,  185,
       91,   91,   91,   91,   91,   91,   91,  195,   91,   97,
       97,  185,  161,  195,   97,   97,   97,   97,   97,   97,

       97,   97,   97,  161,  161,   97,   97,   97,   97,   97,
       97,   97,  102,  102,  192,  142,  192,  166,  258,  142,
      371,  166,  258,  102,  102,  102,  142,  166,  371,  102,
      102,  102,  102,  119,  119,  142,  172,  183,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  172,  183,  119,
      119,  119,  119,  119,  119,  119,  125,  125,  204,  204,
      888,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      151,  190,  125,  125,  125,  125,  125,  125,  125,  176,
      151,  691,  193,  178,  210,  210,  151,  691,  176,  151,
      178,  190,  250,  176,  193,  250,  176,  213,  213,  125,

      133,  133,  178,  214,  214,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      134,  134,  279,  355,  889,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  355,  279,  134,  134,  134,  134,
      134,  134,  134,  194,  240,  230,  240,  194,  249,  262,
      304,  194,  230,  262,  304,  366,  366,  249,  134,  155,
      155,  240,  890,  382,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  382,  268,  155,  155,  155,  155,  155,
      155,  155,  409,  365,  409,  365,  373,  268,  155,  156,
      156,  268,  365,  373,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  251,  893,  156,  156,  156,  156,  156,
      156,  156,  407,  257,  251,  405,  405,  417,  417,  251,
      251,  407,  251,  398,  156,  158,  158,  257,  257,  257,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  398,
      417,  158,  158,  158,  158,  158,  158,  158,  894,  423,
      895,  421,  158,  163,  163,  421,  423,  548,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  364,  548,  163,

      163,  163,  163,  163,  163,  163,  170,  549,  549,  562,
      364,  170,  427,  364,  427,  427,  427,  562,  546,  571,
      571,  170,  546,  897,  170,  685,  685,  170,  189,  189,
      686,  686,  900,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  642,  741,  189,  189,  189,  189,  189,  189,
      189,  189,  215,  215,  901,  741,  642,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  742,  902,  215,  215,
      215,  215,  215,  215,  215,  903,  742,  801,  742,  906,
      801,  896,  896,  904,  909,  910,  911,  917,  918,  919,
      215,  217,  217,  920,  904,  924,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  927,  929,  217,  217,  217,
      217,  217,  217,  217,  218,  218,  931,  932,  932,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  933,  934,
      218,  218,  218,  218,  218,  218,  218,  218,  219,  219,
      935,  936,  937,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  938,  939,  219,  219,  219,  219,  219,  219,
      219,  940,  943,  945,  946,  949,  952,  954,  955,  956,
      958,  959,  962,  967,  969,  964,  219,  221,  221,  964,
      970,  971,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  972,  973,  221,  221,  221,  221,  221,  221,  221,

      222,  222,  976,  977,  979,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  980,  981,  222,  222,  222,  222,
      222,  222,  222,  223,  223,  982,  983,  984,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  985,  986,  223,
      223,  223,  223,  223,  223,  223,  225,  225,  987,  988,
      989,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      990,  993,  225,  225,  225,  225,  225,  225,  225,  991,
      994,  995,  996,  991,  997,  993,  998,  999,  225,  231,
      231, 1002, 1005, 1007,  231,  231,  231,  231,  231,  231,
      231,  231,  231, 1008, 1014,  231,  231,  231,  231,  231,

      231,  231,  237,  237, 1015, 1017, 1022,  237,  237,  237,
      237,  237,  237,  237,  237,  237, 1023, 1026,  237,  237,
      237,  237,  237,  237,  237,  237,  253,  253, 1027, 1029,
     1030,  253,  253,  253,  253,  253,  253,  253,  253,  253,
     1033, 1035,  253,  253,  253,  253,  253,  253,  253,  254,
      254, 1036, 1037, 1038,  254,  254,  254,  254,  254,  254,
      254,  254,  254, 1039, 1040,  254,  254,  254,  254,  254,
      254,  254,  259,  259, 1044, 1050, 1056,  259,  259,  259,
      259,  259,  259,  259,  259,  259, 1059, 1063,  259,  259,
      259,  259,  259,  259,  259, 1064,  433, 1069, 1070, 1072,

      433, 1073, 1074, 1075, 1076,  433, 1077, 1079, 1080, 1081,
      259,  433, 1083, 1084,  259,  261,  261,  433, 1085, 1087,
      261,  261,  261,  261,  261,  261,  261,  261,  261, 1088,
     1091,  261,  261,  261,  261,  261,  261,  261, 1094, 1098,
     1100, 1101, 1103, 1104, 1105, 1106, 1108,  261, 1109, 1112,
      261,  273,  273, 1113, 1114, 1115,  273,  273,  273,  273,
      273,  273,  273,  273,  273, 1116, 1117,  273,  273,  273,
      273,  273,  273,  273,  273,  278,  278, 1118, 1119, 1123,
      278,  278,  278,  278,  278,  278,  278,  278,  278, 1130,
     1131,  278,  278,  278,  278,  278,  278,  278,  285,  285,

     1132, 1134, 1136,  285,  285,  285,  285,  285,  285,  285,
      285,  285, 1137, 1138,  285,  285,  285,  285,  285,  285,
      285, 1139, 1140, 1141, 1140, 1142,  285, 1143, 1144, 1145,
     1146, 1147, 1148, 1149, 1150, 1151, 1156, 1161, 1162, 1163,
     1165,  285,  290,  290, 1171, 1172, 1174,  290,  290,  290,
      290,  290,  290,  290,  290,  290, 1180, 1181,  290,  290,
      290,  290,  290,  290,  290,  309,  309, 1182, 1183, 1184,
      309,  309,  309,  309,  309,  309,  309,  309,  309, 1185,
     1186,  309,  309,  309,  309,  309,  309,  309, 1187, 1191,
     1192, 1194, 1195,  309, 1196, 1197, 1198, 1199, 1200, 1201,

     1204, 1207, 1210,  309,  314,  314, 1214, 1217, 1218,  314,
      314,  314,  314,  314,  314,  314,  314,  314, 1221, 1223,
      314,  314,  314,  314,  314,  314,  314,  324,  324, 1224,
     1225, 1228,  324,  324,  324,  324,  324,  324,  324,  324,
      324, 1229, 1230,  324,  324,  324,  324,  324,  324,  324,
      329,  329, 1232, 1234, 1236,  329,  329,  329,  329,  329,
      329,  329,  329,  329, 1238, 1241,  329,  329,  329,  329,
      329,  329,  329,  331,  331, 1242, 1245, 1248,  331,  331,
      331,  331,  331,  331,  331,  331,  331, 1251, 1252,  331,
      331,  331,  331,  331,  331,  331, 1253, 1255, 1257, 1258,

     1262, 1263, 1266, 1268, 1270, 1273, 1275, 1278, 1280, 1281,
     1282, 1283, 1286, 1287, 1288, 1291, 1292,  331,  332,  332,
     1293, 1298, 1302,  332,  332,  332,  332,  332,  332,  332,
      332,  332, 1303, 1304,  332,  332,  332,  332,  332,  332,
      332, 1306, 1307, 1307, 1310, 1311, 1312, 1313, 1314, 1316,
      332, 1317, 1318, 1320, 1325, 1326, 1329, 1332, 1333, 1336,
     1342, 1339,  332,  341,  341, 1343, 1344, 1345,  341,  341,
      341,  341,  341,  341,  341,  341,  341, 1339, 1346,  341,
      341,  341,  341,  341,  341,  341,  342,  342, 1347, 1348,
     1352,  342,  342,  342,  342,  342,  342,  342,  342,  342,

     1355, 1356,  342,  342,  342,  342,  342,  342,  342,  348,
      348, 1357, 1358, 1359,  348,  348,  348,  348,  348,  348,
      348,  348,  348, 1360, 1363,  348,  348,  348,  348,  348,
      348,  348,  362,  362, 1369, 1370, 1372,  362,  362,  362,
      362,  362,  362,  362,  362,  362, 1374, 1375,  362,  362,
      362,  362,  362,  362,  362,  386,  386, 1376, 1378, 1380,
      386,  386,  386,  386,  386,  386,  386,  386,  386, 1383,
     1384,  386,  386,  386,  386,  386,  386,  386, 1385, 1386,
     1389, 1392, 1394, 1398, 1399, 1402, 1403, 1407, 1408, 1415,
     1416, 1418, 1419,  386,  389,  389, 1420, 1421, 1424,  389,

      389,  389,  389,  389,  389,  389,  389,  389, 1428, 1432,
      389,  389,  389,  389,  389,  389,  389,  393,  393, 1433,
     1435, 1440,  393,  393,  393,  393,  393,  393,  393,  393,
      393, 1436, 1436,  393,  393,  393,  393,  393,  393,  393,
     1425, 1441, 1442,  393, 1425,  393, 1446, 1447, 1448, 1450,
     1454, 1455, 1457, 1458, 1459, 1461, 1462, 1463, 1466,  393,
     1467, 1468, 1471,  393,  397,  397, 1472, 1473, 1475,  397,
      397,  397,  397,  397,  397,  397,  397,  397, 1476, 1481,
      397,  397,  397,  397,  397,  397,  397,  400,  400, 1482,
     1487, 1492,  400,  400,  400,  400,  400,  400,  400,  400,

      400, 1494, 1495,  400,  400,  400,  400,  400,  400,  400,
      430,  430, 1497, 1499, 1503,  430,  430,  430,  430,  430,
      430,  430,  430,  430, 1506, 1509,  430,  430,  430,  430,
      430,  430,  430,  442,  442, 1510, 1515, 1517,  442,  442,
      442,  442,  442,  442,  442,  442,  442, 1521, 1523,  442,
      442,  442,  442,  442,  442,  442,  444,  444, 1527, 1528,
     1529,  444,  444,  444,  444,  444,  444,  444,  444,  444,
     1532,  444,  444,  444,  444,  444,  444,  444,  444,  457,
      457, 1534, 1537, 1538,  457,  457,  457,  457,  457,  457,
      457,  457,  457, 1540, 1542,  457,  457,  457,  457,  457,

      457,  457,  458,  458, 1546, 1547, 1548,  458,  458,  458,
      458,  458,  458,  458,  458,  458, 1549, 1550,  458,  458,
      458,  458,  458,  458,  458,  462,  462, 1554, 1558, 1562,
      462,  462,  462,  462,  462,  462,  462,  462,  462, 1564,
     1565,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      486,  486, 1569, 1571, 1575,  486,  486,  486,  486,  486,
      486,  486,  486,  486, 1576, 1577,  486,  486,  486,  486,
      486,  486,  486,  486,  497,  497, 1584, 1585, 1588,  497,
      497,  497,  497,  497,  497,  497,  497,  497, 1591, 1592,
      497,  497,  497,  497,  497,  497,  497, 1520, 1593, 1595,

     1597, 1598, 1520, 1599, 1603, 1604, 1607, 1611, 1612, 1613,
     1615, 1617, 1624, 1625, 1626,  497,  506,  506, 1628, 1630,
     1631,  506,  506,  506,  506,  506,  506,  506,  506,  506,
     1632, 1636,  506,  506,  506,  506,  506,  506,  506,  507,
      507, 1637, 1639, 1640,  507,  507,  507,  507,  507,  507,
      507,  507,  507, 1641, 1644,  507,  507,  507,  507,  507,
      507,  507,  512,  512, 1645, 1646, 1649,  512,  512,  512,
      512,  512,  512,  512,  512,  512, 1650, 1652,  512,  512,
      512,  512,  512,  512,  512, 1654, 1658, 1662, 1663, 1666,
     1667, 1670, 1671, 1672, 1673, 1676, 1678, 1680, 1681, 1685,

     1686, 1692, 1693, 1696, 1697, 1699,  512,  526,  526, 1700,
     1705, 1707,  526,  526,  526,  526,  526,  526,  526,  526,
      526, 1711, 1713,  526,  526,  526,  526,  526,  526,  526,
      527,  527, 1716, 1717, 1720,  527,  527,  527,  527,  527,
      527,  527,  527,  527, 1721, 1728,  527,  527,  527,  527,
      527,  527,  527,  531,  531, 1730, 1734, 1737,  531,  531,
      531,  531,  531,  531,  531,  531,  531, 1739, 1740,  531,
      531,  531,  531,  531,  531,  531,  535,  535, 1741, 1742,
     1743,  535,  535,  535,  535,  535,  535,  535,  535,  535,
     1744, 1745,  535,  535,  535,  535,  535,  535,  535, 1746,

     1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
     1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,  535,  551,
      551, 1765, 1766, 1767,  551,  551,  551,  551,  551,  551,
      551,  551,  551, 1768, 1769,  551,  551,  551,  551,  551,
      551,  551,  555,  555, 1770, 1771, 1772,  555,  555,  555,
      555,  555,  555,  555,  555,  555, 1773, 1774,  555,  555,
      555,  555,  555,  555,  555,  557,  557, 1775, 1776, 1777,
      557,  557,  557,  557,  557,  557,  557,  557,  557, 1778,
     1779,  557,  557,  557,  557,  557,  557,  557,  560,  560,
     1780, 1781, 1782,  560,  560,  560,  560,  560,  560,  560,

      560,  560, 1788, 1789,  560,  560,  560,  560,  560,  560,
      560,  564,  564,  870,  868,  867,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  866,  865,  564,  564,  564,
      564,  564,  564,  564,  580,  580,  864,  862,  859,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  858,  857,
      580,  580,  580,  580,  580,  580,  580,  582,  582,  856,
      855,  853,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  852,  851,  582,  582,  582,  582,  582,  582,  582,
      585,  585,  850,  849,  848,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  847,  846,  585,  585,  585,  585,

      585,  585,  585,  844,  843,  840,  836,  835,  834,  828,
      824,  823,  585,  588,  588,  822,  820,  815,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  813,  810,  588,
      588,  588,  588,  588,  588,  588,  590,  590,  806,  805,
      803,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      800,  799,  590,  590,  590,  590,  590,  590,  590,  591,
      591,  798,  795,  794,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  792,  791,  591,  591,  591,  591,  591,
      591,  591,  597,  597,  790,  789,  788,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  787,  785,  597,  597,

      597,  597,  597,  597,  597,  613,  613,  781,  780,  776,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  775,
      769,  613,  613,  613,  613,  613,  613,  613,  614,  614,
      768,  767,  766,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  764,  763,  614,  614,  614,  614,  614,  614,
      614,  616,  616,  762,  759,  758,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  757,  756,  616,  616,  616,
      616,  616,  616,  616,  624,  624,  755,  754,  753,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  752,  751,
      624,  624,  624,  624,  624,  624,  624,  625,  625,  749,

      748,  747,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  746,  745,  625,  625,  625,  625,  625,  625,  625,
      636,  636,  744,  743,  739,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  738,  737,  636,  636,  636,  636,
      636,  636,  636,  638,  638,  736,  735,  734,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  732,  731,  638,
      638,  638,  638,  638,  638,  638,  640,  640,  730,  729,
      728,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      727,  726,  640,  640,  640,  640,  640,  640,  640,  646,
      646,  725,  724,  723,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  721,  718,  646,  646,  646,  646,  646,
      646,  646,  655,  655,  717,  715,  714,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  713,  710,  655,  655,
      655,  655,  655,  655,  655,  656,  656,  708,  707,  706,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  705,
      703,  656,  656,  656,  656,  656,  656,  656,  702,  701,
      698,  694,  693,  692,  690,  689,  687,  683,  681,  679,
      675,  674,  673,  672,  671,  670,  668,  656,  667,  666,
      665,  664,  663,  662,  656,  660,  660,  661,  659,  658,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  657,

      654,  660,  660,  660,  660,  660,  660,  660,  669,  669,
      652,  651,  650,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  648,  647,  669,  669,  669,  669,  669,  669,
      669,  676,  676,  645,  644,  643,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  639,  635,  676,  676,  676,
      676,  676,  676,  676,  677,  677,  634,  632,  631,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  630,  629,
      677,  677,  677,  677,  677,  677,  677,  678,  678,  628,
      627,  626,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  623,  622,  678,  678,  678,  678,  678,  678,  678,

      621,  620,  619,  618,  617,  678,  680,  680,  615,  612,
      611,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      610,  609,  680,  680,  680,  680,  680,  680,  680,  682,
      682,  608,  607,  606,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  605,  604,  682,  682,  682,  682,  682,
      682,  682,  684,  684,  603,  602,  600,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  599,  598,  684,  684,
      684,  684,  684,  684,  684,  596,  595,  594,  593,  592,
      587,  586,  581,  579,  578,  577,  576,  575,  574,  573,
      569,  567,  566,  565,  684,  695,  695,  561,  559,  558,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  556,
      554,  695,  695,  695,  695,  695,  695,  695,  696,  696,
      552,  550,  545,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  544,  543,  696,  696,  696,  696,  696,  696,
      696,  700,  700,  542,  541,  540,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  539,  538,  700,  700,  700,
      700,  700,  700,  700,  704,  704,  537,  536,  534,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  533,  532,
      704,  704,  704,  704,  704,  704,  704,  709,  709,  530,
      528,  525,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  524,  523,  709,  709,  709,  709,  709,  709,  709,
      719,  719,  521,  520,  519,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  518,  517,  719,  719,  719,  719,
      719,  719,  719,  720,  720,  516,  515,  513,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  511,  510,  720,
      720,  720,  720,  720,  720,  720,  722,  722,  509,  505,
      504,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      503,  502,  722,  722,  722,  722,  722,  722,  722,  733,
      733,  501,  500,  499,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  498,  496,  733,  733,  733,  733,  733,

      733,  733,  770,  770,  495,  494,  493,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  492,  490,  770,  770,
      770,  770,  770,  770,  770,  771,  771,  489,  488,  485,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  484,
      483,  771,  771,  771,  771,  771,  771,  771,  772,  772,
      482,  481,  480,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  479,  476,  772,  772,  772,  772,  772,  772,
      772,  773,  773,  475,  474,  473,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  472,  471,  773,  773,  773,
      773,  773,  773,  773,  774,  774,  470,  469,  468,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  467,  466,
      774,  774,  774,  774,  774,  774,  774,  777,  777,  465,
      464,  463,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  461,  460,  777,  777,  777,  777,  777,  777,  777,
      783,  783,  459,  456,  455,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  454,  452,  783,  783,  783,  783,
      783,  783,  783,  784,  784,  451,  450,  449,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  448,  446,  784,
      784,  784,  784,  784,  784,  784,  793,  793,  445,  443,
      441,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      436,  435,  793,  793,  793,  793,  793,  793,  793,  796,
      796,  429,  425,  424,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  422,  420,  796,  796,  796,  796,  796,
      796,  796,  797,  797,  419,  418,  416,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  415,  414,  797,  797,
      797,  797,  797,  797,  797,  808,  808,  413,  412,  411,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  410,
      408,  808,  808,  808,  808,  808,  808,  808,  811,  811,
      406,  403,  402,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  401,  399,  811,  811,  811,  811,  811,  811,

      811,  814,  814,  396,  395,  394,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  392,  391,  814,  814,  814,
      814,  814,  814,  814,  817,  817,  390,  388,  387,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  385,  384,
      817,  817,  817,  817,  817,  817,  817,  818,  818,  383,
      381,  380,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  379,  378,  818,  818,  818,  818,  818,  818,  818,
      819,  819,  377,  376,  375,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  374,  372,  819,  819,  819,  819,
      819,  819,  819,  821,  821,  370,  369,  368,  821,  821,

      821,  821,  821,  821,  821,  821,  821,  367,  363,  821,
      821,  821,  821,  821,  821,  821,  825,  825,  360,  359,
      358,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      357,  356,  825,  825,  825,  825,  825,  825,  825,  354,
      352,  351,  350,  346,  345,  344,  343,  340,  339,  338,
      337,  336,  335,  334,  333,  330,  328,  327,  825,  826,
      826,  326,  325,  323,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  322,  321,  826,  826,  826,  826,  826,
      826,  826,  827,  827,  320,  319,  318,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  317,  316,  827,  827,

      827,  827,  827,  827,  827,  829,  829,  315,  313,  312,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  311,
      308,  829,  829,  829,  829,  829,  829,  829,  831,  831,
      307,  306,  305,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  303,  301,  831,  831,  831,  831,  831,  831,
      831,  841,  841,  300,  299,  298,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  297,  296,  841,  841,  841,
      841,  841,  841,  841,  842,  842,  295,  294,  293,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  291,  289,
      842,  842,  842,  842,  842,  842,  842,  854,  854,  288,

      287,  286,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  282,  281,  854,  854,  854,  854,  854,  854,  854,
      869,  869,  280,  277,  276,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  275,  274,  869,  869,  869,  869,
      869,  869,  869,  873,  873,  272,  271,  270,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  269,  267,  873,
      873,  873,  873,  873,  873,  873,  886,  886,  266,  265,
      264,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      263,  260,  886,  886,  886,  886,  886,  886,  886,  892,
      892,  256,  255,  252,  892,  892,  892,  892,  892,  892,

      892,  892,  892,  248,  247,  892,  892,  892,  892,  892,
      892,  892,  907,  907,  246,  245,  244,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  243,  242,  907,  907,
      907,  907,  907,  907,  907,  908,  908,  241,  238,  236,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  235,
      234,  908,  908,  908,  908,  908,  908,  908,  912,  912,
      233,  232,  229,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  227,  226,  912,  912,  912,  912,  912,  912,
      912,  913,  913,  220,  216,  211,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  209,  203,  913,  913,  913,

      913,  913,  913,  913,  915,  915,  202,  201,  200,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  199,  198,
      915,  915,  915,  915,  915,  915,  915,  916,  916,  197,
      196,  191,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  188,  187,  916,  916,  916,  916,  916,  916,  916,
      186,  184,  182,  180,  179,  177,  174,  173,  171,  169,
      167,  165,  164,  162,  160,  159,  154,  153,  150,  916,
      925,  925,  149,  147,  143,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  139,  137,  925,  925,  925,  925,
      925,  925,  925,  136,  135,  132,  131,  130,  129,  128,

      127,  124,  122,  121,  118,  117,  116,  115,  113,  112,
      111,  109,  104,  103,  101,   96,   93,   92,   89,   85,
      925,  947,  947,   84,   77,   75,  947,  947,  947,  947,
      947,  947,  947,  947,  947,   74,   69,  947,  947,  947,
      947,  947,  947,  947,  950,  950,   54,   46,   40,  950,
      950,  950,  950,  950,  950,  950,  950,  950,   27,   13,
      950,  950,  950,  950,  950,  950,  950,  951,  951,    7,
        0,    0,  951,  951,  951,  951,  951,  951,  951,  951,
      951,    0,    0,  951,  951,  951,  951,  951,  951,  951,
      957,  957,    0,    0,    0,  957,  957,  957,  957,  957,

      957,  957,  957,  957,    0,    0,  957,  957,  957,  957,
      957,  957,  957,  965,  965,    0,    0,    0,  965,  965,
      965,  965,  965,  965,  965,  965,  965,    0,    0,  965,
      965,  965,  965,  965,  965,  965,  966,  966,    0,    0,
        0,  966,  966,  966,  966,  966,  966,  966,  966,  966,
        0,    0,  966,  966,  966,  966,  966,  966,  966,  968,
      968,    0,    0,    0,  968,  968,  968,  968,  968,  968,
      968,  968,  968,    0,    0,  968,  968,  968,  968,  968,
      968,  968,  975,  975,    0,    0,    0,  975,  975,  975,
      975,  975,  975,  975,  975,  975,    0,    0,  975,  975,

      975,  975,  975,  975,  975,  978,  978,    0,    0,    0,
      978,  978,  978,  978,  978,  978,  978,  978,  978,    0,
        0,  978,  978,  978,  978,  978,  978,  978,  992,  992,
        0,    0,    0,  992,  992,  992,  992,  992,  992,  992,
      992,  992,    0,    0,  992,  992,  992,  992,  992,  992,
      992, 1000, 1000,    0,    0,    0, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,    0,    0, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1001, 1001,    0,    0,    0, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,    0,    0,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1003, 1003,    0,

        0,    0, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003,    0,    0, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1004, 1004,    0,    0,    0, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004,    0,    0, 1004, 1004, 1004, 1004,
     1004, 1004, 1004,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1004, 1006, 1006,    0,    0,    0, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006,    0,    0, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1018, 1018,    0,    0,
        0, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
        0,    0, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1021,

     1021,    0,    0,    0, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021,    0,    0, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1024, 1024,    0,    0,    0, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024,    0,    0, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1025, 1025,    0,    0,    0,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,    0,
        0, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1034, 1034,
        0,    0,    0, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034,    0,    0, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1042, 1042,    0,    0,    0, 1042, 1042, 1042, 1042,

     1042, 1042, 1042, 1042, 1042,    0,    0, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1046, 1046,    0,    0,    0, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,    0,    0,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1052, 1052,    0,
        0,    0, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052,    0,    0, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1052,
     1053, 1053,    0,    0,    0, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053,    0,    0, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1054, 1054,    0,    0,    0, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054,    0,    0, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1062, 1062,    0,    0,
        0, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
        0,    0, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1065,
     1065,    0,    0,    0, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065,    0,    0, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1068, 1068,    0,    0,    0, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068,    0,    0, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1071, 1071,    0,    0,    0,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,    0,
        0, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1082, 1082,
        0,    0,    0, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082,    0,    0, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1086, 1086,    0,    0,    0, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086,    0,    0, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1089, 1089,    0,    0,    0, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,    0,    0,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1093, 1093,    0,
        0,    0, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,

     1093,    0,    0, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1095, 1095,    0,    0,    0, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095,    0,    0, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1096, 1096,    0,    0,    0, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096,    0,    0, 1096,
     1096, 1096, 1096, 1096, 1096, 1096,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1096, 1097, 1097,    0,    0,
        0, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
        0,    0, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1099,

     1099,    0,    0,    0, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099,    0,    0, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1110, 1110,    0,    0,    0, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110,    0,    0, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1122, 1122,    0,    0,    0,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,    0,
        0, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1124, 1124,
        0,    0,    0, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124,    0,    0, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1129, 1129,    0,    0,    0, 1129, 1129, 1129, 1129,

     1129, 1129, 1129, 1129, 1129,    0,    0, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1133, 1133,    0,    0,    0, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,    0,    0,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1153, 1153,    0,
        0,    0, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153,    0,    0, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1157, 1157,    0,    0,    0, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157,    0,    0, 1157, 1157, 1157, 1157,
     1157, 1157, 1157,    0,    0,    0,    0, 1157, 1158, 1158,
        0,    0,    0, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158,    0,    0, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1159, 1159,    0,    0,    0, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159,    0,    0, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1164, 1164,    0,    0,    0, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,    0,    0,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1168, 1168,    0,
        0,    0, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168,    0,    0, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1170, 1170,    0,    0,    0, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170,    0,    0, 1170, 1170, 1170, 1170,

     1170, 1170, 1170,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1170, 1173, 1173,    0,    0,    0, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173,    0,    0, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1176, 1176,    0,    0,
        0, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
        0,    0, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1177,
     1177,    0,    0,    0, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177,    0,    0, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1179, 1179,    0,    0,    0, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179,    0,    0, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1188, 1188,    0,    0,
        0, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
        0,    0, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1189,
     1189,    0,    0,    0, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189,    0,    0, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1190, 1190,    0,    0,    0, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190,    0,    0, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1208, 1208,    0,    0,    0,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,    0,
        0, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1211, 1211,

        0,    0,    0, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211,    0,    0, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1212, 1212,    0,    0,    0, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212,    0,    0, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1213, 1213,    0,    0,    0, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,    0,    0,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1222, 1222,    0,
        0,    0, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222,    0,    0, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1227, 1227,    0,    0,    0, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1227, 1227,    0,    0, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1231, 1231,    0,    0,    0, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231,    0,    0, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1244, 1244,    0,    0,
        0, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
        0,    0, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1249,
     1249,    0,    0,    0, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249,    0,    0, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1254, 1254,    0,    0,    0, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254,    0,    0, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1256, 1256,    0,    0,    0,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,    0,
        0, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1259, 1259,
        0,    0,    0, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259,    0,    0, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1261, 1261,    0,    0,    0, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261,    0,    0, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1265, 1265,    0,    0,    0, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,    0,    0,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1277, 1277,    0,

        0,    0, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277,    0,    0, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1279, 1279,    0,    0,    0, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279,    0,    0, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1284, 1284,    0,    0,    0, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284,    0,    0, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1289, 1289,    0,
        0,    0, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289,    0,    0, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1290, 1290,    0,    0,    0, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290,    0,    0, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1295, 1295,    0,    0,    0, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295,    0,    0, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1299, 1299,    0,    0,
        0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
        0,    0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1300,
     1300,    0,    0,    0, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300,    0,    0, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1305, 1305,    0,    0,    0, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305,    0,    0, 1305, 1305,

     1305, 1305, 1305, 1305, 1305, 1308, 1308,    0,    0,    0,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,    0,
        0, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1309, 1309,
        0,    0,    0, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309,    0,    0, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1315, 1315,    0,    0,    0, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315,    0,    0, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1322, 1322,    0,    0,    0, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,    0,    0,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1327, 1327,    0,

        0,    0, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327,    0,    0, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1334, 1334,    0,    0,    0, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334,    0,    0, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1341, 1341,    0,    0,    0, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341,    0,    0, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1353, 1353,    0,    0,
        0, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
        0,    0, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354,
     1354,    0,    0,    0, 1354, 1354, 1354, 1354, 1354, 1354,

     1354, 1354, 1354,    0,    0, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1361, 1361,    0,    0,    0, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361,    0,    0, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1362, 1362,    0,    0,    0,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,    0,
        0, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1365, 1365,
        0,    0,    0, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365,    0,    0, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1371, 1371,    0,    0,    0, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371,    0,    0, 1371, 1371, 1371,

     1371, 1371, 1371, 1371, 1379, 1379,    0,    0,    0, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,    0,    0,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1382, 1382,    0,
        0,    0, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382,    0,    0, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1387, 1387,    0,    0,    0, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387,    0,    0, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1390, 1390,    0,    0,    0, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390,    0,    0, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1393, 1393,    0,    0,

        0, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
        0,    0, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1396,
     1396,    0,    0,    0, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396,    0,    0, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1405, 1405,    0,    0,    0, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405,    0,    0, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1406, 1406,    0,    0,    0,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,    0,
        0, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1409, 1409,
        0,    0,    0, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409,    0,    0, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1411, 1411,    0,    0,    0, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411,    0,    0, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1413, 1413,    0,    0,    0, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,    0,    0,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1414, 1414,    0,
        0,    0, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414,    0,    0, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1426, 1426,    0,    0,    0, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426,    0,    0, 1426, 1426, 1426, 1426,

     1426, 1426, 1426, 1431, 1431,    0,    0,    0, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431,    0,    0, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1439, 1439,    0,    0,
        0, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
        0,    0, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1443,
     1443,    0,    0,    0, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443,    0,    0, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1445, 1445,    0,    0,    0, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445,    0,    0, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1451, 1451,    0,    0,    0,

     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,    0,
        0, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1453,
     1453,    0,    0,    0, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453,    0,    0, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1464, 1464,    0,    0,    0, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464,    0,    0, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1465, 1465,    0,    0,    0,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,    0,
        0, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1474, 1474,
        0,    0,    0, 1474, 1474, 1474, 1474, 1474, 1474, 1474,

     1474, 1474,    0,    0, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1479, 1479,    0,    0,    0, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479,    0,    0, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1484, 1484,    0,    0,    0, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,    0,    0,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485, 1485,    0,
        0,    0, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485,    0,    0, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1486, 1486,    0,    0,    0, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486,    0,    0, 1486, 1486, 1486, 1486,

     1486, 1486, 1486, 1488, 1488,    0,    0,    0, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488,    0,    0, 1488,
     1488, 1488, 1488, 1488, 1488, 1488,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1488, 1490, 1490,    0,    0,
        0, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
        0,    0, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1493,
     1493,    0,    0,    0, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493,    0,    0, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1501, 1501,    0,    0,    0, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501,    0,    0, 1501, 1501,

     1501, 1501, 1501, 1501, 1501, 1504, 1504,    0,    0,    0,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,    0,
        0, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505,
        0,    0,    0, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505,    0,    0, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1516, 1516,    0,    0,    0, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516,    0,    0, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1518, 1518,    0,    0,    0, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,    0,    0,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1519, 1519,    0,

        0,    0, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519,    0,    0, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1522, 1522,    0,    0,    0, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522,    0,    0, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1525, 1525,    0,    0,    0, 1525, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1525,    0,    0, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1533, 1533,    0,    0,
        0, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
        0,    0, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1539,
     1539,    0,    0,    0, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539,    0,    0, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1544, 1544,    0,    0,    0, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544,    0,    0, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1545, 1545,    0,    0,    0,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545,    0,
        0, 1545, 1545, 1545, 1545, 1545, 1545, 1545,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1545, 1551, 1551,
        0,    0,    0, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551,    0,    0, 1551, 1551, 1551, 1551, 1551, 1551,

     1551, 1555, 1555,    0,    0,    0, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555,    0,    0, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1556, 1556,    0,    0,    0, 1556,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,    0,    0,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1557, 1557,    0,
        0,    0, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557,    0,    0, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1559, 1559,    0,    0,    0, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1559,    0,    0, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1561, 1561,    0,    0,    0, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561,    0,    0, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1573, 1573,    0,    0,
        0, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
        0,    0, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1578,
     1578,    0,    0,    0, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578,    0,    0, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1580, 1580,    0,    0,    0, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580,    0,    0, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1583, 1583,    0,    0,    0,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,    0,

        0, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1586, 1586,
        0,    0,    0, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586,    0,    0, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1600, 1600,    0,    0,    0, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600,    0,    0, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1602, 1602,    0,    0,    0, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,    0,    0,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1606, 1606,    0,
        0,    0, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606,    0,    0, 1606, 1606, 1606, 1606, 1606, 1606, 1606,

     1610, 1610,    0,    0,    0, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610,    0,    0, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1614, 1614,    0,    0,    0, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614,    0,    0, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1621, 1621,    0,    0,
        0, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
        0,    0, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1627,
     1627,    0,    0,    0, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627,    0,    0, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1642, 1642,    0,    0,    0, 1642, 1642, 1642,

     1642, 1642, 1642, 1642, 1642, 1642,    0,    0, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1643, 1643,    0,    0,    0,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,    0,
        0, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1655, 1655,
        0,    0,    0, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655,    0,    0, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1656, 1656,    0,    0,    0, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656,    0,    0, 1656, 1656, 1656,
     1656, 1656, 1656, 1656,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1656, 1659, 1659,    0,    0,    0, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,    0,    0,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1661, 1661,    0,
        0,    0, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661,    0,    0, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1665, 1665,    0,    0,    0, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665,    0,    0, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1668, 1668,    0,    0,    0, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668,    0,    0, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1669, 1669,    0,    0,

        0, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
        0,    0, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1677,
     1677,    0,    0,    0, 1677, 1677, 1677, 1677, 1677, 1677,
     1677, 1677, 1677,    0,    0, 1677, 1677, 1677, 1677, 1677,
     1677, 1677, 1679, 1679,    0,    0,    0, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679,    0,    0, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1682, 1682,    0,    0,    0,
     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,    0,
        0, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1689, 1689,
        0,    0,    0, 1689, 1689, 1689, 1689, 1689, 1689, 1689,

     1689, 1689,    0,    0, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1690, 1690,    0,    0,    0, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1690,    0,    0, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1698, 1698,    0,    0,    0, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,    0,    0,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1702, 1702,    0,
        0,    0, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1702,    0,    0, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1704, 1704,    0,    0,    0, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704,    0,    0, 1704, 1704, 1704, 1704,

     1704, 1704, 1704, 1708, 1708,    0,    0,    0, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708,    0,    0, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1712, 1712,    0,    0,
        0, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712,
        0,    0, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1714,
     1714,    0,    0,    0, 1714, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1714,    0,    0, 1714, 1714, 1714, 1714, 1714,
     1714, 1714, 1723, 1723,    0,    0,    0, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723,    0,    0, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1725, 1725,    0,    0,    0,

     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,    0,
        0, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1727, 1727,
        0,    0,    0, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727,    0,    0, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1729, 1729,    0,    0,    0, 1729, 1729, 1729, 1729,
     1729, 1729, 1729, 1729, 1729,    0,    0, 1729, 1729, 1729,
     1729, 1729, 1729, 1729, 1736, 1736,    0,    0,    0, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,    0,    0,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1785, 1785, 1785,
     1785, 1786, 1786,    0, 1786, 1787, 1787, 1787, 1787, 1790,

        0, 1790, 1790, 1791, 1791, 1791, 1791, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "sqlscanner.l"
#line 2 "sqlscanner.l"
#include "sqlparser.h"
#include "sqltypes.h"
#include <iostream>

#include <field.h>

using namespace std;
#line 13 "sqlscanner.l"


#line 2862 "lex.yy.c"

#define INITIAL 0
#define DelimOrSep 1
#define Name 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 21 "sqlscanner.l"

#line 3017 "lex.yy.c"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1785 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8208 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 22 "sqlscanner.l"
return AMPERSAND;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 23 "sqlscanner.l"
return SEMICOLON;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 24 "sqlscanner.l"
return ASTERISK;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 25 "sqlscanner.l"
return ARITHMETIC_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 26 "sqlscanner.l"
return ARITHMETIC_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 27 "sqlscanner.l"
return SLASH;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 28 "sqlscanner.l"
return LEFTPAREN;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 29 "sqlscanner.l"
return RIGHTPAREN;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 30 "sqlscanner.l"
return DOT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 31 "sqlscanner.l"
return DOLLAR_SIGN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 32 "sqlscanner.l"
return PERCENT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 34 "sqlscanner.l"
return EQUAL;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 35 "sqlscanner.l"
return NOT_EQUAL;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 36 "sqlscanner.l"
return LESS_THAN;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 37 "sqlscanner.l"
return LESS_OR_EQUAL;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 38 "sqlscanner.l"
return GREATER_THAN;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 39 "sqlscanner.l"
return GREATER_OR_EQUAL;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 42 "sqlscanner.l"
return SINGLE_QUOTE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 43 "sqlscanner.l"
return QUESTION_MARK;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 44 "sqlscanner.l"
return COLON;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 45 "sqlscanner.l"
return COMMA;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 46 "sqlscanner.l"
{
	yylval.integerValue = atoi(yytext);
	return SIGNED_INTEGER;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 50 "sqlscanner.l"
{
	yylval.integerValue = atoi(yytext);
	return UNSIGNED_INTEGER;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 54 "sqlscanner.l"
{
	char digitBuffer[ 10 ];
	digitBuffer[ 0 ] = yytext[ 0 ];
	digitBuffer[ 1 ] = yytext[ 1 ];
	digitBuffer[ 2 ] = yytext[ 2 ];
	digitBuffer[ 3 ] = yytext[ 3 ];
	digitBuffer[ 4 ] = 0;
//X 	sscanf( digitBuffer, "%hd", &yylval.date_.year );

	digitBuffer[ 0 ] = yytext[ 5 ];
	digitBuffer[ 1 ] = yytext[ 6 ];
	digitBuffer[ 2 ] = 0;
//X 	sscanf( digitBuffer, "%hu", &yylval.date_.month );

	digitBuffer[ 0 ] = yytext[ 8 ];
	digitBuffer[ 1 ] = yytext[ 9 ];
	digitBuffer[ 2 ] = 0;
//X 	sscanf( digitBuffer, "%hu", &yylval.date_.day );
	return DATE_VALUE;
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 74 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ABS;
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 79 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ABSOLUTE;
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 84 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ACOS;
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 89 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADA;
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 94 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD;
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 99 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_DAYS;
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 104 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_HOURS;
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 109 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_MINUTES;
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 114 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_MONTHS;
}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 119 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_SECONDS;
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 124 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_YEARS;
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 129 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.comparisonMod = SetComparisonConstants::MOD_ALL;
	return ALL;
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 135 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ALLOCATE;
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 140 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ALTER;
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 145 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.logicalOp = ParserConstants::LOP_AND;
	return AND;
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 151 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//X 	yylval.comparisonMod = SetComparisonConstants::MOD_ANY;
	return ANY;
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 157 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ARE;
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 162 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASCII;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 167 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASC;
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 172 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASIN;
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 177 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AS;
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 182 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASSERTION;
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 187 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ATAN2;
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 192 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ATAN;
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 197 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AT;
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 202 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AUTHORIZATION;
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 207 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AUTO_INCREMENT;
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 213 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.aggregate = ParserConstants::AGGREGATE_AVG;
	return AVG;
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 219 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BEFORE;
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 224 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_BEGIN;
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 229 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BETWEEN;
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 234 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::BigInteger;
	return SQL_TYPE;
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 240 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::BLOB;
	return SQL_TYPE;
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 246 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::ShortInteger;
	return SQL_TYPE;
}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 252 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BIT_LENGTH;
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 257 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BREAK;
}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 262 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BY;
}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 267 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASCADE;
}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 272 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASCADED;
}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 277 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASE;
}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 282 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CAST;
}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 287 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CATALOG;
}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 292 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CEILING;
}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 297 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CENTER;
}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 302 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Text;
	return SQL_TYPE;
}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 308 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHAR_LENGTH;
}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 313 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Text;
	return SQL_TYPE;
}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 319 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHAR_LENGTH;
}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 324 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHECK;
}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 329 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CLOSE;
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 334 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COALESCE;
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 339 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COBOL;
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 344 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLLATE;
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 349 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLLATION;
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 354 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLUMN;
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 359 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COMMIT;
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 364 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COMPUTE;
}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 369 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONCAT;
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 374 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONNECT;
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 379 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONNECTION;
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 384 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONSTRAINT;
}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 389 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONSTRAINTS;
}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 394 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONTINUE;
}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 399 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONVERT;
}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 404 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CORRESPONDING;
}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 409 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COS;
}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 414 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COT;
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 419 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COUNT;
}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 424 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CREATE;
}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 429 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURDATE;
}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 434 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_DATE;
}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 439 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_TIME;
}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 444 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_TIMESTAMP;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 449 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHERE_CURRENT_OF;
}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 454 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT;
}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 459 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURSOR;
}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 464 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURTIME;
}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 469 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATABASE;
}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 474 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Date;
	return SQL_TYPE;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 480 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATE_FORMAT;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 485 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATE_REMAINDER;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 490 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFMONTH;
}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 495 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFWEEK;
}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 500 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFYEAR;
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 505 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYS_BETWEEN;
}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 510 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAY;
}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 515 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEALLOCATE;
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 520 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEC;
}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 525 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEC;
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 530 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DECLARE;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 535 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFAULT;
}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 540 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFERRABLE;
}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 545 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFERRED;
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 550 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_DELETE;
}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 555 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESC;
}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 560 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESCRIBE;
}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 565 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESCRIPTOR;
}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 570 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DIAGNOSTICS;
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 575 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DICTIONARY;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 580 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DIRECTORY;
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 585 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISCONNECT;
}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 590 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISPLACEMENT;
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 595 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISTINCT;
}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 600 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DOMAIN_TOKEN;
}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 605 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_DOUBLE;
}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 610 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DROP;
}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 615 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ELSE;
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 620 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return END;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 625 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return END_EXEC;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 630 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ESCAPE;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 635 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXCEPT;
}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 640 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_EXCEPTION;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 645 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXEC;
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 650 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXECUTE;
}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 655 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXISTS;
}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 660 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXP;
}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 665 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXTERNAL;
}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 670 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXTRACT;
}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 675 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_FALSE;
}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 680 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FETCH;
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 685 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FIRST;
}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 690 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_FLOAT;
}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 695 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FLOOR;
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 700 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FN;
}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 705 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOR;
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 710 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOREIGN;
}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 715 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FORTRAN;
}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 720 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOUND;
}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 725 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FROM;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 730 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FULL;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 735 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GET;
}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 740 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GLOBAL;
}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 745 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GO;
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 750 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GOTO;
}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 755 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GRANT;
}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 760 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GROUP;
}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 765 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HAVING;
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 770 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HOUR;
}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 775 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HOURS_BETWEEN;
}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 780 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IDENTITY;
}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 785 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IFNULL;
}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 790 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_IGNORE;
}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 795 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IMMEDIATE;
}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 800 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_IN;
}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 805 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INCLUDE;
}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 810 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INDEX;
}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 815 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INDICATOR;
}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 820 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INITIALLY;
}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 825 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INNER;
}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 830 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INPUT;
}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 835 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INSENSITIVE;
}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 840 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INSERT;
}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 845 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Integer;
	return SQL_TYPE;
}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 851 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTEGER;
}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 856 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERSECT;
}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 861 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERSECT;
}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 866 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERVAL;
}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 871 "sqlscanner.l"
{
	BEGIN Name;
	return INTO;
}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 875 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IS;
}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 880 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ISOLATION;
}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 885 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return JOIN;
}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 890 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return JUSTIFY;
}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 895 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return KEY;
}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 900 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LANGUAGE;
}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 905 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LAST;
}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 910 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LCASE;
}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 915 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LEFT;
}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 920 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LENGTH;
}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 925 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LEVEL;
}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 930 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LIKE;
}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 935 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LINE_WIDTH;
}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 940 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOCAL;
}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 945 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOCATE;
}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 950 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOG;
}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 955 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Integer;
	return SQL_TYPE;
}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 961 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOWER;
}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 966 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LTRIM;
}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 971 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MATCH;
}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 976 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.aggregate = ParserConstants::AGGREGATE_MAX;
	return SQL_MAX;
}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 982 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MICROSOFT;
}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 987 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.aggregate = ParserConstants::AGGREGATE_MIN;
	return SQL_MIN;
}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 993 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUS;
}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 998 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUTE;
}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 1003 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUTES_BETWEEN;
}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 1008 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MODIFY;
}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 1013 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MOD;
}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 1018 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MODULE;
}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 1023 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MONTH;
}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 1028 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MONTHS_BETWEEN;
}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 1033 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MUMPS;
}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 1038 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NAMES;
}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 1043 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NATIONAL;
}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 1048 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NCHAR;
}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 1053 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NEXT;
}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 1058 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NODUP;
}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 1063 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NONE;
}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 1068 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NOT;
}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 1073 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NOW;
}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 1078 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_NULL;
}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 1083 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NULLIF;
}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 1088 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NUMERIC;
}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 1093 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OCTET_LENGTH;
}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 1098 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ODBC;
}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 1103 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OF;
}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 1108 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_OFF;
}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 1113 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ON;
}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 1118 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ONLY;
}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 1123 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OPEN;
}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 1128 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OPTION;
}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 1133 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.logicalOp = ParserConstants::LOP_OR;
	return OR;
}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 1139 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ORDER;
}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 1144 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OUTER;
}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 1149 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OUTPUT;
}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 1154 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OVERLAPS;
}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 1159 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PAGE;
}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 1164 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PARTIAL;
}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 1169 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_PASCAL;
}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 1174 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PERSISTENT;
}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 1179 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CQL_PI;
}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 1184 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PLI;
}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 1189 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return POSITION;
}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 1194 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRECISION;
}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 1199 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PREPARE;
}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 1204 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRESERVE;
}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 1209 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIMARY;
}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 1214 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIOR;
}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 1219 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIVILEGES;
}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 1224 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PROCEDURE;
}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 1229 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRODUCT;
}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 1234 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PUBLIC;
}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 1239 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return QUARTER;
}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 1244 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return QUIT;
}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 1249 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RAND;
}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 1254 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return READ_ONLY;
}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 1259 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REAL;
}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 1264 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REFERENCES;
}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 1269 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REPEAT;
}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 1274 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REPLACE;
}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 1279 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RESTRICT;
}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 1284 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REVOKE;
}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 1289 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RIGHT;
}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 1294 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ROLLBACK;
}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 1299 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ROWS;
}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 1304 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RPAD;
}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 1309 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RTRIM;
}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 1314 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCHEMA;
}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 1319 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCREEN_WIDTH;
}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 1324 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCROLL;
}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 1329 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SECOND;
}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 1334 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SECONDS_BETWEEN;
}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 1339 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SELECT;
}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 1344 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SEQUENCE;
}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 1349 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SETOPT;
}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 1354 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SET;
}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 1359 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SHOWOPT;
}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 1364 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SIGN;
}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 1369 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SIN;
}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 1374 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_SIZE;
}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 1379 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SMALLINT;
}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 1384 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SOME;
}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 1389 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL;
}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 1394 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLCA;
}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 1399 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLCODE;
}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 1404 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLERROR;
}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 1409 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLSTATE;
}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 1414 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLWARNING;
}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 1419 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQRT;
}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 1424 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return STDEV;
}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 1429 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SUBSTRING;
}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 1434 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.aggregate = ParserConstants::AGGREGATE_SUM;
	return SUM;
}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 1440 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSDATE;
}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 1445 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSDATE_FORMAT;
}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 1450 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSTEM;
}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 1455 "sqlscanner.l"
{
	BEGIN Name;
	return TABLE;
}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 1459 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TAN;
}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 1464 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TEMPORARY;
}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 1469 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return THEN;
}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 1474 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIME;
}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 1479 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMESTAMP;
}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 1484 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMEZONE_HOUR;
}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 1489 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMEZONE_MINUTE;
}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 1494 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO;
}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 1499 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO_CHAR;
}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 1504 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO_DATE;
}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 1509 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSACTION;
}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 1514 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSLATE;
}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 1519 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSLATION;
}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 1524 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_TRUE;
}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 1529 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRUNCATE;
}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 1534 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GENERAL_TITLE;
}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 1539 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UCASE;
}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 1544 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UNION;
}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 1549 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UNIQUE;
}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 1554 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_UNKNOWN;
}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 1559 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UPDATE;
}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 1564 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UPPER;
}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 1569 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USAGE;
}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 1574 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USER;
}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 1579 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USING;
}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 1584 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VALUES;
}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 1589 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VALUE;
}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 1594 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VARBINARY;
}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 1599 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.coltype = KexiDBField::SQLVarchar;
//	return SQL_TYPE;
	return VARCHAR;
}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 1606 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VARYING;
}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 1611 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VENDOR;
}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 1616 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VIEW;
}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 1621 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WEEK;
}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 1626 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHEN;
}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 1631 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHENEVER;
}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 1636 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHERE;
}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 1641 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WITH;
}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 1646 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WORD_WRAPPED;
}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 1651 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WORK;
}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 1656 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WRAPPED;
}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 1661 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return YEAR;
}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 1666 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return YEARS_BETWEEN;
}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 1671 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXPONENT;
}
	YY_BREAK
case 342:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1676 "sqlscanner.l"
;
	YY_BREAK
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 1678 "sqlscanner.l"
{ 
strcpy(yylval.stringValue, yytext);
return CHARACTER_STRING_LITERAL;
}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 1683 "sqlscanner.l"
{
strcpy(yylval.stringValue, yytext);
return DOUBLE_QUOTED_STRING;
}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 1688 "sqlscanner.l"
{
//	BEGIN DelimOrSep;
	strcpy(yylval.stringValue, yytext);
//	yylval.stringValue = yytext;
//	int len = strlen( yylval.parserUserName );
//	for( scannerPtr = yylval.parserUserName + ( len - 1 ); *scannerPtr == ' ' && scannerPtr >= yylval.parserUserName; scannerPtr-- )
//		*scannerPtr = 0;
	return USER_DEFINED_NAME;
}
	YY_BREAK
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 1697 "sqlscanner.l"
;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 1699 "sqlscanner.l"
{
	BEGIN 0;
	return AMPERSAND;
}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 1703 "sqlscanner.l"
{
	BEGIN 0;
	return SEMICOLON;
}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 1707 "sqlscanner.l"
{
	BEGIN 0;
	return ASTERISK;
}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 1711 "sqlscanner.l"
{
	BEGIN 0;
	return ARITHMETIC_PLUS;
}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 1715 "sqlscanner.l"
{
	BEGIN 0;
	return ARITHMETIC_MINUS;
}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 1719 "sqlscanner.l"
{
	BEGIN 0;
	return SLASH;
}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 1723 "sqlscanner.l"
{
	BEGIN 0;
	return LEFTPAREN;
}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 1727 "sqlscanner.l"
{
	BEGIN 0;
	return RIGHTPAREN;
}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 1731 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_EQUAL;
	return PERCENT;
}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 1736 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_EQUAL;
	return EQUAL;
}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 1741 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_NOT_EQUAL;
	return NOT_EQUAL;
}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 1746 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER;
	return GREATER_THAN;
}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 1751 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER_OR_EQUAL;
	return GREATER_OR_EQUAL;
}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 1756 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS_OR_EQUAL;
	return LESS_OR_EQUAL;
}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 1761 "sqlscanner.l"
{
	BEGIN 0;
	//yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS;
	return LESS_THAN;
}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 1766 "sqlscanner.l"
{
	BEGIN 0;
	return SINGLE_QUOTE;
}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 1770 "sqlscanner.l"
{
	BEGIN 0;
	return QUESTION_MARK;
}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 1774 "sqlscanner.l"
{
	BEGIN 0;
	return COLON;
}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 1778 "sqlscanner.l"
{
	BEGIN 0;
	return COMMA;
}
	YY_BREAK
case 366:
/* rule 366 can match eol */
YY_RULE_SETUP
#line 1782 "sqlscanner.l"
{
	BEGIN 0;
}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 1785 "sqlscanner.l"
{
	BEGIN DelimOrSep;
//	strcpy( yylval.parserUserName, yytext );
	strcpy(yylval.stringValue, yytext);
	return USER_DEFINED_NAME;
}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 1791 "sqlscanner.l"
ECHO;
	YY_BREAK
#line 6657 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DelimOrSep):
case YY_STATE_EOF(Name):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1785 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1785 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1784);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 1791 "sqlscanner.l"



void tookenize(const char *data)
{
	yy_switch_to_buffer(yy_scan_string(data));
}


