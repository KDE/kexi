
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 361
#define YY_END_OF_BUFFER 362
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1781] =
    {   0,
      340,  340,    0,    0,    0,    0,  362,  361,  340,  361,
       10,   11,    7,    8,    3,    4,   14,    5,    9,    6,
       16,   13,    2,   12,    1,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      359,  355,  347,  348,  343,  344,  358,  345,  346,  357,
      342,  354,  349,  351,  356,  341,  360,  340,    0,    0,
      337,    0,   15,   16,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  335,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  359,  353,  350,  352,  360,

        0,    0,    0,  336,   15,   16,  339,  339,  339,  339,
      339,  339,  339,  339,  339,   38,  339,  339,  339,   42,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
       54,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  141,  339,  339,  339,  339,
      339,  339,  339,  150,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  161,  339,  339,  339,  339,  339,  339,

      339,  176,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  221,  339,
      223,  339,  339,  339,  227,  339,  339,  339,  339,  339,
      339,  339,  236,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  300,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  338,   16,
       18,  339,  339,   21,   22,  339,   29,  339,  339,   32,
       33,   34,   36,  339,  339,  339,  339,  339,  339,   45,
      339,  339,  339,  339,  339,   51,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,   83,
       84,  339,  339,  339,  339,  339,  339,  339,  339,  103,
      339,  339,  339,  105,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      125,  339,  339,  339,  339,  339,  133,  339,  339,  339,
      339,  339,  339,  339,  142,  339,  339,  339,  339,  339,
      339,  148,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  171,
      339,  339,  339,  339,  339,  180,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  191,  339,  339,  339,  339,
      196,  339,  198,  339,  203,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  214,  215,  339,  339,  339,
      339,  222,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  237,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  271,  339,  339,  339,  274,
      339,  339,  339,  278,  339,  339,  339,  339,  339,  339,
      339,  287,  339,  339,  339,  292,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,    0,   16,
      339,   20,  339,  339,  339,  339,  339,  339,  339,  339,
       37,  339,   41,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,   57,   58,  339,  339,  339,   62,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,   96,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  112,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  123,  124,  339,  339,  339,  130,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  146,  147,  339,  339,  151,  339,  339,  339,  155,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  175,  339,  178,  339,  339,

      182,  339,  184,  339,  339,  187,  339,  339,  339,  192,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  211,  339,  213,  216,  339,  339,  339,
      220,  224,  225,  339,  339,  339,  339,  339,  232,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  249,  250,  339,  252,  339,  339,  339,
      339,  339,  339,  339,  260,  261,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  273,  275,  339,  277,  339,
      339,  339,  339,  339,  284,  339,  339,  339,  339,  339,
      339,  294,  295,  339,  339,  339,  339,  339,  339,  306,

      339,  339,  339,  339,  339,  339,  339,  339,  316,  339,
      339,  339,  339,  339,  339,  324,  325,  326,  339,  339,
      329,  339,  331,  339,  333,  339,    0,  339,  339,  339,
      339,  339,  339,  339,  339,   31,   35,  339,   40,  339,
      339,  339,   47,  339,  339,  339,  339,   53,  339,  339,
      339,  339,  339,  339,   66,   67,  339,   69,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,   85,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  136,  137,  138,  139,  140,  339,  339,
      145,  339,  339,  152,  153,  339,  339,  339,  339,  339,
      339,  339,  163,  339,  339,  166,  167,  339,  339,  339,
      339,  339,  339,  339,  339,  183,  339,  186,  339,  189,
      339,  193,  194,  195,  339,  199,  339,  339,  339,  205,
      339,  207,  208,  339,  210,  212,  339,  339,  339,  339,
      228,  229,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  243,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  258,  339,  262,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  279,  339,  339,  339,

      339,  285,  339,  339,  339,  291,  339,  339,  339,  299,
      339,  339,  339,  339,  339,  309,  310,  339,  339,  339,
      314,  315,  317,  319,  339,  339,  339,  339,  339,  339,
      328,    0,  339,  339,  339,    0,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,   46,  339,   49,
       50,  339,  339,  339,  339,   61,  339,  339,  339,  339,
      339,   72,   73,  339,   75,  339,  339,  339,  339,  339,
       86,  339,  339,   93,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  111,  339,
      339,  339,  339,  339,  339,  339,  339,  121,  122,  339,

      127,  128,  339,  339,  132,  339,  339,  339,  339,  339,
      149,  154,  339,  339,  158,  159,  339,  339,  339,  339,
      339,  169,  339,  339,  339,  339,  339,  339,  185,  339,
      190,  339,  200,  339,  202,  204,  339,  339,  217,  339,
      339,  226,  230,  339,  339,  234,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  247,  339,  339,  339,  254,
      339,  339,  257,  339,  263,  339,  265,  266,  339,  268,
      339,  270,  339,  339,  339,  339,  339,  339,  339,  339,
      290,  339,  339,  339,  339,  339,  339,  339,  339,  311,
      339,  313,  318,  339,  339,  339,  323,  339,    0,  339,

      339,  339,    0,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,   48,  339,   55,  339,   59,   60,
      339,  339,  339,   70,  339,   74,   76,  339,  339,  339,
       81,  339,   87,   92,  339,   94,  339,  339,  339,  339,
      339,  339,  339,  339,  106,  107,  108,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  131,
      339,  135,  143,  144,  339,  339,  339,  339,  162,  339,
      339,  339,  170,  339,  339,  339,  179,  339,  339,  339,
      339,  339,  339,  218,  339,  339,  233,  339,  339,  339,
      240,  339,  242,  339,  339,  246,  248,  339,  339,  255,

      339,  339,  339,  339,  339,  272,  339,  280,  339,  339,
      339,  339,  288,  339,  339,  339,  339,  301,  302,  339,
      339,  339,  312,  339,  321,  322,  339,    0,  339,  332,
      339,    0,   19,   23,  339,  339,  339,  339,  339,   30,
      339,  339,  339,  339,   56,  339,  339,   68,  339,  339,
      339,   80,  339,  339,  339,   95,  339,  339,  339,  339,
      339,  339,  339,  339,  110,  113,  339,  339,  339,  339,
      339,  339,  120,  126,  339,  134,  339,  339,  157,  339,
      339,  339,  339,  339,  174,  339,  181,  339,  339,  339,
      339,  209,  339,  231,  339,  238,  339,  241,  339,  339,

      339,  339,  256,  259,  339,  339,  269,  276,  281,  282,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  307,
      339,  327,    0,  339,  339,   17,   24,  339,  339,  339,
       28,   39,  339,  339,  339,  339,   64,  339,   71,  339,
      339,  339,  339,  339,  339,  339,  339,  100,  101,  339,
      339,  339,  339,  339,  339,  117,  339,  339,  129,  339,
      339,  160,  164,  165,  339,  172,  339,  177,  339,  197,
      339,  339,  339,  339,  239,  339,  245,  251,  339,  339,
      339,  339,  286,  339,  293,  296,  339,  339,  339,  304,
      339,  320,    0,  339,  339,  339,   26,  339,  339,  339,

       52,  339,  339,   77,   78,  339,  339,  339,  339,  339,
      339,   99,  339,  104,  109,  114,  339,  116,  118,  339,
      339,  339,  339,  339,  188,  339,  339,  339,  235,  244,
      253,  339,  339,  283,  339,  339,  339,  339,  339,    0,
      339,  339,   25,   27,  339,  339,   63,  339,   79,  339,
      339,  339,   97,  339,  339,  115,  339,  339,  339,  168,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  303,
      305,    0,  339,  339,  339,  339,  339,  339,   88,   89,
      339,  339,  102,  119,  339,  339,  173,  339,  339,  219,
      264,  339,  339,  339,  339,    0,  330,  339,   43,  339,

      339,   82,  339,  339,  308,  156,  339,  339,  339,  339,
      297,  339,    0,  334,   44,  339,  339,   98,  339,  206,
      339,  289,  339,    0,  339,  339,  201,  267,  298,    0,
       65,  339,    0,   90,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   91,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   16,
       15,   15,   15,   15,   15,   15,   15,   17,   18,   19,
       20,   21,   22,   23,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
        1,    1,    1,    1,   24,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    4,    1,    1,    1,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[1788] =
    {   0,
        0,    0,   51,   73,   72,    0, 4573, 7913,   53,    0,
     7913, 4557, 7913, 7913, 7913, 7913, 7913,  111, 7913, 7913,
       51, 7913, 7913, 7913, 7913,  102,  108,  124,  126,  168,
      192,  125,   39,  164,   86, 4533,  185,  194,  211,  230,
      238, 4507,  222,  257,  275,  205,  110,  249,    0, 4522,
       86, 7913, 7913, 7913, 7913, 7913, 7913, 7913, 7913, 7913,
     7913,  112, 7913, 4521, 7913, 7913,    0,  170, 4536, 4524,
     7913, 4526,  168,  181,    0, 4476, 4479,  175,   98,  171,
     4479,  316,  358, 4463, 4466,  178,  215, 4467,  382,  198,
      160,  133, 4447,  381, 4456, 4433,  200,  315,  268,  168,

     4435, 7913, 4421, 4435, 4426,  276, 4416, 4398, 4399, 4398,
      425,  181, 4397, 4399,  235, 4395,  447,  260, 4387, 4387,
     4402, 4392, 4391, 4391,  490,  539, 4394, 4383, 4376,  226,
     4399,  316,  277,  382, 4381,  300,  227,  259, 4385,  313,
     4389, 4372,  434,  295, 4375, 4385,  577,  606,  312,  641,
     4366, 4371,  355, 4357,  668, 4356, 4345,  382, 4352,  288,
     4339,  667, 4336,  316, 4341, 4314,  380,  444, 4316,  444,
     4320, 4307,  311, 4306,  404, 4290,   98, 4286, 4293,  439,
      712,  190, 4287,  375,  412,  538,  437, 4273, 4272, 4271,
     4261, 4245, 4237, 4253, 4243,  371, 7913, 7913, 7913,    0,

     4263,  483, 4254, 7913,  474,  528,  735, 4213,  773,  795,
      818, 4217,  856,  878,  900, 7913,  922, 4207, 4206, 7913,
     4196,  445,  954, 4185, 4190, 4172, 4185, 4192,  976, 4191,
     7913,  537, 4190, 4178, 4169, 4170, 4184, 4160, 4166, 4153,
       41,  528,  594, 4149,  999, 1021, 4143, 4155,  656,  544,
     1043, 4134, 1085,  545, 4140, 4132, 4127, 4104, 4118,  566,
     4112, 4110, 4086, 4096, 1120, 4090, 4085, 4077, 4060, 1143,
      563, 4050, 4065, 4039,  597, 7913, 1165, 4043, 4034, 4034,
     4031, 1208, 4033, 7913, 4010, 4010, 3993, 4004, 3985, 3988,
     3971, 3976, 3976, 7913, 3968,  543, 3950, 3964, 3938, 3953,

     1230, 7913, 3936, 3933, 3917, 1268, 3929, 3906, 3906, 3895,
     3907, 3899, 3898, 3888, 3891, 1290, 3875, 3876, 3868, 3873,
     1312, 3857, 1334, 1378, 3854, 3857, 3867, 3862, 3869, 3849,
     3847, 3862, 1422, 1444, 3854, 3860, 3859, 3860, 7913, 1466,
     7913, 3837, 3847, 3851, 7913, 3854,  434, 3840, 3852, 3836,
     3852, 3835, 7913, 1488, 3844,  666,  565,  527, 3840, 3833,
     3823, 3838,  603, 3827,  546, 3811, 3812, 3818, 3813, 3805,
     3819, 3813, 3816,  606, 3805, 3814, 3797, 1510, 3794, 3802,
     1548, 3810, 3802, 3808, 1570, 3792, 3806, 3791, 1616,  602,
     3797, 1638, 3785, 3786, 3785, 3777, 7913,  606, 3765,  627,

     3759,  375, 3754, 3766, 3752, 3749, 3728, 3731, 3714,  646,
     3730, 3701, 3712,  663, 3705,  668, 3696, 3684, 7913,  747,
     7913, 3689, 1660, 7913, 7913, 1040, 7913, 3688, 3672, 7913,
     7913, 7913, 7913, 3671, 1682, 3661, 1704, 3654, 3668, 7913,
     3640, 3643, 3642, 3632, 3618, 7913, 3623, 3614, 3623, 1726,
     1748, 3602, 3604, 3598, 1770, 3591, 3587, 3586, 3569, 3579,
     3557, 3560, 3538, 3557, 3543, 3527, 3528, 3531, 3521, 7913,
     7913, 3505, 3495, 3513, 3499, 3488, 3484, 3490, 1794, 7913,
     3476, 3481, 3459, 7913, 3457, 3459, 3438, 3431, 3428, 1817,
     3424, 3428, 3424, 3411, 3404, 3406, 3402, 3398, 1858, 1880,

     7913, 3404, 3392, 3391, 1902, 3386, 7913, 3387, 3403, 3398,
     3394, 3381, 3380, 3381, 7913, 3389, 3379, 3392, 1946, 1968,
     3377, 7913, 3393, 1990, 3373, 3369, 3370, 2012, 3354, 3361,
     3345, 3358, 3331, 3327, 3338, 3331, 3312, 3309,  666, 7913,
      626,  664, 3318, 2054, 3309, 7913, 3287, 2076, 3302, 2098,
     3277, 3284, 2120, 3286,  658, 7913, 2142, 3267, 3262, 3266,
     7913, 3249, 7913,  668, 7913, 3257, 3241, 3244, 3223, 3222,
     3216, 3212, 2164, 3204, 2186, 7913, 7913, 2208, 3201, 3189,
     2240, 7913, 2262, 2284, 3193, 3180, 3179, 3166, 3174, 2306,
     3167, 3174, 3156, 7913, 3144, 3145, 3152, 3138, 3141, 3114,

     3122, 3116, 3099, 3101, 3089, 2328, 2350, 3099, 2372, 3080,
     3087, 3086, 3059, 3065, 3046, 3063, 2394, 2416, 3042, 3041,
     3039, 3031, 3019, 3029, 3017, 7913, 3005, 2996, 2438, 7913,
     2460, 2998, 2482, 7913,  725, 2982, 2979, 2988, 2504, 2966,
     2958, 7913, 2976, 2962, 2961, 7913, 2941, 2526, 2548, 2950,
     2937, 2943, 2915, 2597, 2930, 2918, 2908, 2891, 2896, 2881,
     2882, 2885, 2619, 2882, 2874, 2869, 2860, 2858, 2842, 2641,
     2663, 2685, 2851, 2713, 2846, 2735, 2829, 2757,  701,  712,
     2814, 7913, 2833, 2809,  727, 2818, 2808, 2811, 2799, 2821,
     7913, 2782, 7913, 2843, 2783, 2782, 2785, 2865, 2775, 2759,

     2750, 2769, 2887, 2769, 7913, 7913, 2757, 2757, 2752, 7913,
     2757, 2765, 2909, 2931, 2748, 2953, 2746, 2751, 2744, 2743,
     2742, 2758, 2742, 2745, 2740, 2738, 2975, 2744, 2728, 2724,
     2719, 2714, 2725, 7913,  709,  796, 2714, 2700, 2704, 2686,
     2682, 2675, 2684, 7913, 2679, 2672, 2671, 2665, 2663, 2675,
     2652, 2651, 2650, 7913, 7913, 2630, 2639, 2623, 7913, 2613,
     2613, 2608, 2618, 2997, 3019, 3041, 3063, 3085, 2604, 2609,
     3107, 7913, 7913, 2599, 2587, 7913, 3129, 3151, 2582, 7913,
     2588, 2569, 2565, 2568, 2563, 2567, 3173, 2569, 2568, 3195,
     3217, 2549, 2546, 2560,  722, 7913, 2544, 7913, 2557, 2561,

     7913, 3239, 7913, 2553, 3261, 7913, 2537, 3283, 2554, 7913,
     3305, 3327, 3349, 2539, 3371, 2552, 2531, 2550, 3393, 3435,
     3457, 2540, 3479, 7913, 3501, 7913, 7913, 2547, 2543, 2551,
     7913, 7913, 7913, 2536, 3523, 3545, 2529, 2547, 7913, 2539,
     2527, 2510, 2519, 2499, 2499, 2489, 2488, 3567, 2484, 2491,
     2482, 2481, 2469, 7913, 7913, 2458, 7913, 2458, 2442, 2449,
     2442, 2436, 3589, 2439, 7913, 7913, 3611,  127,  214,  256,
      327,  338,  349,  407,  455, 7913, 7913,  544, 7913, 3633,
      573,  561,  616,  641, 7913, 3655,  698,  723,  732,  768,
      730, 7913, 7913,  729,  738, 3677,  753,  744,  764, 7913,

      774, 3699, 3721,  781,  764,  793, 3743, 3765, 7913, 3787,
     3809,  785,  809,  804,  802, 7913, 7913, 7913,  800, 3851,
     7913,  800, 7913,  819, 7913,  825,  835,  808,  804,  809,
      817,  818,  833,  836,  827, 7913, 7913,  839, 7913,  849,
      845, 3901, 7913,  855, 3923, 3945,  856, 7913,  875,  874,
      884, 3967,  887,  882, 7913, 7913,  900, 7913,  917, 3989,
     4011,  908, 4033,  894,  922,  903,  905,  911, 7913, 4055,
      923,  909, 4077,  925,  915,  920,  940,  931,  951,  952,
      962,  965,  967,  975,  970, 1042, 4099, 1033,  972,  987,
      987,  998, 1010, 1020, 4121, 4143, 1019, 4165, 4187, 1029,

     4219, 1044, 1026, 7913, 7913, 7913, 7913, 7913, 1036, 1037,
     7913, 1040, 4241, 7913, 7913, 4263, 1052, 1035, 4285, 4307,
     1055, 1052, 7913, 1040, 1049, 7913, 7913, 1057, 4329, 1058,
     1072, 1084, 1077, 1062, 1081, 7913, 4351, 7913, 1080, 7913,
     4373, 7913, 7913, 7913, 1075, 7913, 4395, 4437, 4459, 7913,
     1091, 7913, 7913, 1091, 7913, 7913, 4481, 1090, 1083, 4503,
     7913, 7913, 4525, 1080, 1088, 4547, 1081, 1096, 1103, 1118,
     1102, 1109, 7913, 1130, 1124, 1126, 4569, 1138, 1143, 1151,
     4591, 1161, 1164, 4613, 7913, 1165, 7913, 4635, 1169, 4657,
     4679, 4721, 1168, 4743, 1152, 1159, 7913, 1169, 1160, 1156,

     1163, 7913, 1169, 1174, 4765, 7913, 1179, 1180, 1168, 7913,
     1165, 1179, 1185, 1188, 1179, 7913, 7913, 4787, 1186, 4809,
     7913, 7913, 7913, 7913, 4831, 1209, 1193, 1214, 4853, 1217,
     7913, 1207, 1213, 1228, 1231, 1246, 1232, 1219, 1221, 1219,
     1221, 1227, 1225, 1239, 1233, 1223, 1256, 7913, 4875, 7913,
     7913, 1253, 4897, 4924, 4946, 7913, 1256, 1266, 1276, 4968,
     1267, 7913, 7913, 4990, 7913, 5012, 1283, 1288, 5044, 1288,
     7913, 5066, 5088, 7913, 5111, 1299, 1296, 1302, 1311, 1321,
     1333, 1315, 1335, 5133, 5155, 5177, 1335, 1334, 7913, 1334,
     1320, 1321, 1341, 1325, 1339, 1340, 1326, 7913, 7913, 1344,

     7913, 7913, 1333, 5199, 7913, 1337, 5221, 5243, 5265, 1350,
     7913, 7913, 1346, 1327, 7913, 7913, 1333, 5287, 1339, 1346,
     1339, 7913, 5309, 1366, 1358, 1363, 5331, 1374, 7913, 1376,
     7913, 1375, 7913, 1382, 7913, 7913, 1381, 1372, 7913, 5353,
     1380, 7913, 7913, 1367, 5375, 7913, 1383, 1375, 1375, 5397,
     1386, 5419, 1385, 1375, 5441, 7913, 5463, 1382, 1392, 7913,
     5485, 1376, 7913, 1386, 7913, 1375, 7913, 7913, 1402, 7913,
     1398, 7913, 5507, 1393, 5529, 1396, 1419, 1416, 1421, 5551,
     7913, 1418, 1433, 1442, 5574, 5596, 1437, 1438, 1463, 7913,
     5618, 7913, 7913, 1451, 5640, 5662, 7913, 1461, 1472, 1489,

     5684, 1486, 1510, 5706, 5728, 1491, 1491, 1504, 1499, 1495,
     5750, 1501, 1515, 1499, 7913, 1498, 7913, 5772, 7913, 7913,
     1512, 1502, 5794, 7913, 1507, 7913, 7913, 1507, 1509, 5816,
     7913, 1510, 7913, 7913, 1557, 7913, 5838, 1515, 1528, 1519,
     1529, 1532, 1528, 1542, 7913, 7913, 7913, 1558, 5860, 5882,
     1556, 1563, 1556, 1551, 1575, 1566, 5904, 5926, 1566, 7913,
     5948, 7913, 7913, 7913, 1561, 1562, 5970, 1578, 7913, 1566,
     1560, 1577, 7913, 1567, 5992, 1574, 7913, 6014, 1570, 1571,
     1590, 1591, 6036, 7913, 1583, 6058, 7913, 1593, 6080, 1594,
     7913, 6102, 7913, 1613, 1614, 7913, 7913, 1604, 1625, 7913,

     6124, 6146, 1631, 1639, 6168, 7913, 6190, 7913, 6212, 6234,
     1637, 1645, 7913, 1656, 1638, 1657, 1674, 7913, 7913, 1675,
     1812, 6256, 7913, 1660, 7913, 7913, 6278, 1686, 1690, 7913,
     1687, 1726, 7913, 7913, 6300, 1723, 1710, 1735, 6322, 7913,
     6344, 1720, 1745, 1743, 7913, 1741, 6366, 7913, 6389, 1748,
     1754, 7913, 1771, 1784, 1777, 7913, 1796, 1789, 1800, 6411,
     6433, 1804, 1813, 1814, 7913, 7913, 1802, 1819, 1798, 6455,
     1804, 1820, 7913, 7913, 6477, 7913, 1817, 1804, 7913, 6499,
     6521, 6543, 1806, 6565, 7913, 6597, 7913, 1821, 6619, 1825,
     1811, 7913, 1825, 7913, 1813, 7913, 6641, 7913, 1815, 6663,

     6685, 1819, 7913, 7913, 1835, 1844, 7913, 7913, 7913, 7913,
     1843, 6707, 1845, 6729, 6751, 1894, 1846, 6773, 1856, 7913,
     6795, 7913, 1852, 1866, 1860, 7913, 7913, 1874, 6817, 1875,
     7913, 7913, 1894, 1891, 6839, 1897, 7913, 1894, 7913, 6861,
     6883, 1899, 1889, 1897, 1891, 1898, 6925, 7913, 7913, 1908,
     6947, 6969, 6991, 1895, 7013, 7913, 7035, 1901, 7913, 1896,
     1912, 7913, 7913, 7913, 1913, 7913, 1904, 7913, 7057, 7913,
     1900, 1898, 1902, 7079, 7913, 7101, 7913, 7913, 7123, 1906,
     1907, 7145, 7913, 1919, 7913, 7913, 1923, 1939, 1935, 7913,
     1945, 7913, 1955, 1965, 1966, 7167, 7913, 7189, 1966, 1977,

     7913, 7211, 1987, 7913, 7913, 7233, 1979, 1998, 1999, 7255,
     2008, 7913, 1999, 7913, 7913, 7913, 7277, 7913, 7913, 1994,
     2003, 2011, 7299, 2003, 7913, 1995, 2014, 2012, 7913, 7913,
     7913, 2013, 1999, 7913, 2010, 2003, 2011, 7321, 7343, 2007,
     2023, 2023, 7913, 7913, 2015, 2016, 7913, 2020, 7913, 2028,
     7365, 7387, 7913, 2040, 7429, 7913, 7451, 2041, 2042, 7913,
     7473, 2052, 2062, 7495, 7517, 2063, 2077, 2061, 2068, 7913,
     7913, 2074, 7539, 2086, 7561, 2081, 2104, 7583, 7913, 7913,
     2092, 2104, 7913, 7913, 7605, 7627, 7913, 2118, 2119, 7913,
     7913, 2129, 2124, 7649, 2125, 2154, 7913, 7671, 7913, 7693,

     2136, 7913, 2165, 7715, 7913, 7913, 2153, 7737, 2163, 7759,
     7913, 2173, 2185, 7913, 7913, 2181, 2186, 7913, 7781, 7913,
     7803, 7913, 7825, 2195, 7847, 2192, 7913, 7913, 7913, 2181,
     7913, 7869, 2207, 7913, 2190, 2194, 2195, 2209, 2201, 2196,
     2193, 2198, 2223, 2223, 2222, 2238, 2234, 2238, 2263, 2262,
     2270, 2248, 2271, 2281, 2270, 2284, 2293, 2295, 2315, 2315,
     2318, 2322, 2328, 2333, 2332, 2348, 2345, 2344, 2369, 2357,
     2372, 2377, 2382, 2396, 2387, 2393, 2400, 2391, 7913, 7913,
     7892, 7896, 7900, 2449, 2450, 7904, 7908
    } ;

static yyconst flex_int16_t yy_def[1788] =
    {   0,
     1780,    1, 1781, 1781, 1781,    5, 1780, 1780, 1780, 1782,
     1780, 1783, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1785, 1780, 1786, 1783,
     1780, 1787, 1780, 1780, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,

     1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1780, 1780, 1780, 1785,

     1786, 1786, 1787, 1780, 1780, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784,

     1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1784,
     1780, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784,

     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1780,
     1780, 1784, 1784, 1780, 1780, 1784, 1780, 1784, 1784, 1780,
     1780, 1780, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780,
     1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,

     1780, 1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784,
     1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784,
     1780, 1784, 1780, 1784, 1780, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1780, 1784, 1784, 1784,
     1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784,

     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1780, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1780,
     1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1780, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784,

     1784, 1784, 1784, 1784, 1780, 1780, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1780, 1780, 1784, 1784, 1784, 1780, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1780, 1780, 1784, 1784, 1780, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1780, 1784, 1784,

     1780, 1784, 1780, 1784, 1784, 1780, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1780, 1784, 1780, 1780, 1784, 1784, 1784,
     1780, 1780, 1780, 1784, 1784, 1784, 1784, 1784, 1780, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1780, 1780, 1784, 1780, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1780, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1780, 1784, 1780, 1784,
     1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784,
     1784, 1780, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1780,

     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1780, 1780, 1784, 1784,
     1780, 1784, 1780, 1784, 1780, 1784, 1780, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1780, 1784, 1780, 1784,
     1784, 1784, 1780, 1784, 1784, 1784, 1784, 1780, 1784, 1784,
     1784, 1784, 1784, 1784, 1780, 1780, 1784, 1780, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,

     1784, 1784, 1784, 1780, 1780, 1780, 1780, 1780, 1784, 1784,
     1780, 1784, 1784, 1780, 1780, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1780, 1784, 1784, 1780, 1780, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1780, 1784, 1780,
     1784, 1780, 1780, 1780, 1784, 1780, 1784, 1784, 1784, 1780,
     1784, 1780, 1780, 1784, 1780, 1780, 1784, 1784, 1784, 1784,
     1780, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1780, 1784, 1780, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784,

     1784, 1780, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1784, 1784, 1780, 1780, 1784, 1784, 1784,
     1780, 1780, 1780, 1780, 1784, 1784, 1784, 1784, 1784, 1784,
     1780, 1780, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1784, 1780,
     1780, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784,
     1784, 1780, 1780, 1784, 1780, 1784, 1784, 1784, 1784, 1784,
     1780, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1780, 1784,

     1780, 1780, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784,
     1780, 1780, 1784, 1784, 1780, 1780, 1784, 1784, 1784, 1784,
     1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1784,
     1780, 1784, 1780, 1784, 1780, 1780, 1784, 1784, 1780, 1784,
     1784, 1780, 1780, 1784, 1784, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1780,
     1784, 1784, 1780, 1784, 1780, 1784, 1780, 1780, 1784, 1780,
     1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780,
     1784, 1780, 1780, 1784, 1784, 1784, 1780, 1784, 1780, 1784,

     1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1780, 1784, 1780, 1784, 1780, 1780,
     1784, 1784, 1784, 1780, 1784, 1780, 1780, 1784, 1784, 1784,
     1780, 1784, 1780, 1780, 1784, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1780, 1780, 1780, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780,
     1784, 1780, 1780, 1780, 1784, 1784, 1784, 1784, 1780, 1784,
     1784, 1784, 1780, 1784, 1784, 1784, 1780, 1784, 1784, 1784,
     1784, 1784, 1784, 1780, 1784, 1784, 1780, 1784, 1784, 1784,
     1780, 1784, 1780, 1784, 1784, 1780, 1780, 1784, 1784, 1780,

     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1780, 1784, 1784,
     1784, 1784, 1780, 1784, 1784, 1784, 1784, 1780, 1780, 1784,
     1784, 1784, 1780, 1784, 1780, 1780, 1784, 1780, 1784, 1780,
     1784, 1780, 1780, 1780, 1784, 1784, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1784, 1780, 1784, 1784, 1780, 1784, 1784,
     1784, 1780, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1780, 1780, 1784, 1784, 1784, 1784,
     1784, 1784, 1780, 1780, 1784, 1780, 1784, 1784, 1780, 1784,
     1784, 1784, 1784, 1784, 1780, 1784, 1780, 1784, 1784, 1784,
     1784, 1780, 1784, 1780, 1784, 1780, 1784, 1780, 1784, 1784,

     1784, 1784, 1780, 1780, 1784, 1784, 1780, 1780, 1780, 1780,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780,
     1784, 1780, 1780, 1784, 1784, 1780, 1780, 1784, 1784, 1784,
     1780, 1780, 1784, 1784, 1784, 1784, 1780, 1784, 1780, 1784,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1780, 1784,
     1784, 1784, 1784, 1784, 1784, 1780, 1784, 1784, 1780, 1784,
     1784, 1780, 1780, 1780, 1784, 1780, 1784, 1780, 1784, 1780,
     1784, 1784, 1784, 1784, 1780, 1784, 1780, 1780, 1784, 1784,
     1784, 1784, 1780, 1784, 1780, 1780, 1784, 1784, 1784, 1780,
     1784, 1780, 1780, 1784, 1784, 1784, 1780, 1784, 1784, 1784,

     1780, 1784, 1784, 1780, 1780, 1784, 1784, 1784, 1784, 1784,
     1784, 1780, 1784, 1780, 1780, 1780, 1784, 1780, 1780, 1784,
     1784, 1784, 1784, 1784, 1780, 1784, 1784, 1784, 1780, 1780,
     1780, 1784, 1784, 1780, 1784, 1784, 1784, 1784, 1784, 1780,
     1784, 1784, 1780, 1780, 1784, 1784, 1780, 1784, 1780, 1784,
     1784, 1784, 1780, 1784, 1784, 1780, 1784, 1784, 1784, 1780,
     1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1780,
     1780, 1780, 1784, 1784, 1784, 1784, 1784, 1784, 1780, 1780,
     1784, 1784, 1780, 1780, 1784, 1784, 1780, 1784, 1784, 1780,
     1780, 1784, 1784, 1784, 1784, 1780, 1780, 1784, 1780, 1784,

     1784, 1780, 1784, 1784, 1780, 1780, 1784, 1784, 1784, 1784,
     1780, 1784, 1780, 1780, 1780, 1784, 1784, 1780, 1784, 1780,
     1784, 1780, 1784, 1780, 1784, 1784, 1780, 1780, 1780, 1780,
     1780, 1784, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,    0,
     1780, 1780, 1780, 1780, 1780, 1780, 1780
    } ;

static yyconst flex_int16_t yy_nxt[7966] =
    {   0,
        8,    9,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   21,   22,   23,    8,    8,
        8,   24,   25,    8,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   49,
        8,    8,   51,   51,   68,   68,   52,   53,   54,   55,
       56,   57,   58,  119,   59,   74,   74,   60,   61,   62,
       63,   64,   65,   66,   51,   51,  460,  120,   52,   53,
       54,   55,   56,   57,   58,  461,   59,  196,  196,   60,
       61,   62,   63,   64,   65,   66,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   72,  391,  127,   73,   73,   76,   77,   78,
      128,  197,  198,  211,  187,  392,   86,   79,  188,   80,
       87,  212,  189,   81,   82,   83,   84,   85,   90,   88,
       97, 1088,   91,  115,   98,   92,   89,  236,   99,   93,
      116,  237,   94,  117,  100,   95,  118,  101,   96,  102,
      102,   68,   68,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  205,  205,  102,  102,  102,  102,  102,  102,
      102,  121,  234,  122,  123,  206,  206,  235,  213,  209,

      124,  125,  210,  103,  261,  104,  126,  224,  225,  130,
      105,  131,  262,  132,  399,  106,  107,  133,  136,  214,
      108,  226,  277,  134,  109,  278,  137,  110,  135,  111,
      112,  183,  138,  113,  400,  140,  114,  141,  139,  142,
      232,  233,  184,  250,  185,  227,  161,  186,  251,  143,
      162, 1089,  228,  322,  163,  144,  145,  146,  229,  147,
      164,  165,  153,  307,  323,  166,  154,  148,  308,  149,
      155,  150,  281,  156,  151,  152,  157,  190,  282,  158,
      191,  192,  159,  167,  286,  168,  324,  193,  169,  170,
      194, 1090,  257,  171,  258,  172,  325,  173,  287,  177,

      174,  175,  267,  178,  268,  176,  179,  180,  269,  259,
      260,  313,  360,  181,  314,  270,  182,  216,  216,  271,
      361,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      335,  336,  216,  216,  216,  216,  216,  216,  216,  252,
      343,  253,  217,  320,  254,  310,  385,  321,  218,  327,
      255,  369,  386,  311, 1091,  344,  328,  256,  219,  220,
      220,  312,  370,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  196,  196,  220,  220,  220,  220,  220,  220,
      220, 1092,  221,  231,  231,  349, 1093,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  350,  351,  231,  231,

      231,  231,  231,  231,  231,  239,  240,  402,  315,  403,
      356,  373,  316,  657,  357,  658,  241,  242,  243,  317,
      358,  374,  244,  245,  246,  247,  276,  276,  318,  388,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  404,
      389,  276,  276,  276,  276,  276,  276,  276,  284,  284,
     1094,  405,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  331,  587,  284,  284,  284,  284,  284,  284,  284,
      375,  332,  409,  588,  380,  395,  438,  333,  410,  376,
      334,  381,  396,  439,  377,  419,  202,  378,  205,  205,
      285,  294,  294,  382, 1095,  294,  294,  294,  294,  294,

      294,  294,  294,  294,   75,   75,  294,  294,  294,  294,
      294,  294,  294,   75,   75,   75,  295,  296,   75,   75,
       75,   75,  297,   75,   75,   75,   75,  298,   75,  299,
       75,   75,  300,  301,   75,   75,   75,   75,   75,   75,
      302,  302,  420,  420,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  602,  603,  302,  302,  302,  302,  302,
      302,  302,  406,  449,  462,  450,  407,  463,  478,  487,
      408,  534,  479,  488,  611,  535, 1096,  303,  339,  339,
      451,  612,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  508,  494,  339,  339,  339,  339,  339,  339,  339,

     1098,  599, 1099,  600,  509,  495,  340,  341,  341,  496,
      601,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      464,  513,  341,  341,  341,  341,  341,  341,  341,  643,
      608,  465,  651,  652,  621,  514,  466,  467,  609,  468,
     1100,  342,  345,  345,  622,  644,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  654,  794,  345,  345,  345,
      345,  345,  345,  345,  655,  796,  796,  795,  346,  353,
      353,  666,  667,  353,  353,  353,  353,  353,  353,  353,
      353,  353, 1101,  474,  353,  353,  353,  353,  353,  353,
      353,  363,  596,  808,  668,  675,  364,  475,  476,  477,

      672,  809,  676,  792,  673,  597,  365,  793,  598,  366,
      815,  816,  367,  397,  397,  927,  927,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  680,  680,  397,  397,
      397,  397,  397,  397,  397,  398,  421,  421,  976, 1103,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  880,
      977,  421,  421,  421,  421,  421,  421,  421,  679,  931,
      679,  680,  680,  881, 1031,  932, 1104, 1032, 1105, 1106,
     1106, 1107, 1108,  422,  424,  424, 1109, 1111,  424,  424,
      424,  424,  424,  424,  424,  424,  424, 1112, 1113,  424,
      424,  424,  424,  424,  424,  424,  425,  425, 1115, 1114,

      425,  425,  425,  425,  425,  425,  425,  425,  425, 1118,
     1119,  425,  425,  425,  425,  425,  425,  425,  426,  427,
      427, 1120, 1126,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  978, 1127,  427,  427,  427,  427,  427,  427,
      427, 1128,  979, 1129,  980, 1130, 1133, 1134, 1135, 1136,
     1136, 1137, 1138, 1139, 1140, 1141,  428,  430,  430, 1142,
     1143,  430,  430,  430,  430,  430,  430,  430,  430,  430,
     1144, 1145,  430,  430,  430,  430,  430,  430,  430,  431,
      431, 1146, 1147,  431,  431,  431,  431,  431,  431,  431,
      431,  431, 1149, 1152,  431,  431,  431,  431,  431,  431,

      431,  432,  432, 1153, 1154,  432,  432,  432,  432,  432,
      432,  432,  432,  432, 1155, 1157,  432,  432,  432,  432,
      432,  432,  432,  433,  433, 1158, 1159,  433,  433,  433,
      433,  433,  433,  433,  433,  433, 1164, 1166,  433,  433,
      433,  433,  433,  433,  433, 1160, 1167, 1168, 1169, 1161,
     1170, 1172, 1173, 1175,  434,  440,  440, 1176, 1177,  440,
      440,  440,  440,  440,  440,  440,  440,  440, 1178, 1179,
      440,  440,  440,  440,  440,  440,  440,  446,  446, 1180,
     1181,  446,  446,  446,  446,  446,  446,  446,  446,  446,
     1182, 1183,  446,  446,  446,  446,  446,  446,  446,  447,

      470,  470, 1184, 1185,  470,  470,  470,  470,  470,  470,
      470,  470,  470, 1186, 1192,  470,  470,  470,  470,  470,
      470,  470,  471,  471, 1193, 1194,  471,  471,  471,  471,
      471,  471,  471,  471,  471, 1195, 1196,  471,  471,  471,
      471,  471,  471,  471,  480,  480, 1197, 1200,  480,  480,
      480,  480,  480,  480,  480,  480,  480, 1204, 1190,  480,
      480,  480,  480,  480,  480,  480, 1187,  683, 1206, 1207,
     1188,  684, 1191, 1208, 1209, 1210,  685, 1213, 1214, 1217,
     1218,  481,  686, 1219, 1220,  482,  484,  484,  687, 1221,
      484,  484,  484,  484,  484,  484,  484,  484,  484, 1223,

     1224,  484,  484,  484,  484,  484,  484,  484, 1225, 1226,
     1227, 1228, 1230, 1232, 1237, 1238, 1240,  485, 1241, 1244,
      486,  501,  501, 1245, 1247,  501,  501,  501,  501,  501,
      501,  501,  501,  501, 1248, 1249,  501,  501,  501,  501,
      501,  501,  501,  502,  507,  507, 1250, 1251,  507,  507,
      507,  507,  507,  507,  507,  507,  507, 1252, 1253,  507,
      507,  507,  507,  507,  507,  507,  515,  515, 1254, 1255,
      515,  515,  515,  515,  515,  515,  515,  515,  515, 1257,
     1258,  515,  515,  515,  515,  515,  515,  515, 1259, 1261,
     1262, 1264, 1266,  516, 1271, 1273, 1274, 1275, 1276, 1277,

     1278, 1279, 1280, 1282, 1283, 1284, 1285, 1286,  517,  522,
      522, 1287, 1288,  522,  522,  522,  522,  522,  522,  522,
      522,  522, 1289, 1291,  522,  522,  522,  522,  522,  522,
      522,  540,  540, 1294, 1295,  540,  540,  540,  540,  540,
      540,  540,  540,  540, 1296, 1298,  540,  540,  540,  540,
      540,  540,  540, 1299, 1300, 1301, 1302, 1303,  541, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,  542,  546,
      546, 1312, 1313,  546,  546,  546,  546,  546,  546,  546,
      546,  546, 1314, 1316,  546,  546,  546,  546,  546,  546,
      546,  556,  556, 1321, 1322,  556,  556,  556,  556,  556,

      556,  556,  556,  556, 1323, 1325,  556,  556,  556,  556,
      556,  556,  556,  561,  561, 1329, 1330,  561,  561,  561,
      561,  561,  561,  561,  561,  561, 1332, 1337,  561,  561,
      561,  561,  561,  561,  561,  563,  563, 1338, 1339,  563,
      563,  563,  563,  563,  563,  563,  563,  563, 1340, 1341,
      563,  563,  563,  563,  563,  563,  563, 1342, 1343, 1344,
     1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
     1358, 1359, 1361, 1365, 1366, 1367, 1368, 1370,  564,  565,
      565, 1371, 1372,  565,  565,  565,  565,  565,  565,  565,
      565,  565, 1374, 1375,  565,  565,  565,  565,  565,  565,

      565, 1376, 1378, 1379, 1380, 1381, 1382, 1383, 1385, 1386,
      566, 1388, 1389, 1390, 1392, 1394, 1395, 1398, 1399, 1401,
     1402, 1403,  567,  576,  576, 1404, 1405,  576,  576,  576,
      576,  576,  576,  576,  576,  576, 1407, 1409,  576,  576,
      576,  576,  576,  576,  576,  577,  577, 1410, 1411,  577,
      577,  577,  577,  577,  577,  577,  577,  577, 1412, 1415,
      577,  577,  577,  577,  577,  577,  577,  582,  582, 1416,
     1417,  582,  582,  582,  582,  582,  582,  582,  582,  582,
     1420, 1421,  582,  582,  582,  582,  582,  582,  582,  594,
      594, 1422, 1424,  594,  594,  594,  594,  594,  594,  594,

      594,  594, 1427, 1428,  594,  594,  594,  594,  594,  594,
      594,  626,  626, 1429, 1431,  626,  626,  626,  626,  626,
      626,  626,  626,  626, 1432, 1432,  626,  626,  626,  626,
      626,  626,  626, 1435, 1436, 1437, 1438, 1439, 1441, 1442,
     1443, 1444, 1446, 1447, 1449, 1450, 1451, 1453,  627,  630,
      630, 1457, 1458,  630,  630,  630,  630,  630,  630,  630,
      630,  630, 1459, 1460,  630,  630,  630,  630,  630,  630,
      630,  634,  634, 1461, 1462,  634,  634,  634,  634,  634,
      634,  634,  634,  634, 1454, 1463,  634,  634,  634,  634,
      634,  634,  634, 1464, 1467, 1468,  635, 1469,  636, 1470,

     1455, 1471, 1472, 1475, 1477, 1478, 1480, 1481, 1482, 1483,
     1484, 1486,  637, 1488, 1489, 1490,  638,  642,  642, 1491,
     1493,  642,  642,  642,  642,  642,  642,  642,  642,  642,
     1495, 1497,  642,  642,  642,  642,  642,  642,  642,  646,
      646, 1499, 1500,  646,  646,  646,  646,  646,  646,  646,
      646,  646, 1501, 1502,  646,  646,  646,  646,  646,  646,
      646,  682,  682, 1505, 1506,  682,  682,  682,  682,  682,
      682,  682,  682,  682, 1511, 1512,  682,  682,  682,  682,
      682,  682,  682,  691,  691, 1513, 1514,  691,  691,  691,
      691,  691,  691,  691,  691,  691, 1515, 1516,  691,  691,

      691,  691,  691,  691,  691,  693,  693, 1517, 1521,  693,
      693,  693,  693,  693,  693,  693,  693,  693, 1523,  694,
      693,  693,  693,  693,  693,  693,  693,  705,  705, 1524,
     1525,  705,  705,  705,  705,  705,  705,  705,  705,  705,
     1526, 1526,  705,  705,  705,  705,  705,  705,  705,  706,
      706, 1528, 1529,  706,  706,  706,  706,  706,  706,  706,
      706,  706, 1530, 1533,  706,  706,  706,  706,  706,  706,
      706,  710,  710, 1534, 1535,  710,  710,  710,  710,  710,
      710,  710,  710,  710, 1536, 1540,  710,  710,  710,  710,
      710,  710,  710,  711,  712,  734,  734, 1541, 1542,  734,

      734,  734,  734,  734,  734,  734,  734,  734, 1543, 1544,
      734,  734,  734,  734,  734,  734,  734,  735,  744,  744,
     1545, 1546,  744,  744,  744,  744,  744,  744,  744,  744,
      744, 1547, 1550,  744,  744,  744,  744,  744,  744,  744,
     1518, 1551, 1552, 1553, 1519, 1554, 1555, 1557, 1558, 1560,
     1561, 1565, 1569, 1571, 1572, 1573, 1574, 1576,  745,  754,
      754, 1579, 1580,  754,  754,  754,  754,  754,  754,  754,
      754,  754, 1581, 1582,  754,  754,  754,  754,  754,  754,
      754,  755,  755, 1584, 1589,  755,  755,  755,  755,  755,
      755,  755,  755,  755, 1591, 1593,  755,  755,  755,  755,

      755,  755,  755,  759,  759, 1594, 1595,  759,  759,  759,
      759,  759,  759,  759,  759,  759, 1596, 1598,  759,  759,
      759,  759,  759,  759,  759, 1587, 1599, 1600, 1602, 1603,
     1588, 1607, 1608, 1609, 1610, 1611, 1613, 1617, 1620, 1621,
     1622, 1623, 1624, 1626, 1627, 1628,  760,  772,  772, 1632,
     1633,  772,  772,  772,  772,  772,  772,  772,  772,  772,
     1635, 1636,  772,  772,  772,  772,  772,  772,  772,  773,
      773, 1637, 1638,  773,  773,  773,  773,  773,  773,  773,
      773,  773, 1639, 1640,  773,  773,  773,  773,  773,  773,
      773,  776,  776, 1641, 1642,  776,  776,  776,  776,  776,

      776,  776,  776,  776, 1645, 1646,  776,  776,  776,  776,
      776,  776,  776,  780,  780, 1648, 1650,  780,  780,  780,
      780,  780,  780,  780,  780,  780, 1651, 1652,  780,  780,
      780,  780,  780,  780,  780, 1654, 1655, 1657, 1658, 1659,
     1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1672,
     1673, 1674, 1675, 1676,  781,  798,  798, 1677, 1678,  798,
      798,  798,  798,  798,  798,  798,  798,  798, 1682, 1685,
      798,  798,  798,  798,  798,  798,  798,  801,  801, 1686,
     1688,  801,  801,  801,  801,  801,  801,  801,  801,  801,
     1689, 1692,  801,  801,  801,  801,  801,  801,  801,  803,

      803, 1693, 1694,  803,  803,  803,  803,  803,  803,  803,
      803,  803, 1695, 1696,  803,  803,  803,  803,  803,  803,
      803,  806,  806, 1698, 1700,  806,  806,  806,  806,  806,
      806,  806,  806,  806, 1701, 1703,  806,  806,  806,  806,
      806,  806,  806,  810,  810, 1704, 1707,  810,  810,  810,
      810,  810,  810,  810,  810,  810, 1708, 1709,  810,  810,
      810,  810,  810,  810,  810,  824,  824, 1710, 1712,  824,
      824,  824,  824,  824,  824,  824,  824,  824, 1713, 1716,
      824,  824,  824,  824,  824,  824,  824,  826,  826, 1717,
     1719,  826,  826,  826,  826,  826,  826,  826,  826,  826,

     1721, 1723,  826,  826,  826,  826,  826,  826,  826,  827,
      827, 1724, 1725,  827,  827,  827,  827,  827,  827,  827,
      827,  827, 1726, 1730,  827,  827,  827,  827,  827,  827,
      827, 1732, 1733, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
      828,  831,  831, 1742, 1743,  831,  831,  831,  831,  831,
      831,  831,  831,  831, 1744, 1745,  831,  831,  831,  831,
      831,  831,  831,  832,  832, 1746, 1747,  832,  832,  832,
      832,  832,  832,  832,  832,  832, 1748, 1749,  832,  832,
      832,  832,  832,  832,  832,  833,  833, 1750, 1751,  833,
      833,  833,  833,  833,  833,  833,  833,  833, 1752, 1753,

      833,  833,  833,  833,  833,  833,  833,  839,  839, 1754,
     1755,  839,  839,  839,  839,  839,  839,  839,  839,  839,
     1756, 1757,  839,  839,  839,  839,  839,  839,  839,  854,
      854, 1758, 1759,  854,  854,  854,  854,  854,  854,  854,
      854,  854, 1760, 1761,  854,  854,  854,  854,  854,  854,
      854,  855,  855, 1762, 1763,  855,  855,  855,  855,  855,
      855,  855,  855,  855, 1764, 1765,  855,  855,  855,  855,
      855,  855,  855,  857,  857, 1766, 1767,  857,  857,  857,
      857,  857,  857,  857,  857,  857, 1768, 1769,  857,  857,
      857,  857,  857,  857,  857,  865,  865, 1770, 1771,  865,

      865,  865,  865,  865,  865,  865,  865,  865, 1772, 1773,
      865,  865,  865,  865,  865,  865,  865,  866,  866, 1774,
     1775,  866,  866,  866,  866,  866,  866,  866,  866,  866,
     1776, 1777,  866,  866,  866,  866,  866,  866,  866,  876,
      876, 1778, 1779,  876,  876,  876,  876,  876,  876,  876,
      876,  876,   75,  200,  876,  876,  876,  876,  876,  876,
      876,  877,  877, 1086, 1084,  877,  877,  877,  877,  877,
      877,  877,  877,  877, 1083, 1082,  877,  877,  877,  877,
      877,  877,  877,  879,  879, 1081, 1080,  879,  879,  879,
      879,  879,  879,  879,  879,  879, 1079, 1078,  879,  879,

      879,  879,  879,  879,  879,  885,  885, 1077, 1076,  885,
      885,  885,  885,  885,  885,  885,  885,  885, 1075, 1074,
      885,  885,  885,  885,  885,  885,  885,  892,  892, 1072,
     1071,  892,  892,  892,  892,  892,  892,  892,  892,  892,
     1070, 1069,  892,  892,  892,  892,  892,  892,  892,  893,
      893, 1068, 1067,  893,  893,  893,  893,  893,  893,  893,
      893,  893, 1066, 1065,  893,  893,  893,  893,  893,  893,
      893, 1064, 1063, 1060, 1059, 1058, 1057, 1054, 1049, 1048,
     1047, 1045, 1041, 1039, 1037, 1035, 1034, 1033, 1030, 1029,
      894, 1028, 1025, 1024, 1022, 1021, 1020,  895,  900,  900,

     1019, 1018,  900,  900,  900,  900,  900,  900,  900,  900,
      900, 1017, 1016,  900,  900,  900,  900,  900,  900,  900,
      909,  909, 1013, 1012,  909,  909,  909,  909,  909,  909,
      909,  909,  909, 1010, 1009,  909,  909,  909,  909,  909,
      909,  909,  916,  916, 1003, 1002,  916,  916,  916,  916,
      916,  916,  916,  916,  916, 1001, 1000,  916,  916,  916,
      916,  916,  916,  916,  917,  917,  999,  998,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  997,  996,  917,
      917,  917,  917,  917,  917,  917,  918,  918,  995,  994,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  993,

      992,  918,  918,  918,  918,  918,  918,  918,  991,  990,
      989,  988,  987,  919,  921,  921,  986,  985,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  984,  983,  921,
      921,  921,  921,  921,  921,  921,  923,  923,  982,  981,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  975,
      974,  923,  923,  923,  923,  923,  923,  923,  925,  925,
      973,  972,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  971,  970,  925,  925,  925,  925,  925,  925,  925,
      968,  967,  966,  965,  964,  963,  962,  961,  960,  959,
      957,  954,  953,  952,  951,  950,  949,  947,  946,  926,

      936,  936,  945,  944,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  942,  941,  936,  936,  936,  936,  936,
      936,  936,  937,  937,  940,  938,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  935,  934,  937,  937,  937,
      937,  937,  937,  937,  939,  939,  933,  930,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  929,  928,  939,
      939,  939,  939,  939,  939,  939,  943,  943,  924,  922,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  920,
      915,  943,  943,  943,  943,  943,  943,  943,  948,  948,
      914,  913,  948,  948,  948,  948,  948,  948,  948,  948,

      948,  912,  911,  948,  948,  948,  948,  948,  948,  948,
      955,  955,  910,  908,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  907,  906,  955,  955,  955,  955,  955,
      955,  955,  956,  956,  905,  904,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  903,  902,  956,  956,  956,
      956,  956,  956,  956,  958,  958,  901,  899,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  898,  897,  958,
      958,  958,  958,  958,  958,  958,  969,  969,  896,  891,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  890,
      889,  969,  969,  969,  969,  969,  969,  969, 1004, 1004,

      888,  887, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004,  886,  884, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1005, 1005,  883,  882, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005,  878,  875, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1006, 1006,  874,  873, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006,  872,  871, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1007, 1007,  870,  869, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007,  868,  867, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008,  864,  863,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,  862,

      861, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1011, 1011,
      860,  859, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011,  858,  856, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1014, 1014,  853,  852, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014,  851,  850, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1015, 1015,  849,  848, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015,  847,  846, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1023, 1023,  845,  844, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  843,  842, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1026, 1026,  841,  840,

     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,  838,
      837, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1027, 1027,
      836,  835, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027,  834,  830, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1036, 1036,  829,  825, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036,  823,  822, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1038, 1038,  821,  820, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038,  819,  818, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1040, 1040,  817,  814, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040,  813,  812, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1042, 1042,  811,  807,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,  805,
      804, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1043, 1043,
      802,  800, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043,  799,  797, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1044, 1044,  791,  790, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044,  789,  788, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1046, 1046,  787,  786, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046,  785,  784, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1050, 1050,  783,  782, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050,  779,  778, 1050,
     1050, 1050, 1050, 1050, 1050, 1050,  777,  775,  774,  771,
      770,  769,  768,  767,  766,  765,  764,  763,  762,  761,
      758,  757,  756,  753,  752, 1051, 1052, 1052,  751,  750,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,  749,
      748, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1053, 1053,
      747,  746, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053,  743,  742, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1055, 1055,  741,  740, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055,  739,  738, 1055, 1055, 1055, 1055, 1055,

     1055, 1055, 1056, 1056,  737,  736, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056,  733,  732, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1061, 1061,  731,  730, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061,  729,  728, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1062, 1062,  727,  726,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,  725,
      724, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1073, 1073,
      723,  722, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073,  721,  720, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1085, 1085,  719,  718, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085,  717,  716, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1087, 1087,  715,  714, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087,  713,  709, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1097, 1097,  708,  707, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097,  704,  703, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1102, 1102,  702,  701,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,  700,
      699, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1110, 1110,
      698,  697, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110,  696,  695, 1110, 1110, 1110, 1110, 1110, 1110, 1110,

     1116, 1116,  692,  690, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116,  689,  688, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1117, 1117,  681,  678, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1117,  677,  674, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1121, 1121,  671,  670, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1121,  669,  665, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1122, 1122,  664,  663,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,  662,
      661, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1123, 1123,
      660,  659, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,

     1123,  656,  653, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1124, 1124,  650,  649, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124,  648,  647, 1124, 1124, 1124, 1124, 1124,
     1124, 1124,  645,  641,  640,  639,  633,  632,  631,  629,
      628,  625,  624,  623,  620,  619,  618,  617,  616,  615,
      614, 1125, 1131, 1131,  613,  610, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131,  607,  606, 1131, 1131, 1131,
     1131, 1131, 1131, 1131,  605,  604,  595,  593,  592,  591,
      590,  589,  586,  585,  584,  583,  581,  580,  579,  578,
      575,  574,  573,  572,  571,  570,  569,  568,  562,  560,

      559, 1132, 1148, 1148,  558,  557, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148,  555,  554, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1150, 1150,  553,  552, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150,  551,  550, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1151, 1151,  549,  548,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,  547,
      545, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1156, 1156,
      544,  543, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156,  539,  538, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1162, 1162,  537,  536, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162,  533,  532, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1163, 1163,  531,  530, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163,  529,  528, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1165, 1165,  527,  526, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165,  525,  524, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1171, 1171,  523,  521,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,  520,
      519, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1174, 1174,
      518,  512, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174,  511,  510, 1174, 1174, 1174, 1174, 1174, 1174, 1174,

     1189, 1189,  506,  505, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189,  504,  503, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1198, 1198,  500,  499, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198,  498,  497, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1199, 1199,  493,  492, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199,  491,  490, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1201, 1201,  489,  483,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,  473,
      472, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1202, 1202,
      469,  459, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,

     1202,  458,  457, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
      456,  455,  454,  453,  452,  448,  445,  444,  443, 1203,
     1205, 1205,  442,  441, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205,  437,  436, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1211, 1211,  435,  429, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211,  423,  204, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1212, 1212,  202,  418, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212,  417,  416, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1215, 1215,  415,  414,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,  413,

      412, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216, 1216,
      411,  401, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216,  394,  393, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1222, 1222,  390,  387, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222,  384,  383, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1229, 1229,  379,  372, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229,  371,  368, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1231, 1231,  362,  359, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231,  355,  354, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1233, 1233,  352,  348,

     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,  347,
      338, 1233, 1233, 1233, 1233, 1233, 1233, 1233,  337,  330,
      329,  326,  319,  309,  306,  305,  304,  293,  292,  291,
      290,  289,  288,  283,  280,  279,  275, 1234, 1235, 1235,
      274,  273, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235,  272,  266, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1236, 1236,  265,  264, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236,  263,  249, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1239, 1239,  248,  238, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239,  230,  223, 1239, 1239, 1239,

     1239, 1239, 1239, 1239, 1242, 1242,  222,  215, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242,  208,  207, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1243, 1243,  204,   71,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,  202,
      199, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1246, 1246,
      195,  160, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246,  129,   71, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1256, 1256, 1780, 1780, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1780, 1780, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1260, 1260, 1780, 1780, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1780, 1780, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1263, 1263, 1780, 1780, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1780, 1780, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1265, 1265, 1780, 1780,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1780,
     1780, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1267, 1267,
     1780, 1780, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1780, 1780, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1268, 1268, 1780, 1780, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1780, 1780, 1268, 1268, 1268, 1268, 1268,

     1268, 1268, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1269, 1270, 1270, 1780, 1780, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1780, 1780, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1272, 1272, 1780, 1780, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1780, 1780, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1281, 1281, 1780, 1780,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1780,
     1780, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1290, 1290,
     1780, 1780, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1780, 1780, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1292, 1292, 1780, 1780, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1780, 1780, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1293, 1293, 1780, 1780, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1780, 1780, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1297, 1297, 1780, 1780, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1780, 1780, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1315, 1315, 1780, 1780,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1780,
     1780, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1317, 1317,

     1780, 1780, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1780, 1780, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1780, 1780, 1780, 1780, 1318, 1319, 1319, 1780, 1780, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1780, 1780,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320, 1780,
     1780, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1780, 1780, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1324,
     1324, 1780, 1780, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1780, 1780, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1326, 1326, 1780, 1780, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1780, 1780, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1327, 1327, 1780, 1780, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1780, 1780, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1328, 1331, 1331, 1780, 1780, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1780, 1780,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1333, 1333, 1780,
     1780, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1780, 1780, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1334,
     1334, 1780, 1780, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1780, 1780, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1335, 1336, 1336, 1780, 1780, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1780, 1780, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1345, 1345, 1780, 1780, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1780, 1780, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346, 1780, 1780,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1780,
     1780, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1347, 1347,
     1780, 1780, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1780, 1780, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1360, 1360, 1780, 1780, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1780, 1780, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1362, 1362, 1780, 1780, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1780, 1780, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1363, 1363, 1780, 1780, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1780, 1780, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364, 1780, 1780,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1780,
     1780, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1369, 1369,
     1780, 1780, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1780, 1780, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1373, 1373, 1780, 1780, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1780, 1780, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1377, 1377, 1780, 1780, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1780, 1780, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1384, 1384, 1780, 1780, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1780, 1780, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1387, 1387, 1780, 1780,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1780,
     1780, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1391, 1391,

     1780, 1780, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1780, 1780, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1393, 1393, 1780, 1780, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1780, 1780, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1396, 1396, 1780, 1780, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1780, 1780, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1397, 1397, 1780, 1780, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1780, 1780, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1400, 1400, 1780, 1780,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1780,

     1780, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1406, 1406,
     1780, 1780, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1780, 1780, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1408, 1408, 1780, 1780, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1780, 1780, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1413, 1413, 1780, 1780, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1780, 1780, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1414, 1418, 1418, 1780, 1780, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1780, 1780,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1780,

     1780, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1780, 1780, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1423,
     1423, 1780, 1780, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1780, 1780, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1425, 1425, 1780, 1780, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1780, 1780, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1426, 1426, 1780, 1780, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1780, 1780, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1430, 1430, 1780, 1780, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1780, 1780,

     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1433, 1433, 1780,
     1780, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1780, 1780, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1434,
     1434, 1780, 1780, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1780, 1780, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1440, 1440, 1780, 1780, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1780, 1780, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1445, 1445, 1780, 1780, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1780, 1780, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1448, 1448, 1780, 1780, 1448,

     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1780, 1780,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1452, 1452, 1780,
     1780, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1780, 1780, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1456,
     1456, 1780, 1780, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1780, 1780, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1465, 1465, 1780, 1780, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1780, 1780, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1466, 1466, 1780, 1780, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1780, 1780, 1466, 1466,

     1466, 1466, 1466, 1466, 1466, 1473, 1473, 1780, 1780, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1780, 1780,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1780,
     1780, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1780, 1780, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1476,
     1476, 1780, 1780, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1780, 1780, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1479, 1479, 1780, 1780, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1780, 1780, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1485, 1485, 1780, 1780, 1485, 1485, 1485,

     1485, 1485, 1485, 1485, 1485, 1485, 1780, 1780, 1485, 1485,
     1485, 1485, 1485, 1485, 1485, 1487, 1487, 1780, 1780, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1780, 1780,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1492, 1492, 1780,
     1780, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1780, 1780, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1494,
     1494, 1780, 1780, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1780, 1780, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1496, 1496, 1780, 1780, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1780, 1780, 1496, 1496, 1496, 1496,

     1496, 1496, 1496, 1498, 1498, 1780, 1780, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1780, 1780, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1503, 1503, 1780, 1780, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1780, 1780,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1504, 1504, 1780,
     1780, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1780, 1780, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1507,
     1507, 1780, 1780, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1780, 1780, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1508, 1508, 1780, 1780, 1508, 1508, 1508, 1508, 1508,

     1508, 1508, 1508, 1508, 1780, 1780, 1508, 1508, 1508, 1508,
     1508, 1508, 1508, 1509, 1509, 1780, 1780, 1509, 1509, 1509,
     1509, 1509, 1509, 1509, 1509, 1509, 1780, 1780, 1509, 1509,
     1509, 1509, 1509, 1509, 1509, 1510, 1510, 1780, 1780, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1780, 1780,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1520, 1520, 1780,
     1780, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1780, 1780, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1522,
     1522, 1780, 1780, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1780, 1780, 1522, 1522, 1522, 1522, 1522, 1522,

     1522, 1527, 1527, 1780, 1780, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1780, 1780, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1531, 1531, 1780, 1780, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1780, 1780, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1532, 1532, 1780, 1780, 1532,
     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1780, 1780,
     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1537, 1537, 1780,
     1780, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1780, 1780, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538,
     1539, 1539, 1780, 1780, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1780, 1780, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1548, 1548, 1780, 1780, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1780, 1780, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1549, 1549, 1780, 1780, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1780, 1780, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1556, 1556, 1780, 1780,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1780,
     1780, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1559, 1559,
     1780, 1780, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1780, 1780, 1559, 1559, 1559, 1559, 1559, 1559, 1559,

     1562, 1562, 1780, 1780, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1780, 1780, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1563, 1563, 1780, 1780, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1780, 1780, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1564, 1564, 1780, 1780, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1780, 1780, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1566, 1566, 1780, 1780,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1780,
     1780, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1567, 1568, 1568,

     1780, 1780, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1780, 1780, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1570, 1570, 1780, 1780, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1780, 1780, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1575, 1575, 1780, 1780, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1780, 1780, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1577, 1577, 1780, 1780, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1780, 1780, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1578, 1578, 1780, 1780,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1780,

     1780, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1583, 1583,
     1780, 1780, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1780, 1780, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1585, 1585, 1780, 1780, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1780, 1780, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1586, 1586, 1780, 1780, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1780, 1780, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1590, 1590, 1780, 1780, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1780, 1780, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1592, 1592, 1780, 1780,

     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1780,
     1780, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1597, 1597,
     1780, 1780, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1780, 1780, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1601, 1601, 1780, 1780, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1780, 1780, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1604, 1604, 1780, 1780, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1780, 1780, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1605, 1605, 1780, 1780, 1605, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1780, 1780, 1605,

     1605, 1605, 1605, 1605, 1605, 1605, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1606, 1612, 1612, 1780, 1780,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1780,
     1780, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1614, 1614,
     1780, 1780, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1780, 1780, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1615, 1615, 1780, 1780, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1780, 1780, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1616, 1616, 1780, 1780, 1616, 1616, 1616, 1616,

     1616, 1616, 1616, 1616, 1616, 1780, 1780, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1618, 1618, 1780, 1780, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1780, 1780, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1619, 1619, 1780, 1780,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1780,
     1780, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1625, 1625,
     1780, 1780, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1780, 1780, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1629, 1629, 1780, 1780, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1780, 1780, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1630, 1630, 1780, 1780, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1780, 1780, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1631, 1631, 1780, 1780, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1780, 1780, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1634, 1634, 1780, 1780,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1780,
     1780, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1643, 1643,
     1780, 1780, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1780, 1780, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1644, 1644, 1780, 1780, 1644, 1644, 1644, 1644, 1644, 1644,

     1644, 1644, 1644, 1780, 1780, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1647, 1647, 1780, 1780, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1780, 1780, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1649, 1649, 1780, 1780, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1780, 1780, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1653, 1653, 1780, 1780,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1780,
     1780, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1656, 1656,
     1780, 1780, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1780, 1780, 1656, 1656, 1656, 1656, 1656, 1656, 1656,

     1660, 1660, 1780, 1780, 1660, 1660, 1660, 1660, 1660, 1660,
     1660, 1660, 1660, 1780, 1780, 1660, 1660, 1660, 1660, 1660,
     1660, 1660, 1670, 1670, 1780, 1780, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1780, 1780, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1671, 1671, 1780, 1780, 1671, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1780, 1780, 1671,
     1671, 1671, 1671, 1671, 1671, 1671, 1679, 1679, 1780, 1780,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1780,
     1780, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1680, 1680,
     1780, 1780, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,

     1680, 1780, 1780, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1681,
     1683, 1683, 1780, 1780, 1683, 1683, 1683, 1683, 1683, 1683,
     1683, 1683, 1683, 1780, 1780, 1683, 1683, 1683, 1683, 1683,
     1683, 1683, 1684, 1684, 1780, 1780, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1684, 1780, 1780, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1687, 1687, 1780, 1780, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1780, 1780, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1690, 1690, 1780, 1780,

     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1780,
     1780, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1691, 1691,
     1780, 1780, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1780, 1780, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1697, 1697, 1780, 1780, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1780, 1780, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1699, 1699, 1780, 1780, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1780, 1780, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1702, 1702, 1780, 1780, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1780, 1780, 1702,

     1702, 1702, 1702, 1702, 1702, 1702, 1705, 1705, 1780, 1780,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1780,
     1780, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1706, 1706,
     1780, 1780, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706,
     1706, 1780, 1780, 1706, 1706, 1706, 1706, 1706, 1706, 1706,
     1711, 1711, 1780, 1780, 1711, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1711, 1780, 1780, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1714, 1714, 1780, 1780, 1714, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1780, 1780, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1715, 1715, 1780, 1780, 1715, 1715,

     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1780, 1780, 1715,
     1715, 1715, 1715, 1715, 1715, 1715, 1718, 1718, 1780, 1780,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1780,
     1780, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1720, 1720,
     1780, 1780, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1720, 1780, 1780, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1722, 1722, 1780, 1780, 1722, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1780, 1780, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1727, 1727, 1780, 1780, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1780, 1780, 1727, 1727, 1727,

     1727, 1727, 1727, 1727, 1728, 1728, 1780, 1780, 1728, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1780, 1780, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1729, 1729, 1780, 1780,
     1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1780,
     1780, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1731, 1731,
     1780, 1780, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1731, 1780, 1780, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1734, 1734, 1780, 1780, 1734, 1734, 1734, 1734, 1734, 1734,
     1734, 1734, 1734, 1780, 1780, 1734, 1734, 1734, 1734, 1734,
     1734, 1734,    8,    8,    8,    8,   69,   69, 1780,   69,

       70,   70,   70,   70,  201, 1780,  201,  201,  203,  203,
      203,  203,    7, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780
    } ;

static yyconst flex_int16_t yy_chk[7966] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    9,    9,    3,    3,    3,    3,
        3,    3,    3,   33,    3,   21,   21,    3,    3,    3,
        3,    3,    3,    3,    4,    4,  241,   33,    4,    4,
        4,    4,    4,    4,    4,  241,    4,   51,   51,    4,
        4,    4,    4,    4,    4,    4,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   18,  177,   35,   18,   18,   26,   26,   26,
       35,   62,   62,   79,   47,  177,   27,   26,   47,   26,
       27,   79,   47,   26,   26,   26,   26,   26,   28,   27,
       29,  868,   28,   32,   29,   28,   27,   92,   29,   28,
       32,   92,   28,   32,   29,   28,   32,   29,   28,   30,
       30,   68,   68,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   73,   73,   30,   30,   30,   30,   30,   30,
       30,   34,   91,   34,   34,   74,   74,   91,   80,   78,

       34,   34,   78,   30,  100,   30,   34,   86,   86,   37,
       30,   37,  100,   37,  182,   30,   31,   37,   38,   80,
       31,   86,  112,   37,   31,  112,   38,   31,   37,   31,
       31,   46,   38,   31,  182,   39,   31,   39,   38,   39,
       90,   90,   46,   97,   46,   87,   43,   46,   97,   39,
       43,  869,   87,  137,   43,   39,   40,   40,   87,   40,
       43,   43,   41,  130,  137,   43,   41,   40,  130,   40,
       41,   40,  115,   41,   40,   40,   41,   48,  115,   41,
       48,   48,   41,   44,  118,   44,  138,   48,   44,   44,
       48,  870,   99,   44,   99,   44,  138,   44,  118,   45,

       44,   44,  106,   45,  106,   44,   45,   45,  106,   99,
       99,  133,  160,   45,  133,  106,   45,   82,   82,  106,
      160,   82,   82,   82,   82,   82,   82,   82,   82,   82,
      144,  144,   82,   82,   82,   82,   82,   82,   82,   98,
      149,   98,   82,  136,   98,  132,  173,  136,   82,  140,
       98,  164,  173,  132,  871,  149,  140,   98,   82,   83,
       83,  132,  164,   83,   83,   83,   83,   83,   83,   83,
       83,   83,  196,  196,   83,   83,   83,   83,   83,   83,
       83,  872,   83,   89,   89,  153,  873,   89,   89,   89,
       89,   89,   89,   89,   89,   89,  153,  153,   89,   89,

       89,   89,   89,   89,   89,   94,   94,  184,  134,  184,
      158,  167,  134,  402,  158,  402,   94,   94,   94,  134,
      158,  167,   94,   94,   94,   94,  111,  111,  134,  175,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  185,
      175,  111,  111,  111,  111,  111,  111,  111,  117,  117,
      874,  185,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  143,  347,  117,  117,  117,  117,  117,  117,  117,
      168,  143,  187,  347,  170,  180,  222,  143,  187,  168,
      143,  170,  180,  222,  168,  202,  202,  168,  205,  205,
      117,  125,  125,  170,  875,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      126,  126,  206,  206,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  358,  358,  126,  126,  126,  126,  126,
      126,  126,  186,  232,  242,  232,  186,  242,  250,  254,
      186,  296,  250,  254,  365,  296,  878,  126,  147,  147,
      232,  365,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  271,  260,  147,  147,  147,  147,  147,  147,  147,

      881,  357,  882,  357,  271,  260,  147,  148,  148,  260,
      357,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      243,  275,  148,  148,  148,  148,  148,  148,  148,  390,
      363,  243,  398,  398,  374,  275,  243,  243,  363,  243,
      883,  148,  150,  150,  374,  390,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  400,  541,  150,  150,  150,
      150,  150,  150,  150,  400,  542,  542,  541,  150,  155,
      155,  410,  410,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  884,  249,  155,  155,  155,  155,  155,  155,
      155,  162,  356,  555,  410,  416,  162,  249,  249,  249,

      414,  555,  416,  539,  414,  356,  162,  539,  356,  162,
      564,  564,  162,  181,  181,  679,  679,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  680,  680,  181,  181,
      181,  181,  181,  181,  181,  181,  207,  207,  735,  887,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  635,
      735,  207,  207,  207,  207,  207,  207,  207,  420,  685,
      420,  420,  420,  635,  795,  685,  888,  795,  889,  890,
      890,  891,  894,  207,  209,  209,  895,  897,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  898,  899,  209,
      209,  209,  209,  209,  209,  209,  210,  210,  901,  899,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  904,
      905,  210,  210,  210,  210,  210,  210,  210,  210,  211,
      211,  906,  912,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  736,  913,  211,  211,  211,  211,  211,  211,
      211,  914,  736,  915,  736,  919,  922,  924,  926,  927,
      927,  928,  929,  930,  931,  932,  211,  213,  213,  933,
      934,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      935,  938,  213,  213,  213,  213,  213,  213,  213,  214,
      214,  940,  941,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  944,  947,  214,  214,  214,  214,  214,  214,

      214,  215,  215,  949,  950,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  951,  953,  215,  215,  215,  215,
      215,  215,  215,  217,  217,  954,  957,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  962,  964,  217,  217,
      217,  217,  217,  217,  217,  959,  965,  966,  967,  959,
      968,  971,  972,  974,  217,  223,  223,  975,  976,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  977,  978,
      223,  223,  223,  223,  223,  223,  223,  229,  229,  979,
      980,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      981,  982,  229,  229,  229,  229,  229,  229,  229,  229,

      245,  245,  983,  984,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  985,  989,  245,  245,  245,  245,  245,
      245,  245,  246,  246,  990,  991,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  992,  993,  246,  246,  246,
      246,  246,  246,  246,  251,  251,  994,  997,  251,  251,
      251,  251,  251,  251,  251,  251,  251, 1000,  988,  251,
      251,  251,  251,  251,  251,  251,  986,  426, 1002, 1003,
      986,  426,  988, 1009, 1010, 1012,  426, 1017, 1018, 1021,
     1022,  251,  426, 1024, 1025,  251,  253,  253,  426, 1028,
      253,  253,  253,  253,  253,  253,  253,  253,  253, 1030,

     1031,  253,  253,  253,  253,  253,  253,  253, 1032, 1033,
     1034, 1035, 1039, 1045, 1051, 1054, 1058,  253, 1059, 1064,
      253,  265,  265, 1065, 1067,  265,  265,  265,  265,  265,
      265,  265,  265,  265, 1068, 1069,  265,  265,  265,  265,
      265,  265,  265,  265,  270,  270, 1070, 1071,  270,  270,
      270,  270,  270,  270,  270,  270,  270, 1072, 1074,  270,
      270,  270,  270,  270,  270,  270,  277,  277, 1075, 1076,
      277,  277,  277,  277,  277,  277,  277,  277,  277, 1078,
     1079,  277,  277,  277,  277,  277,  277,  277, 1080, 1082,
     1083, 1086, 1089,  277, 1093, 1095, 1096, 1098, 1099, 1100,

     1101, 1103, 1104, 1107, 1108, 1109, 1111, 1112,  277,  282,
      282, 1113, 1114,  282,  282,  282,  282,  282,  282,  282,
      282,  282, 1115, 1119,  282,  282,  282,  282,  282,  282,
      282,  301,  301, 1126, 1127,  301,  301,  301,  301,  301,
      301,  301,  301,  301, 1128, 1130,  301,  301,  301,  301,
      301,  301,  301, 1132, 1133, 1134, 1135, 1136,  301, 1136,
     1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,  301,  306,
      306, 1145, 1146,  306,  306,  306,  306,  306,  306,  306,
      306,  306, 1147, 1152,  306,  306,  306,  306,  306,  306,
      306,  316,  316, 1157, 1158,  316,  316,  316,  316,  316,

      316,  316,  316,  316, 1159, 1161,  316,  316,  316,  316,
      316,  316,  316,  321,  321, 1167, 1168,  321,  321,  321,
      321,  321,  321,  321,  321,  321, 1170, 1176,  321,  321,
      321,  321,  321,  321,  321,  323,  323, 1177, 1178,  323,
      323,  323,  323,  323,  323,  323,  323,  323, 1179, 1180,
      323,  323,  323,  323,  323,  323,  323, 1181, 1182, 1183,
     1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
     1200, 1203, 1206, 1210, 1213, 1214, 1217, 1219,  323,  324,
      324, 1220, 1221,  324,  324,  324,  324,  324,  324,  324,
      324,  324, 1224, 1225,  324,  324,  324,  324,  324,  324,

      324, 1226, 1228, 1230, 1232, 1234, 1237, 1238, 1241, 1244,
      324, 1247, 1248, 1249, 1251, 1253, 1254, 1258, 1259, 1262,
     1264, 1266,  324,  333,  333, 1269, 1271,  333,  333,  333,
      333,  333,  333,  333,  333,  333, 1274, 1276,  333,  333,
      333,  333,  333,  333,  333,  334,  334, 1277, 1278,  334,
      334,  334,  334,  334,  334,  334,  334,  334, 1279, 1282,
      334,  334,  334,  334,  334,  334,  334,  340,  340, 1283,
     1284,  340,  340,  340,  340,  340,  340,  340,  340,  340,
     1287, 1288,  340,  340,  340,  340,  340,  340,  340,  354,
      354, 1289, 1294,  354,  354,  354,  354,  354,  354,  354,

      354,  354, 1298, 1299,  354,  354,  354,  354,  354,  354,
      354,  378,  378, 1300, 1302,  378,  378,  378,  378,  378,
      378,  378,  378,  378, 1303, 1303,  378,  378,  378,  378,
      378,  378,  378, 1306, 1307, 1308, 1309, 1310, 1312, 1313,
     1314, 1316, 1321, 1322, 1325, 1328, 1329, 1332,  378,  381,
      381, 1338, 1339,  381,  381,  381,  381,  381,  381,  381,
      381,  381, 1340, 1341,  381,  381,  381,  381,  381,  381,
      381,  385,  385, 1342, 1343,  385,  385,  385,  385,  385,
      385,  385,  385,  385, 1335, 1344,  385,  385,  385,  385,
      385,  385,  385, 1348, 1351, 1352,  385, 1353,  385, 1354,

     1335, 1355, 1356, 1359, 1365, 1366, 1368, 1370, 1371, 1372,
     1374, 1376,  385, 1379, 1380, 1381,  385,  389,  389, 1382,
     1385,  389,  389,  389,  389,  389,  389,  389,  389,  389,
     1388, 1390,  389,  389,  389,  389,  389,  389,  389,  392,
      392, 1394, 1395,  392,  392,  392,  392,  392,  392,  392,
      392,  392, 1398, 1399,  392,  392,  392,  392,  392,  392,
      392,  423,  423, 1403, 1404,  423,  423,  423,  423,  423,
      423,  423,  423,  423, 1411, 1412,  423,  423,  423,  423,
      423,  423,  423,  435,  435, 1414, 1415,  435,  435,  435,
      435,  435,  435,  435,  435,  435, 1416, 1417,  435,  435,

      435,  435,  435,  435,  435,  437,  437, 1420, 1424,  437,
      437,  437,  437,  437,  437,  437,  437,  437, 1428,  437,
      437,  437,  437,  437,  437,  437,  437,  450,  450, 1429,
     1431,  450,  450,  450,  450,  450,  450,  450,  450,  450,
     1432, 1432,  450,  450,  450,  450,  450,  450,  450,  451,
      451, 1436, 1437,  451,  451,  451,  451,  451,  451,  451,
      451,  451, 1438, 1442,  451,  451,  451,  451,  451,  451,
      451,  455,  455, 1443, 1444,  455,  455,  455,  455,  455,
      455,  455,  455,  455, 1446, 1450,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  479,  479, 1451, 1453,  479,

      479,  479,  479,  479,  479,  479,  479,  479, 1454, 1455,
      479,  479,  479,  479,  479,  479,  479,  479,  490,  490,
     1457, 1458,  490,  490,  490,  490,  490,  490,  490,  490,
      490, 1459, 1462,  490,  490,  490,  490,  490,  490,  490,
     1421, 1463, 1464, 1467, 1421, 1468, 1469, 1471, 1472, 1477,
     1478, 1483, 1488, 1490, 1491, 1493, 1495, 1499,  490,  499,
      499, 1502, 1505,  499,  499,  499,  499,  499,  499,  499,
      499,  499, 1506, 1511,  499,  499,  499,  499,  499,  499,
      499,  500,  500, 1513, 1517,  500,  500,  500,  500,  500,
      500,  500,  500,  500, 1519, 1523,  500,  500,  500,  500,

      500,  500,  500,  505,  505, 1524, 1525,  505,  505,  505,
      505,  505,  505,  505,  505,  505, 1528, 1530,  505,  505,
      505,  505,  505,  505,  505, 1516, 1533, 1534, 1536, 1538,
     1516, 1542, 1543, 1544, 1545, 1546, 1550, 1554, 1558, 1560,
     1561, 1565, 1567, 1571, 1572, 1573,  505,  519,  519, 1580,
     1581,  519,  519,  519,  519,  519,  519,  519,  519,  519,
     1584, 1587,  519,  519,  519,  519,  519,  519,  519,  520,
      520, 1588, 1589,  520,  520,  520,  520,  520,  520,  520,
      520,  520, 1591, 1593,  520,  520,  520,  520,  520,  520,
      520,  524,  524, 1594, 1595,  524,  524,  524,  524,  524,

      524,  524,  524,  524, 1599, 1600,  524,  524,  524,  524,
      524,  524,  524,  528,  528, 1603, 1607,  528,  528,  528,
      528,  528,  528,  528,  528,  528, 1608, 1609,  528,  528,
      528,  528,  528,  528,  528, 1611, 1613, 1620, 1621, 1622,
     1624, 1626, 1627, 1628, 1632, 1633, 1635, 1636, 1637, 1640,
     1641, 1642, 1645, 1646,  528,  544,  544, 1648, 1650,  544,
      544,  544,  544,  544,  544,  544,  544,  544, 1654, 1658,
      544,  544,  544,  544,  544,  544,  544,  548,  548, 1659,
     1662,  548,  548,  548,  548,  548,  548,  548,  548,  548,
     1663, 1666,  548,  548,  548,  548,  548,  548,  548,  550,

      550, 1667, 1668,  550,  550,  550,  550,  550,  550,  550,
      550,  550, 1669, 1672,  550,  550,  550,  550,  550,  550,
      550,  553,  553, 1674, 1676,  553,  553,  553,  553,  553,
      553,  553,  553,  553, 1677, 1681,  553,  553,  553,  553,
      553,  553,  553,  557,  557, 1682, 1688,  557,  557,  557,
      557,  557,  557,  557,  557,  557, 1689, 1692,  557,  557,
      557,  557,  557,  557,  557,  573,  573, 1693, 1695,  573,
      573,  573,  573,  573,  573,  573,  573,  573, 1696, 1701,
      573,  573,  573,  573,  573,  573,  573,  575,  575, 1703,
     1707,  575,  575,  575,  575,  575,  575,  575,  575,  575,

     1709, 1712,  575,  575,  575,  575,  575,  575,  575,  578,
      578, 1713, 1716,  578,  578,  578,  578,  578,  578,  578,
      578,  578, 1717, 1724,  578,  578,  578,  578,  578,  578,
      578, 1726, 1730, 1733, 1735, 1736, 1737, 1738, 1739, 1740,
      578,  581,  581, 1741, 1742,  581,  581,  581,  581,  581,
      581,  581,  581,  581, 1743, 1744,  581,  581,  581,  581,
      581,  581,  581,  583,  583, 1745, 1746,  583,  583,  583,
      583,  583,  583,  583,  583,  583, 1747, 1748,  583,  583,
      583,  583,  583,  583,  583,  584,  584, 1749, 1750,  584,
      584,  584,  584,  584,  584,  584,  584,  584, 1751, 1752,

      584,  584,  584,  584,  584,  584,  584,  590,  590, 1753,
     1754,  590,  590,  590,  590,  590,  590,  590,  590,  590,
     1755, 1756,  590,  590,  590,  590,  590,  590,  590,  606,
      606, 1757, 1758,  606,  606,  606,  606,  606,  606,  606,
      606,  606, 1759, 1760,  606,  606,  606,  606,  606,  606,
      606,  607,  607, 1761, 1762,  607,  607,  607,  607,  607,
      607,  607,  607,  607, 1763, 1764,  607,  607,  607,  607,
      607,  607,  607,  609,  609, 1765, 1766,  609,  609,  609,
      609,  609,  609,  609,  609,  609, 1767, 1768,  609,  609,
      609,  609,  609,  609,  609,  617,  617, 1769, 1770,  617,

      617,  617,  617,  617,  617,  617,  617,  617, 1771, 1772,
      617,  617,  617,  617,  617,  617,  617,  618,  618, 1773,
     1774,  618,  618,  618,  618,  618,  618,  618,  618,  618,
     1775, 1776,  618,  618,  618,  618,  618,  618,  618,  629,
      629, 1777, 1778,  629,  629,  629,  629,  629,  629,  629,
      629,  629, 1784, 1785,  629,  629,  629,  629,  629,  629,
      629,  631,  631,  864,  862,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  861,  860,  631,  631,  631,  631,
      631,  631,  631,  633,  633,  859,  858,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  856,  853,  633,  633,

      633,  633,  633,  633,  633,  639,  639,  852,  851,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  850,  849,
      639,  639,  639,  639,  639,  639,  639,  648,  648,  847,
      846,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      845,  844,  648,  648,  648,  648,  648,  648,  648,  649,
      649,  843,  842,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  841,  840,  649,  649,  649,  649,  649,  649,
      649,  838,  837,  834,  830,  829,  828,  822,  818,  817,
      816,  814,  809,  807,  804,  800,  799,  797,  794,  793,
      649,  792,  789,  788,  786,  785,  784,  649,  654,  654,

      783,  782,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  781,  779,  654,  654,  654,  654,  654,  654,  654,
      663,  663,  775,  774,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  770,  769,  663,  663,  663,  663,  663,
      663,  663,  670,  670,  763,  762,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  761,  760,  670,  670,  670,
      670,  670,  670,  670,  671,  671,  758,  757,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  756,  753,  671,
      671,  671,  671,  671,  671,  671,  672,  672,  752,  751,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  750,

      749,  672,  672,  672,  672,  672,  672,  672,  748,  747,
      746,  745,  743,  672,  674,  674,  742,  741,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  740,  739,  674,
      674,  674,  674,  674,  674,  674,  676,  676,  738,  737,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  733,
      732,  676,  676,  676,  676,  676,  676,  676,  678,  678,
      731,  730,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  729,  728,  678,  678,  678,  678,  678,  678,  678,
      726,  725,  724,  723,  722,  721,  720,  719,  718,  717,
      715,  712,  711,  709,  708,  707,  704,  702,  701,  678,

      689,  689,  700,  699,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  697,  696,  689,  689,  689,  689,  689,
      689,  689,  690,  690,  695,  692,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  688,  687,  690,  690,  690,
      690,  690,  690,  690,  694,  694,  686,  684,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  683,  681,  694,
      694,  694,  694,  694,  694,  694,  698,  698,  677,  675,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  673,
      669,  698,  698,  698,  698,  698,  698,  698,  703,  703,
      668,  667,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  666,  665,  703,  703,  703,  703,  703,  703,  703,
      713,  713,  664,  662,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  661,  660,  713,  713,  713,  713,  713,
      713,  713,  714,  714,  659,  658,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  657,  656,  714,  714,  714,
      714,  714,  714,  714,  716,  716,  655,  653,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  652,  651,  716,
      716,  716,  716,  716,  716,  716,  727,  727,  650,  647,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  645,
      644,  727,  727,  727,  727,  727,  727,  727,  764,  764,

      643,  641,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  640,  638,  764,  764,  764,  764,  764,  764,  764,
      765,  765,  637,  636,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  632,  628,  765,  765,  765,  765,  765,
      765,  765,  766,  766,  627,  625,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  624,  623,  766,  766,  766,
      766,  766,  766,  766,  767,  767,  622,  621,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  620,  619,  767,
      767,  767,  767,  767,  767,  767,  768,  768,  616,  615,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  614,

      613,  768,  768,  768,  768,  768,  768,  768,  771,  771,
      612,  611,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  610,  608,  771,  771,  771,  771,  771,  771,  771,
      777,  777,  605,  604,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  603,  602,  777,  777,  777,  777,  777,
      777,  777,  778,  778,  601,  600,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  599,  598,  778,  778,  778,
      778,  778,  778,  778,  787,  787,  597,  596,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  595,  593,  787,
      787,  787,  787,  787,  787,  787,  790,  790,  592,  591,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  589,
      588,  790,  790,  790,  790,  790,  790,  790,  791,  791,
      587,  586,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  585,  580,  791,  791,  791,  791,  791,  791,  791,
      802,  802,  579,  574,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  572,  571,  802,  802,  802,  802,  802,
      802,  802,  805,  805,  570,  569,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  568,  567,  805,  805,  805,
      805,  805,  805,  805,  808,  808,  566,  562,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  560,  559,  808,

      808,  808,  808,  808,  808,  808,  811,  811,  558,  554,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  552,
      551,  811,  811,  811,  811,  811,  811,  811,  812,  812,
      549,  547,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  545,  543,  812,  812,  812,  812,  812,  812,  812,
      813,  813,  538,  537,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  536,  535,  813,  813,  813,  813,  813,
      813,  813,  815,  815,  534,  533,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  532,  531,  815,  815,  815,
      815,  815,  815,  815,  819,  819,  530,  529,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  527,  526,  819,
      819,  819,  819,  819,  819,  819,  525,  523,  521,  518,
      517,  516,  514,  513,  512,  511,  510,  509,  508,  506,
      504,  503,  502,  498,  497,  819,  820,  820,  496,  495,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  494,
      493,  820,  820,  820,  820,  820,  820,  820,  821,  821,
      492,  491,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  489,  488,  821,  821,  821,  821,  821,  821,  821,
      823,  823,  487,  486,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  485,  483,  823,  823,  823,  823,  823,

      823,  823,  825,  825,  482,  481,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  478,  477,  825,  825,  825,
      825,  825,  825,  825,  835,  835,  476,  475,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  474,  473,  835,
      835,  835,  835,  835,  835,  835,  836,  836,  472,  469,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  468,
      467,  836,  836,  836,  836,  836,  836,  836,  848,  848,
      466,  465,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  464,  463,  848,  848,  848,  848,  848,  848,  848,
      863,  863,  462,  461,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  460,  459,  863,  863,  863,  863,  863,
      863,  863,  867,  867,  458,  457,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  456,  454,  867,  867,  867,
      867,  867,  867,  867,  880,  880,  453,  452,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  449,  448,  880,
      880,  880,  880,  880,  880,  880,  886,  886,  447,  445,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  444,
      443,  886,  886,  886,  886,  886,  886,  886,  896,  896,
      442,  441,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  439,  438,  896,  896,  896,  896,  896,  896,  896,

      902,  902,  436,  434,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  429,  428,  902,  902,  902,  902,  902,
      902,  902,  903,  903,  422,  418,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  417,  415,  903,  903,  903,
      903,  903,  903,  903,  907,  907,  413,  412,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  411,  409,  907,
      907,  907,  907,  907,  907,  907,  908,  908,  408,  407,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  406,
      405,  908,  908,  908,  908,  908,  908,  908,  910,  910,
      404,  403,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  401,  399,  910,  910,  910,  910,  910,  910,  910,
      911,  911,  396,  395,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  394,  393,  911,  911,  911,  911,  911,
      911,  911,  391,  388,  387,  386,  384,  383,  382,  380,
      379,  377,  376,  375,  373,  372,  371,  370,  369,  368,
      367,  911,  920,  920,  366,  364,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  362,  361,  920,  920,  920,
      920,  920,  920,  920,  360,  359,  355,  352,  351,  350,
      349,  348,  346,  344,  343,  342,  338,  337,  336,  335,
      332,  331,  330,  329,  328,  327,  326,  325,  322,  320,

      319,  920,  942,  942,  318,  317,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  315,  314,  942,  942,  942,
      942,  942,  942,  942,  945,  945,  313,  312,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  311,  310,  945,
      945,  945,  945,  945,  945,  945,  946,  946,  309,  308,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  307,
      305,  946,  946,  946,  946,  946,  946,  946,  952,  952,
      304,  303,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  300,  299,  952,  952,  952,  952,  952,  952,  952,
      960,  960,  298,  297,  960,  960,  960,  960,  960,  960,

      960,  960,  960,  295,  293,  960,  960,  960,  960,  960,
      960,  960,  961,  961,  292,  291,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  290,  289,  961,  961,  961,
      961,  961,  961,  961,  963,  963,  288,  287,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  286,  285,  963,
      963,  963,  963,  963,  963,  963,  970,  970,  283,  281,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  280,
      279,  970,  970,  970,  970,  970,  970,  970,  973,  973,
      278,  274,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  273,  272,  973,  973,  973,  973,  973,  973,  973,

      987,  987,  269,  268,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  267,  266,  987,  987,  987,  987,  987,
      987,  987,  995,  995,  264,  263,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  262,  261,  995,  995,  995,
      995,  995,  995,  995,  996,  996,  259,  258,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  257,  256,  996,
      996,  996,  996,  996,  996,  996,  998,  998,  255,  252,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  248,
      247,  998,  998,  998,  998,  998,  998,  998,  999,  999,
      244,  240,  999,  999,  999,  999,  999,  999,  999,  999,

      999,  239,  238,  999,  999,  999,  999,  999,  999,  999,
      237,  236,  235,  234,  233,  230,  228,  227,  226,  999,
     1001, 1001,  225,  224, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001,  221,  219, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1013, 1013,  218,  212, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013,  208,  203, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1016, 1016,  201,  195, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016,  194,  193, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1019, 1019,  192,  191,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,  190,

      189, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 1020,
      188,  183, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020,  179,  178, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1029, 1029,  176,  174, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029,  172,  171, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1037, 1037,  169,  166, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037,  165,  163, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1041, 1041,  161,  159, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041,  157,  156, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1047, 1047,  154,  152,

     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,  151,
      146, 1047, 1047, 1047, 1047, 1047, 1047, 1047,  145,  142,
      141,  139,  135,  131,  129,  128,  127,  124,  123,  122,
      121,  120,  119,  116,  114,  113,  110, 1047, 1048, 1048,
      109,  108, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048,  107,  105, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1049, 1049,  104,  103, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049,  101,   96, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1057, 1057,   95,   93, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057,   88,   85, 1057, 1057, 1057,

     1057, 1057, 1057, 1057, 1060, 1060,   84,   81, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1060,   77,   76, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1063, 1063,   72,   70,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,   69,
       64, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1066, 1066,
       50,   42, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066,   36,   12, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1077, 1077,    7,    0, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077,    0,    0, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1081, 1081,    0,    0, 1081, 1081, 1081, 1081,

     1081, 1081, 1081, 1081, 1081,    0,    0, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1084, 1084,    0,    0, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084,    0,    0, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1088, 1088,    0,    0,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,    0,
        0, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1090, 1090,
        0,    0, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
     1090,    0,    0, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
     1091, 1091,    0,    0, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091,    0,    0, 1091, 1091, 1091, 1091, 1091,

     1091, 1091,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1091, 1092, 1092,    0,    0, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092,    0,    0, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1094, 1094,    0,    0, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094,    0,    0, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1105, 1105,    0,    0,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,    0,
        0, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1118, 1118,
        0,    0, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118,    0,    0, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1120, 1120,    0,    0, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120,    0,    0, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1125, 1125,    0,    0, 1125, 1125, 1125, 1125,
     1125, 1125, 1125, 1125, 1125,    0,    0, 1125, 1125, 1125,
     1125, 1125, 1125, 1125, 1129, 1129,    0,    0, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129,    0,    0, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1149, 1149,    0,    0,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,    0,
        0, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1153, 1153,

        0,    0, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153,    0,    0, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
        0,    0,    0,    0, 1153, 1154, 1154,    0,    0, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,    0,    0,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155,    0,
        0, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
        0,    0, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1160,
     1160,    0,    0, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160,    0,    0, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1164, 1164,    0,    0, 1164, 1164, 1164, 1164, 1164,

     1164, 1164, 1164, 1164,    0,    0, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1166, 1166,    0,    0, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166,    0,    0, 1166, 1166,
     1166, 1166, 1166, 1166, 1166,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1166, 1169, 1169,    0,    0, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,    0,    0,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1172, 1172,    0,
        0, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
        0,    0, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1173,
     1173,    0,    0, 1173, 1173, 1173, 1173, 1173, 1173, 1173,

     1173, 1173,    0,    0, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1175, 1175,    0,    0, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175,    0,    0, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1184, 1184,    0,    0, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184,    0,    0, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1185, 1185,    0,    0,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,    0,
        0, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1186, 1186,
        0,    0, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186,    0,    0, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1204, 1204,    0,    0, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204,    0,    0, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1207, 1207,    0,    0, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207,    0,    0, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1208, 1208,    0,    0, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208,    0,    0, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1209, 1209,    0,    0,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,    0,
        0, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1218, 1218,
        0,    0, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,

     1218,    0,    0, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1223, 1223,    0,    0, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223,    0,    0, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1227, 1227,    0,    0, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227,    0,    0, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1240, 1240,    0,    0, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240,    0,    0, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1245, 1245,    0,    0,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,    0,
        0, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1250, 1250,

        0,    0, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1250,    0,    0, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
     1252, 1252,    0,    0, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252,    0,    0, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1255, 1255,    0,    0, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255,    0,    0, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1257, 1257,    0,    0, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257,    0,    0, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1261, 1261,    0,    0,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,    0,

        0, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1273, 1273,
        0,    0, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273,    0,    0, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1275, 1275,    0,    0, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275,    0,    0, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1280, 1280,    0,    0, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280,    0,    0, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1285, 1285,    0,    0, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,    0,    0,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1286, 1286,    0,

        0, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
        0,    0, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1291,
     1291,    0,    0, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291,    0,    0, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1295, 1295,    0,    0, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295,    0,    0, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1296, 1296,    0,    0, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296,    0,    0, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1301, 1301,    0,    0, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,    0,    0,

     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1304, 1304,    0,
        0, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
        0,    0, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305,
     1305,    0,    0, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305,    0,    0, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1311, 1311,    0,    0, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311,    0,    0, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1318, 1318,    0,    0, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318,    0,    0, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1323, 1323,    0,    0, 1323,

     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,    0,    0,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1330, 1330,    0,
        0, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
        0,    0, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1337,
     1337,    0,    0, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337,    0,    0, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1349, 1349,    0,    0, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349,    0,    0, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1350, 1350,    0,    0, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350,    0,    0, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1357, 1357,    0,    0, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,    0,    0,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358,    0,
        0, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
        0,    0, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1361,
     1361,    0,    0, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361,    0,    0, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1367, 1367,    0,    0, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367,    0,    0, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1375, 1375,    0,    0, 1375, 1375, 1375,

     1375, 1375, 1375, 1375, 1375, 1375,    0,    0, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1378, 1378,    0,    0, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,    0,    0,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1383, 1383,    0,
        0, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
        0,    0, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1386,
     1386,    0,    0, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386,    0,    0, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1389, 1389,    0,    0, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389,    0,    0, 1389, 1389, 1389, 1389,

     1389, 1389, 1389, 1392, 1392,    0,    0, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392,    0,    0, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1401, 1401,    0,    0, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,    0,    0,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402, 1402,    0,
        0, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
        0,    0, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1405,
     1405,    0,    0, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1405,    0,    0, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1407, 1407,    0,    0, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407,    0,    0, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1409, 1409,    0,    0, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409,    0,    0, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1410, 1410,    0,    0, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,    0,    0,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1422, 1422,    0,
        0, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
        0,    0, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1427,
     1427,    0,    0, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427,    0,    0, 1427, 1427, 1427, 1427, 1427, 1427,

     1427, 1435, 1435,    0,    0, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435,    0,    0, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1439, 1439,    0,    0, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439,    0,    0, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1441, 1441,    0,    0, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,    0,    0,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1447, 1447,    0,
        0, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
        0,    0, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1449, 1449,    0,    0, 1449, 1449, 1449, 1449, 1449, 1449,

     1449, 1449, 1449,    0,    0, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1460, 1460,    0,    0, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460,    0,    0, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1461, 1461,    0,    0, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461,    0,    0, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1470, 1470,    0,    0,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,    0,
        0, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1475, 1475,
        0,    0, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475,    0,    0, 1475, 1475, 1475, 1475, 1475, 1475, 1475,

     1480, 1480,    0,    0, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1480,    0,    0, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1481, 1481,    0,    0, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481,    0,    0, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1482, 1482,    0,    0, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482,    0,    0, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1484, 1484,    0,    0,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,    0,
        0, 1484, 1484, 1484, 1484, 1484, 1484, 1484,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1484, 1486, 1486,

        0,    0, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1486,    0,    0, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1489, 1489,    0,    0, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489,    0,    0, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1497, 1497,    0,    0, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497,    0,    0, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1500, 1500,    0,    0, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500,    0,    0, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1501, 1501,    0,    0,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,    0,

        0, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1512, 1512,
        0,    0, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512,    0,    0, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1514, 1514,    0,    0, 1514, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514,    0,    0, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1515, 1515,    0,    0, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1515,    0,    0, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1518, 1518,    0,    0, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518,    0,    0, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1521, 1521,    0,    0,

     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,    0,
        0, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1529, 1529,
        0,    0, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529,    0,    0, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1535, 1535,    0,    0, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1535,    0,    0, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1540, 1540,    0,    0, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540,    0,    0, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1541, 1541,    0,    0, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541,    0,    0, 1541,

     1541, 1541, 1541, 1541, 1541, 1541,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1541, 1547, 1547,    0,    0,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,    0,
        0, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1551, 1551,
        0,    0, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551,    0,    0, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1552, 1552,    0,    0, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552,    0,    0, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1553, 1553,    0,    0, 1553, 1553, 1553, 1553,

     1553, 1553, 1553, 1553, 1553,    0,    0, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1555, 1555,    0,    0, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555,    0,    0, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1557, 1557,    0,    0,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,    0,
        0, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1569, 1569,
        0,    0, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569,    0,    0, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1574, 1574,    0,    0, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574,    0,    0, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1576, 1576,    0,    0, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576,    0,    0, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1579, 1579,    0,    0, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579,    0,    0, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1582, 1582,    0,    0,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,    0,
        0, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1596, 1596,
        0,    0, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596,    0,    0, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1598, 1598,    0,    0, 1598, 1598, 1598, 1598, 1598, 1598,

     1598, 1598, 1598,    0,    0, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1602, 1602,    0,    0, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602,    0,    0, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1606, 1606,    0,    0, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606,    0,    0, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1610, 1610,    0,    0,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,    0,
        0, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1617, 1617,
        0,    0, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617,    0,    0, 1617, 1617, 1617, 1617, 1617, 1617, 1617,

     1623, 1623,    0,    0, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623,    0,    0, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1638, 1638,    0,    0, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638,    0,    0, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1639, 1639,    0,    0, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639,    0,    0, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1651, 1651,    0,    0,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,    0,
        0, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1652, 1652,
        0,    0, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,

     1652,    0,    0, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1652,
     1655, 1655,    0,    0, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655,    0,    0, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1657, 1657,    0,    0, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657,    0,    0, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1661, 1661,    0,    0, 1661, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1661,    0,    0, 1661,
     1661, 1661, 1661, 1661, 1661, 1661, 1664, 1664,    0,    0,

     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664,    0,
        0, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1665, 1665,
        0,    0, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665,    0,    0, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1673, 1673,    0,    0, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673,    0,    0, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1675, 1675,    0,    0, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1675,    0,    0, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1678, 1678,    0,    0, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678,    0,    0, 1678,

     1678, 1678, 1678, 1678, 1678, 1678, 1685, 1685,    0,    0,
     1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,    0,
        0, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1686, 1686,
        0,    0, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686,    0,    0, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1694, 1694,    0,    0, 1694, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1694,    0,    0, 1694, 1694, 1694, 1694, 1694,
     1694, 1694, 1698, 1698,    0,    0, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698,    0,    0, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1700, 1700,    0,    0, 1700, 1700,

     1700, 1700, 1700, 1700, 1700, 1700, 1700,    0,    0, 1700,
     1700, 1700, 1700, 1700, 1700, 1700, 1704, 1704,    0,    0,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,    0,
        0, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1708, 1708,
        0,    0, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1708,    0,    0, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     1710, 1710,    0,    0, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1710,    0,    0, 1710, 1710, 1710, 1710, 1710,
     1710, 1710, 1719, 1719,    0,    0, 1719, 1719, 1719, 1719,
     1719, 1719, 1719, 1719, 1719,    0,    0, 1719, 1719, 1719,

     1719, 1719, 1719, 1719, 1721, 1721,    0,    0, 1721, 1721,
     1721, 1721, 1721, 1721, 1721, 1721, 1721,    0,    0, 1721,
     1721, 1721, 1721, 1721, 1721, 1721, 1723, 1723,    0,    0,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,    0,
        0, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1725, 1725,
        0,    0, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725,    0,    0, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1732, 1732,    0,    0, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732,    0,    0, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1781, 1781, 1781, 1781, 1782, 1782,    0, 1782,

     1783, 1783, 1783, 1783, 1786,    0, 1786, 1786, 1787, 1787,
     1787, 1787, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1780, 1780, 1780, 1780, 1780
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "sqlscanner.l"
#line 2 "sqlscanner.l"
#include "sqlparser.h"
#include "sqltypes.h"
#include <iostream>

#include <field.h>

using namespace std;
#line 13 "sqlscanner.l"


#line 2791 "lex.yy.c"

#define INITIAL 0
#define DelimOrSep 1
#define Name 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 21 "sqlscanner.l"

#line 2946 "lex.yy.c"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1781 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7913 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 22 "sqlscanner.l"
return AMPERSAND;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 23 "sqlscanner.l"
return SEMICOLON;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 24 "sqlscanner.l"
return ASTERISK;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 25 "sqlscanner.l"
return ARITHMETIC_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 26 "sqlscanner.l"
return ARITHMETIC_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 27 "sqlscanner.l"
return SLASH;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 28 "sqlscanner.l"
return LEFTPAREN;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 29 "sqlscanner.l"
return RIGHTPAREN;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 30 "sqlscanner.l"
return DOT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 31 "sqlscanner.l"
return DOLLAR_SIGN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 33 "sqlscanner.l"
return SINGLE_QUOTE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 34 "sqlscanner.l"
return QUESTION_MARK;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 35 "sqlscanner.l"
return COLON;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 36 "sqlscanner.l"
return COMMA;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 37 "sqlscanner.l"
{
	yylval.integerValue = atoi(yytext);
	return SIGNED_INTEGER;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 41 "sqlscanner.l"
{
	yylval.integerValue = atoi(yytext);
	return UNSIGNED_INTEGER;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 45 "sqlscanner.l"
{
	char digitBuffer[ 10 ];
	digitBuffer[ 0 ] = yytext[ 0 ];
	digitBuffer[ 1 ] = yytext[ 1 ];
	digitBuffer[ 2 ] = yytext[ 2 ];
	digitBuffer[ 3 ] = yytext[ 3 ];
	digitBuffer[ 4 ] = 0;
//X 	sscanf( digitBuffer, "%hd", &yylval.date_.year );

	digitBuffer[ 0 ] = yytext[ 5 ];
	digitBuffer[ 1 ] = yytext[ 6 ];
	digitBuffer[ 2 ] = 0;
//X 	sscanf( digitBuffer, "%hu", &yylval.date_.month );

	digitBuffer[ 0 ] = yytext[ 8 ];
	digitBuffer[ 1 ] = yytext[ 9 ];
	digitBuffer[ 2 ] = 0;
//X 	sscanf( digitBuffer, "%hu", &yylval.date_.day );
	return DATE_VALUE;
}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 65 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ABS;
}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 70 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ABSOLUTE;
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 75 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ACOS;
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 80 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADA;
}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 85 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD;
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 90 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_DAYS;
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 95 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_HOURS;
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 100 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_MINUTES;
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 105 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_MONTHS;
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 110 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_SECONDS;
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 115 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_YEARS;
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 120 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.comparisonMod = SetComparisonConstants::MOD_ALL;
	return ALL;
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 126 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ALLOCATE;
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 131 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ALTER;
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 136 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.logicalOp = ParserConstants::LOP_AND;
	return AND;
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 142 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//X 	yylval.comparisonMod = SetComparisonConstants::MOD_ANY;
	return ANY;
}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 148 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ARE;
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 153 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASCII;
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 158 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASC;
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 163 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASIN;
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 168 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AS;
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 173 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASSERTION;
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 178 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ATAN2;
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 183 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ATAN;
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 188 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AT;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 193 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AUTHORIZATION;
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 198 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AUTO_INCREMENT;
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 204 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.aggregate = ParserConstants::AGGREGATE_AVG;
	return AVG;
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 210 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BEFORE;
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 215 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_BEGIN;
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 220 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BETWEEN;
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 225 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::BigInteger;
	return SQL_TYPE;
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 231 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::BLOB;
	return SQL_TYPE;
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 237 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::ShortInteger;
	return SQL_TYPE;
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 243 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BIT_LENGTH;
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 248 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BREAK;
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 253 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BY;
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 258 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASCADE;
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 263 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASCADED;
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 268 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASE;
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 273 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CAST;
}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 278 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CATALOG;
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 283 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CEILING;
}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 288 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CENTER;
}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 293 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Text;
	return SQL_TYPE;
}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 299 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHAR_LENGTH;
}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 304 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Text;
	return SQL_TYPE;
}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 310 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHAR_LENGTH;
}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 315 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHECK;
}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 320 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CLOSE;
}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 325 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COALESCE;
}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 330 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COBOL;
}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 335 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLLATE;
}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 340 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLLATION;
}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 345 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLUMN;
}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 350 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COMMIT;
}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 355 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COMPUTE;
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 360 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONCAT;
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 365 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONNECT;
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 370 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONNECTION;
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 375 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONSTRAINT;
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 380 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONSTRAINTS;
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 385 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONTINUE;
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 390 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONVERT;
}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 395 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CORRESPONDING;
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 400 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COS;
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 405 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COT;
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 410 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COUNT;
}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 415 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CREATE;
}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 420 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURDATE;
}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 425 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_DATE;
}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 430 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_TIME;
}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 435 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_TIMESTAMP;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 440 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHERE_CURRENT_OF;
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 445 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT;
}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 450 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURSOR;
}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 455 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURTIME;
}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 460 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATABASE;
}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 465 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Date;
	return SQL_TYPE;
}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 471 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATE_FORMAT;
}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 476 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATE_REMAINDER;
}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 481 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFMONTH;
}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 486 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFWEEK;
}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 491 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFYEAR;
}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 496 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYS_BETWEEN;
}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 501 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAY;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 506 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEALLOCATE;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 511 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEC;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 516 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEC;
}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 521 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DECLARE;
}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 526 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFAULT;
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 531 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFERRABLE;
}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 536 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFERRED;
}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 541 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_DELETE;
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 546 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESC;
}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 551 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESCRIBE;
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 556 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESCRIPTOR;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 561 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DIAGNOSTICS;
}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 566 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DICTIONARY;
}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 571 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DIRECTORY;
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 576 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISCONNECT;
}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 581 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISPLACEMENT;
}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 586 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISTINCT;
}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 591 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DOMAIN_TOKEN;
}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 596 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_DOUBLE;
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 601 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DROP;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 606 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ELSE;
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 611 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return END;
}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 616 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return END_EXEC;
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 621 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ESCAPE;
}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 626 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXCEPT;
}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 631 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_EXCEPTION;
}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 636 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXEC;
}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 641 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXECUTE;
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 646 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXISTS;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 651 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXP;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 656 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXTERNAL;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 661 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXTRACT;
}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 666 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_FALSE;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 671 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FETCH;
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 676 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FIRST;
}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 681 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_FLOAT;
}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 686 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FLOOR;
}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 691 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FN;
}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 696 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOR;
}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 701 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOREIGN;
}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 706 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FORTRAN;
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 711 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOUND;
}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 716 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FROM;
}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 721 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FULL;
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 726 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GET;
}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 731 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GLOBAL;
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 736 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GO;
}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 741 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GOTO;
}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 746 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GRANT;
}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 751 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GROUP;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 756 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HAVING;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 761 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HOUR;
}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 766 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HOURS_BETWEEN;
}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 771 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IDENTITY;
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 776 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IFNULL;
}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 781 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_IGNORE;
}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 786 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IMMEDIATE;
}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 791 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_IN;
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 796 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INCLUDE;
}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 801 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INDEX;
}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 806 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INDICATOR;
}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 811 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INITIALLY;
}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 816 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INNER;
}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 821 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INPUT;
}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 826 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INSENSITIVE;
}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 831 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INSERT;
}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 836 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Integer;
	return SQL_TYPE;
}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 842 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTEGER;
}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 847 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERSECT;
}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 852 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERSECT;
}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 857 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERVAL;
}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 862 "sqlscanner.l"
{
	BEGIN Name;
	return INTO;
}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 866 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IS;
}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 871 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ISOLATION;
}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 876 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return JOIN;
}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 881 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return JUSTIFY;
}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 886 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return KEY;
}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 891 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LANGUAGE;
}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 896 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LAST;
}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 901 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LCASE;
}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 906 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LEFT;
}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 911 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LENGTH;
}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 916 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LEVEL;
}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 921 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LIKE;
}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 926 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LINE_WIDTH;
}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 931 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOCAL;
}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 936 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOCATE;
}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 941 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOG;
}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 946 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Integer;
	return SQL_TYPE;
}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 952 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOWER;
}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 957 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LTRIM;
}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 962 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MATCH;
}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 967 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.aggregate = ParserConstants::AGGREGATE_MAX;
	return SQL_MAX;
}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 973 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MICROSOFT;
}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 978 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.aggregate = ParserConstants::AGGREGATE_MIN;
	return SQL_MIN;
}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 984 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUS;
}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 989 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUTE;
}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 994 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUTES_BETWEEN;
}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 999 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MODIFY;
}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 1004 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MOD;
}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 1009 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MODULE;
}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 1014 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MONTH;
}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 1019 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MONTHS_BETWEEN;
}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 1024 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MUMPS;
}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 1029 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NAMES;
}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 1034 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NATIONAL;
}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 1039 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NCHAR;
}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 1044 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NEXT;
}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 1049 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NODUP;
}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 1054 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NONE;
}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 1059 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NOT;
}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 1064 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NOW;
}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 1069 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_NULL;
}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 1074 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NULLIF;
}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 1079 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NUMERIC;
}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 1084 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OCTET_LENGTH;
}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 1089 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ODBC;
}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 1094 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OF;
}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 1099 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_OFF;
}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 1104 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ON;
}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 1109 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ONLY;
}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 1114 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OPEN;
}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 1119 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OPTION;
}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 1124 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.logicalOp = ParserConstants::LOP_OR;
	return OR;
}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 1130 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ORDER;
}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 1135 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OUTER;
}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 1140 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OUTPUT;
}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 1145 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OVERLAPS;
}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 1150 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PAGE;
}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 1155 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PARTIAL;
}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 1160 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_PASCAL;
}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 1165 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PERSISTENT;
}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 1170 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CQL_PI;
}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 1175 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PLI;
}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 1180 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return POSITION;
}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 1185 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRECISION;
}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 1190 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PREPARE;
}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 1195 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRESERVE;
}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 1200 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIMARY;
}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 1205 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIOR;
}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 1210 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIVILEGES;
}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 1215 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PROCEDURE;
}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 1220 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRODUCT;
}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 1225 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PUBLIC;
}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 1230 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return QUARTER;
}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 1235 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return QUIT;
}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 1240 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RAND;
}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 1245 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return READ_ONLY;
}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 1250 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REAL;
}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 1255 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REFERENCES;
}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 1260 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REPEAT;
}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 1265 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REPLACE;
}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 1270 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RESTRICT;
}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 1275 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REVOKE;
}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 1280 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RIGHT;
}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 1285 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ROLLBACK;
}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 1290 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ROWS;
}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 1295 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RPAD;
}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 1300 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RTRIM;
}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 1305 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCHEMA;
}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 1310 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCREEN_WIDTH;
}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 1315 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCROLL;
}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 1320 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SECOND;
}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 1325 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SECONDS_BETWEEN;
}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 1330 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SELECT;
}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 1335 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SEQUENCE;
}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 1340 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SETOPT;
}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 1345 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SET;
}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 1350 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SHOWOPT;
}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 1355 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SIGN;
}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 1360 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SIN;
}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 1365 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_SIZE;
}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 1370 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SMALLINT;
}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 1375 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SOME;
}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 1380 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL;
}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 1385 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLCA;
}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 1390 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLCODE;
}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 1395 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLERROR;
}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 1400 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLSTATE;
}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 1405 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLWARNING;
}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 1410 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQRT;
}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 1415 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return STDEV;
}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 1420 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SUBSTRING;
}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 1425 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.aggregate = ParserConstants::AGGREGATE_SUM;
	return SUM;
}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 1431 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSDATE;
}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 1436 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSDATE_FORMAT;
}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 1441 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSTEM;
}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 1446 "sqlscanner.l"
{
	BEGIN Name;
	return TABLE;
}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 1450 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TAN;
}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 1455 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TEMPORARY;
}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 1460 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return THEN;
}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 1465 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIME;
}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 1470 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMESTAMP;
}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 1475 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMEZONE_HOUR;
}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 1480 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMEZONE_MINUTE;
}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 1485 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TITLE;
}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 1490 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO;
}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 1495 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO_CHAR;
}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 1500 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO_DATE;
}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 1505 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSACTION;
}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 1510 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSLATE;
}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 1515 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSLATION;
}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 1520 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_TRUE;
}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 1525 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRUNCATE;
}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 1530 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GENERAL_TITLE;
}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 1535 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UCASE;
}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 1540 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UNION;
}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 1545 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UNIQUE;
}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 1550 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_UNKNOWN;
}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 1555 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UPDATE;
}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 1560 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UPPER;
}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 1565 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USAGE;
}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 1570 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USER;
}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 1575 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USING;
}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 1580 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VALUES;
}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 1585 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VALUE;
}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 1590 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VARBINARY;
}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 1595 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.coltype = KexiDBField::SQLVarchar;
//	return SQL_TYPE;
	return VARCHAR;
}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 1602 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VARYING;
}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 1607 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VENDOR;
}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 1612 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VIEW;
}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 1617 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WEEK;
}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 1622 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHEN;
}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 1627 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHENEVER;
}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 1632 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHERE;
}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 1637 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WITH;
}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 1642 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WORD_WRAPPED;
}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 1647 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WORK;
}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 1652 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WRAPPED;
}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 1657 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return YEAR;
}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 1662 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return YEARS_BETWEEN;
}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 1667 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXPONENT;
}
	YY_BREAK
case 336:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1672 "sqlscanner.l"
;
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 1673 "sqlscanner.l"
return CHARACTER_STRING_LITERAL;
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 1674 "sqlscanner.l"
return DOUBLE_QUOTED_STRING;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 1675 "sqlscanner.l"
{
//	BEGIN DelimOrSep;
	strcpy(yylval.stringValue, yytext);
//	yylval.stringValue = yytext;
//	int len = strlen( yylval.parserUserName );
//	for( scannerPtr = yylval.parserUserName + ( len - 1 ); *scannerPtr == ' ' && scannerPtr >= yylval.parserUserName; scannerPtr-- )
//		*scannerPtr = 0;
	return USER_DEFINED_NAME;
}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 1684 "sqlscanner.l"
;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 1686 "sqlscanner.l"
{
	BEGIN 0;
	return AMPERSAND;
}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 1690 "sqlscanner.l"
{
	BEGIN 0;
	return SEMICOLON;
}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 1694 "sqlscanner.l"
{
	BEGIN 0;
	return ASTERISK;
}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 1698 "sqlscanner.l"
{
	BEGIN 0;
	return ARITHMETIC_PLUS;
}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 1702 "sqlscanner.l"
{
	BEGIN 0;
	return ARITHMETIC_MINUS;
}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 1706 "sqlscanner.l"
{
	BEGIN 0;
	return SLASH;
}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 1710 "sqlscanner.l"
{
	BEGIN 0;
	return LEFTPAREN;
}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 1714 "sqlscanner.l"
{
	BEGIN 0;
	return RIGHTPAREN;
}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 1718 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_EQUAL;
	return EQUAL;
}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 1723 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_NOT_EQUAL;
	return NOT_EQUAL;
}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 1728 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER;
	return GREATER_THAN;
}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 1733 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER_OR_EQUAL;
	return GREATER_OR_EQUAL;
}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 1738 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS_OR_EQUAL;
	return LESS_OR_EQUAL;
}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 1743 "sqlscanner.l"
{
	BEGIN 0;
	//yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS;
	return LESS_THAN;
}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 1748 "sqlscanner.l"
{
	BEGIN 0;
	return SINGLE_QUOTE;
}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 1752 "sqlscanner.l"
{
	BEGIN 0;
	return QUESTION_MARK;
}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 1756 "sqlscanner.l"
{
	BEGIN 0;
	return COLON;
}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 1760 "sqlscanner.l"
{
	BEGIN 0;
	return COMMA;
}
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 1764 "sqlscanner.l"
{
	BEGIN 0;
}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 1767 "sqlscanner.l"
{
	BEGIN DelimOrSep;
//	strcpy( yylval.parserUserName, yytext );
	strcpy(yylval.stringValue, yytext);
	return USER_DEFINED_NAME;
}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 1773 "sqlscanner.l"
ECHO;
	YY_BREAK
#line 6546 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DelimOrSep):
case YY_STATE_EOF(Name):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1781 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1781 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1780);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 1773 "sqlscanner.l"



void tookenize(const char *data)
{
	yy_switch_to_buffer(yy_scan_string(data));
}


