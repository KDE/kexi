
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 369
#define YY_END_OF_BUFFER 370
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1789] =
    {   0,
      347,  347,    0,    0,    0,    0,  370,  369,  347,  369,
       10,   11,   18,    7,    8,    3,    4,   21,    5,    9,
        6,   23,   20,    2,   14,   12,   16,   19,    1,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  367,  356,  363,  354,  355,  350,
      351,  366,  352,  353,  365,  349,  362,  357,  359,  364,
      348,  368,  347,    0,    0,  344,    0,   22,   23,   15,
       13,   17,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  346,  346,  342,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  367,  361,  358,  360,  368,    0,    0,
        0,  343,   22,   23,  346,  346,  346,  346,  346,  346,
      346,  346,  346,   45,  346,  346,  346,   49,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,   61,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  148,  346,  346,  346,  346,  346,  346,
      346,  157,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  168,  346,  346,  346,  346,  346,  346,  346,  183,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  228,  346,  230,  346,
      346,  346,  234,  346,  346,  346,  346,  346,  346,  346,
      243,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  307,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  345,   23,   25,  346,
      346,   28,   29,  346,   36,  346,  346,   39,   40,   41,
       43,  346,  346,  346,  346,  346,  346,   52,  346,  346,
      346,  346,  346,   58,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,   90,   91,  346,
      346,  346,  346,  346,  346,  346,  346,  110,  346,  346,
      346,  112,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  346,  132,  346,
      346,  346,  346,  346,  140,  346,  346,  346,  346,  346,
      346,  346,  149,  346,  346,  346,  346,  346,  346,  155,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  178,  346,  346,
      346,  346,  346,  187,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  198,  346,  346,  346,  346,  203,  346,
      205,  346,  210,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  221,  222,  346,  346,  346,  346,  229,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  244,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  278,  346,  346,  346,  281,  346,  346,
      346,  285,  346,  346,  346,  346,  346,  346,  346,  294,
      346,  346,  346,  299,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,    0,   23,  346,   27,
      346,  346,  346,  346,  346,  346,  346,  346,   44,  346,

       48,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,   64,   65,  346,  346,  346,   69,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  103,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  119,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  130,  131,  346,  346,  346,  137,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  153,
      154,  346,  346,  158,  346,  346,  346,  162,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  182,  346,  185,  346,  346,  189,  346,
      191,  346,  346,  194,  346,  346,  346,  199,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  218,  346,  220,  223,  346,  346,  346,  227,  231,
      232,  346,  346,  346,  346,  346,  239,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  256,  257,  346,  259,  346,  346,  346,  346,  346,
      346,  346,  267,  268,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  280,  282,  346,  284,  346,  346,  346,
      346,  346,  291,  346,  346,  346,  346,  346,  346,  301,

      302,  346,  346,  346,  346,  346,  346,  313,  346,  346,
      346,  346,  346,  346,  346,  346,  323,  346,  346,  346,
      346,  346,  346,  331,  332,  333,  346,  346,  336,  346,
      338,  346,  340,  346,    0,  346,  346,  346,  346,  346,
      346,  346,  346,   38,   42,  346,   47,  346,  346,  346,
       54,  346,  346,  346,  346,   60,  346,  346,  346,  346,
      346,  346,   73,   74,  346,   76,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,   92,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  143,  144,  145,  146,  147,  346,  346,  152,  346,
      346,  159,  160,  346,  346,  346,  346,  346,  346,  346,
      170,  346,  346,  173,  174,  346,  346,  346,  346,  346,
      346,  346,  346,  190,  346,  193,  346,  196,  346,  200,
      201,  202,  346,  206,  346,  346,  346,  212,  346,  214,
      215,  346,  217,  219,  346,  346,  346,  346,  235,  236,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      250,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  265,  346,  269,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  286,  346,  346,  346,  346,  292,
      346,  346,  346,  298,  346,  346,  346,  306,  346,  346,
      346,  346,  346,  316,  317,  346,  346,  346,  321,  322,
      324,  326,  346,  346,  346,  346,  346,  346,  335,    0,
      346,  346,  346,    0,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,   53,  346,   56,   57,  346,
      346,  346,  346,   68,  346,  346,  346,  346,  346,   79,
       80,  346,   82,  346,  346,  346,  346,  346,   93,  346,
      346,  100,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  118,  346,  346,  346,

      346,  346,  346,  346,  346,  128,  129,  346,  134,  135,
      346,  346,  139,  346,  346,  346,  346,  346,  156,  161,
      346,  346,  165,  166,  346,  346,  346,  346,  346,  176,
      346,  346,  346,  346,  346,  346,  192,  346,  197,  346,
      207,  346,  209,  211,  346,  346,  224,  346,  346,  233,
      237,  346,  346,  241,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  254,  346,  346,  346,  261,  346,  346,
      264,  346,  270,  346,  272,  273,  346,  275,  346,  277,
      346,  346,  346,  346,  346,  346,  346,  346,  297,  346,
      346,  346,  346,  346,  346,  346,  346,  318,  346,  320,

      325,  346,  346,  346,  330,  346,    0,  346,  346,  346,
        0,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,   55,  346,   62,  346,   66,   67,  346,  346,
      346,   77,  346,   81,   83,  346,  346,  346,   88,  346,
       94,   99,  346,  101,  346,  346,  346,  346,  346,  346,
      346,  346,  113,  114,  115,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  138,  346,  142,
      150,  151,  346,  346,  346,  346,  169,  346,  346,  346,
      177,  346,  346,  346,  186,  346,  346,  346,  346,  346,
      346,  225,  346,  346,  240,  346,  346,  346,  247,  346,

      249,  346,  346,  253,  255,  346,  346,  262,  346,  346,
      346,  346,  346,  279,  346,  287,  346,  346,  346,  346,
      295,  346,  346,  346,  346,  308,  309,  346,  346,  346,
      319,  346,  328,  329,  346,    0,  346,  339,  346,    0,
       26,   30,  346,  346,  346,  346,  346,   37,  346,  346,
      346,  346,   63,  346,  346,   75,  346,  346,  346,   87,
      346,  346,  346,  102,  346,  346,  346,  346,  346,  346,
      346,  346,  117,  120,  346,  346,  346,  346,  346,  346,
      127,  133,  346,  141,  346,  346,  164,  346,  346,  346,
      346,  346,  181,  346,  188,  346,  346,  346,  346,  216,

      346,  238,  346,  245,  346,  248,  346,  346,  346,  346,
      263,  266,  346,  346,  276,  283,  288,  289,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  314,  346,  334,
        0,  346,  346,   24,   31,  346,  346,  346,   35,   46,
      346,  346,  346,  346,   71,  346,   78,  346,  346,  346,
      346,  346,  346,  346,  346,  107,  108,  346,  346,  346,
      346,  346,  346,  124,  346,  346,  136,  346,  346,  167,
      171,  172,  346,  179,  346,  184,  346,  204,  346,  346,
      346,  346,  246,  346,  252,  258,  346,  346,  346,  346,
      293,  346,  300,  303,  346,  346,  346,  311,  346,  327,

        0,  346,  346,  346,   33,  346,  346,  346,   59,  346,
      346,   84,   85,  346,  346,  346,  346,  346,  346,  106,
      346,  111,  116,  121,  346,  123,  125,  346,  346,  346,
      346,  346,  195,  346,  346,  346,  242,  251,  260,  346,
      346,  290,  346,  346,  346,  346,  346,    0,  346,  346,
       32,   34,  346,  346,   70,  346,   86,  346,  346,  346,
      104,  346,  346,  122,  346,  346,  346,  175,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  310,  312,    0,
      346,  346,  346,  346,  346,  346,   95,   96,  346,  346,
      109,  126,  346,  346,  180,  346,  346,  226,  271,  346,

      346,  346,  346,    0,  337,  346,   50,  346,  346,   89,
      346,  346,  315,  163,  346,  346,  346,  346,  304,  346,
        0,  341,   51,  346,  346,  105,  346,  213,  346,  296,
      346,    0,  346,  346,  208,  274,  305,    0,   72,  346,
        0,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   98,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   17,
       16,   16,   16,   16,   16,   16,   16,   18,   19,   20,
       21,   22,   23,   24,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
        1,    1,    1,    1,   25,    1,   26,   27,   28,   29,

       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    1,   53,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    4,    1,    1,    1,
        1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1796] =
    {   0,
        0,    0,   52,   75,   74,    0, 4082, 8231,   54,    0,
     8231, 8231, 4065, 8231, 8231, 8231, 8231, 8231,  113, 8231,
     8231,   52, 8231, 8231,   58, 8231, 4050, 8231, 8231,  104,
      110,  126,  128,  171,  195,  127,  102,  167,   99, 4040,
      188,  197,  214,  233,  241, 4014,  225,  260,  278,  208,
      183,  252,    0, 4029,   89, 8231, 8231, 8231, 8231, 8231,
     8231, 8231, 8231, 8231, 8231, 8231,  113, 8231, 4028, 8231,
     8231,    0,  134, 4044, 4040, 8231, 4040,  159,  171, 8231,
     8231, 8231,    0, 3998, 4001,  171,  101,  174, 4010,  320,
      363, 3994, 4006,  305,  218, 4007,  388,  157,  173,  135,

     3996,  387, 4005, 3991,  203,  325,  271,  181, 3993, 8231,
     3988, 4002, 4002,  279, 3992, 3983, 3984, 3986,  432,  273,
     3985, 3987,  200, 3983,  455,  243, 3975, 3975, 3990, 3980,
     3979, 3979,  499,  549, 3975, 3964, 3948,  229, 3971,  316,
      310,  388, 3953,  181,  329,  217, 3954,  251, 3958, 3941,
      442,  288, 3944, 3961,  588,  618,  315,  654, 3942, 3956,
      361, 3942,  682, 3950, 3939,  388, 3955,  333, 3942,  681,
     3948,  400, 3953, 3935,  258,  452, 3937,  452, 3950, 3937,
      315, 3945,  411, 3922,  353, 3927, 3925,  447,  727,  528,
     3928,  381,  431,  549,  351, 3914, 3913, 3912, 3902, 3886,

     3887, 3894, 3893,  480, 8231, 8231, 8231,    0, 3905,  492,
     3905, 8231,  482,  488,  751, 3863,  790,  813,  837, 3867,
      876,  899,  922, 8231,  945, 3857, 3856, 8231, 3846,  453,
      978, 3844, 3840, 3825, 3829, 3836, 1001, 3835, 8231,  548,
     3825, 3813, 3795, 3796, 3810, 3784, 3790, 3777,  540,  543,
      606, 3773, 1025, 1048, 3776, 3779,  615,  393, 1071, 3767,
     1114,  562, 3764, 3765, 3760, 3737, 3751,  577, 3745, 3743,
     3728, 3729, 1150, 3732, 3718, 3719, 3702, 1174,  523, 3692,
     3707, 3681,  277, 8231, 1197, 3685, 3685, 3676, 3682, 1241,
     3675, 8231, 3661, 3661, 3644, 3655, 3636, 3639, 3631, 3627,

     3636, 8231, 3619,  583, 3610, 3624, 3598, 3613, 1264, 8231,
     3596, 3593, 3586, 1303, 3589, 3575, 3566, 3564, 3576, 3568,
     3567, 3557, 3560, 1326, 3553, 3545, 3540, 3536, 1349, 3520,
     1372, 1417, 3517, 3517, 3527, 3522, 3529, 3509, 3507, 3522,
     1462, 1485, 3514, 3520, 3519, 3520, 8231, 1508, 8231, 3497,
     3507, 3511, 8231, 3514,  574, 3500, 3512, 3496, 3512, 3488,
     8231, 1531, 3497,  670,  547,  595, 3484, 3477, 3474, 3480,
      392, 3478,  617, 3453, 3457, 3463, 3449, 3441, 3446, 3440,
     3443,  525, 3423, 3432, 3406, 1554, 3403, 3411, 1593, 3410,
     3402, 3399, 1616, 3383, 3397, 3373, 1663,  641, 3379, 1686,

     3365, 3366, 3374, 3357, 8231,  620, 3354,  613, 3339,  419,
     3343, 3355, 3341, 3338, 3317, 3320, 3312,  660, 3319, 3299,
     3301,  670, 3303,  679, 3294, 3282, 8231,  703, 8231, 3287,
     1709, 8231, 8231, 1068, 8231, 3286, 3270, 8231, 8231, 8231,
     8231, 3278, 1732, 3259, 1755, 3261, 3266, 8231, 3247, 3250,
     3249, 3239, 3225, 8231, 3230, 3230, 3230, 1778, 1801, 3218,
     3211, 3214, 1824, 3207, 3203, 3202, 3185, 3195, 3182, 3176,
     3163, 3173, 3168, 3152, 3153, 3156, 3146, 8231, 8231, 3130,
     3129, 3138, 3133, 3113, 3118, 3124, 1849, 8231, 3110, 3115,
     3093, 8231, 3091, 3102, 3072, 3074, 3062, 1873, 3067, 3071,

     3067, 3054, 3047, 3049, 3048, 3035, 1915, 1938, 8231, 3041,
     3020, 3019, 1961, 3014, 8231, 3006, 3022, 3008, 3004, 2991,
     2981, 2982, 8231, 2981, 2971, 2984, 2006, 2029, 2960, 8231,
     2976, 2052, 2947, 2950, 2951, 2075, 2935, 2942, 2926, 2939,
     2921, 2908, 2928, 2912, 2902, 2899,  678, 8231,  603,  677,
     2908, 2118, 2899, 8231, 2877, 2141, 2892, 2164, 2876, 2874,
     2187, 2885,  686, 8231, 2210, 2857, 2861, 2865, 8231, 2854,
     8231,  637, 8231, 2862, 2855, 2858, 2846, 2845, 2848, 2844,
     2233, 2845, 2256, 8231, 8231, 2279, 2842, 2839, 2312, 8231,
     2335, 2358, 2843, 2839, 2838, 2834, 2842, 2381, 2844, 2851,

     2842, 8231, 2823, 2833, 2831, 2826, 2829, 2802, 2810, 2804,
     2787, 2798, 2777, 2404, 2427, 2796, 2450, 2768, 2784, 2783,
     2762, 2768, 2758, 2775, 2473, 2496, 2763, 2755, 2762, 2745,
     2742, 2752, 2740, 8231, 2728, 2719, 2519, 8231, 2542, 2721,
     2565, 8231,  717, 2714, 2702, 2720, 2588, 2689, 2690, 8231,
     2708, 2694, 2693, 8231, 2673, 2611, 2634, 2682, 2678, 2675,
     2656, 2684, 2662, 2659, 2649, 2638, 2643, 2637, 2638, 2650,
     2707, 2647, 2647, 2642, 2642, 2640, 2633, 2730, 2753, 2776,
     2642, 2805, 2646, 2828, 2629, 2851,  710,  716, 2623, 8231,
     2642, 2627,  742, 2636, 2635, 2638, 2894, 2917, 8231, 2618,

     8231, 2940, 2619, 2627, 2630, 2963, 2629, 2606, 2600, 2610,
     2986, 2610, 8231, 8231, 2598, 2589, 2584, 8231, 2580, 2588,
     3009, 3032, 2571, 3055, 2560, 2565, 2549, 2548, 2547, 2554,
     2538, 2532, 2527, 2525, 3078, 2529, 2513, 2509, 2504, 2508,
     2510, 8231,  713,  729, 2508, 2485, 2498, 2480, 2476, 2469,
     2472, 8231, 2467, 2460, 2450, 2444, 2440, 2452, 2438, 2428,
     2436, 8231, 8231, 2407, 2425, 2409, 8231, 2399, 2399, 2394,
     2404, 3101, 3124, 3147, 3170, 3193, 2399, 2395, 3216, 8231,
     8231, 2394, 2373, 8231, 3239, 3262, 2377, 8231, 2383, 2364,
     2360, 2357, 2352, 2356, 3285, 2349, 2348, 3308, 3331, 2320,

     2318, 2332,  734, 8231, 2307, 8231, 2320, 2315, 8231, 3354,
     8231, 2307, 3377, 8231, 2291, 3400, 2299, 8231, 3423, 3446,
     3469, 2284, 3492, 2288, 2267, 2286, 3515, 3558, 3581, 2273,
     3604, 8231, 3627, 8231, 8231, 2280, 2276, 2284, 8231, 8231,
     8231, 2269, 3650, 3673, 2262, 2280, 8231, 2279, 2267, 2252,
     2261, 2241, 2241, 2240, 2230, 3696, 2235, 2233, 2233, 2232,
     2220, 8231, 8231, 2209, 8231, 2209, 2193, 2209, 2193, 2196,
     3719,   40, 8231, 8231, 3742,   63,   88,  118,  148,  159,
      219,  232,  320, 8231, 8231,  345, 8231, 3765,  459,  537,
      556,  571, 8231, 3788,  573,  626,  661,  781,  681, 8231,

     8231,  710,  728, 3811,  754,  740,  769, 8231,  760, 3834,
     3857,  757,  740,  759, 3880, 3903, 8231, 3926, 3949,  751,
      768,  757,  764, 8231, 8231, 8231,  770, 3992, 8231,  770,
     8231,  789, 8231,  804,  825,  785,  793,  807,  815,  823,
      835,  838,  820, 8231, 8231,  832, 8231,  833,  829, 4043,
     8231,  830, 4066, 4089,  831, 8231,  841,  840,  841, 4112,
      844,  830, 8231, 8231,  848, 8231,  940, 4135, 4158,  850,
     4181,  836,  856,  846,  848,  862, 8231, 4204,  874,  860,
     4227,  885,  872,  886,  897,  888,  908,  909,  919,  922,
      914,  931,  917,  945, 4250,  990,  928,  934,  936,  938,

      950,  954, 4273, 4296,  953, 4319, 4342,  954, 4375,  968,
      950, 8231, 8231, 8231, 8231, 8231,  966,  967, 8231,  970,
     4398, 8231, 8231, 4421,  991,  984, 4444, 4467, 1004, 1011,
     8231,  997, 1015, 8231, 8231, 1019, 4490, 1011, 1034, 1039,
     1041, 1026, 1045, 8231, 4513, 8231, 1053, 8231, 4536, 8231,
     8231, 8231, 1048, 8231, 4559, 4602, 4625, 8231, 1071, 8231,
     8231, 1072, 8231, 8231, 4648, 1071, 1063, 4671, 8231, 8231,
     4694, 1061, 1066, 4717, 1059, 1065, 1073, 1078, 1062, 1060,
     8231, 1083, 1068, 1074, 4740, 1077, 1091, 1092, 4763, 1109,
     1112, 4786, 8231, 1113, 8231, 4809, 1117, 4832, 4855, 4898,

     1115, 4921, 1099, 1106, 8231, 1116, 1107, 1104, 1111, 8231,
     1120, 1125, 4944, 8231, 1130, 1140, 1128, 8231, 1135, 1149,
     1152, 1164, 1146, 8231, 8231, 4967, 1162, 4990, 8231, 8231,
     8231, 8231, 5013, 1176, 1160, 1181, 5036, 1184, 8231, 1174,
     1180, 1195, 1198, 1213, 1199, 1186, 1188, 1186, 1188, 1194,
     1192, 1206, 1197, 1187, 1211, 8231, 5059, 8231, 8231, 1208,
     5082, 5110, 5133, 8231, 1202, 1215, 1216, 5156, 1207, 8231,
     8231, 5179, 8231, 5202, 1223, 1228, 5235, 1228, 8231, 5258,
     5281, 8231, 5305, 1239, 1227, 1242, 1242, 1259, 1264, 1246,
     1266, 5328, 5351, 5374, 1266, 1266, 8231, 1266, 1252, 1253,

     1273, 1257, 1271, 1272, 1258, 8231, 8231, 1279, 8231, 8231,
     1268, 5397, 8231, 1272, 5420, 5443, 5466, 1294, 8231, 8231,
     1290, 1280, 8231, 8231, 1286, 5489, 1292, 1305, 1298, 8231,
     5512, 1325, 1317, 1315, 5535, 1335, 8231, 1337, 8231, 1345,
     8231, 1352, 8231, 8231, 1351, 1351, 8231, 5558, 1359, 8231,
     8231, 1353, 5581, 8231, 1368, 1360, 1360, 5604, 1371, 5627,
     1370, 1360, 5650, 8231, 5673, 1367, 1377, 8231, 5696, 1361,
     8231, 1371, 8231, 1360, 8231, 8231, 1384, 8231, 1380, 8231,
     5719, 1366, 5742, 1369, 1383, 1380, 1376, 5765, 8231, 1373,
     1379, 1391, 5789, 5812, 1377, 1378, 1403, 8231, 5835, 8231,

     8231, 1391, 5858, 5881, 8231, 1399, 1410, 1418, 5904, 1415,
     1430, 5927, 5950, 1404, 1404, 1417, 1413, 1409, 5973, 1415,
     1429, 1413, 8231, 1412, 8231, 5996, 8231, 8231, 1426, 1416,
     6019, 8231, 1421, 8231, 8231, 1421, 1423, 6042, 8231, 1427,
     8231, 8231, 1541, 8231, 6065, 1429, 1442, 1433, 1443, 1446,
     1442, 1446, 8231, 8231, 8231, 1464, 6088, 6111, 1462, 1478,
     1470, 1464, 1496, 1487, 6134, 6157, 1496, 8231, 6180, 8231,
     8231, 8231, 1491, 1492, 6203, 1517, 8231, 1505, 1508, 1525,
     8231, 1515, 6226, 1532, 8231, 6249, 1534, 1535, 1554, 1552,
     6272, 8231, 1544, 6295, 8231, 1545, 6318, 1546, 8231, 6341,

     8231, 1557, 1558, 8231, 8231, 1539, 1560, 8231, 6364, 6387,
     1557, 1565, 6410, 8231, 6433, 8231, 6456, 6479, 1554, 1565,
     8231, 1567, 1549, 1568, 1585, 8231, 8231, 1586, 1611, 6502,
     8231, 1571, 8231, 8231, 6525, 1588, 1591, 8231, 1588, 1626,
     8231, 8231, 6548, 1617, 1604, 1620, 6571, 8231, 6594, 1605,
     1621, 1619, 8231, 1608, 6617, 8231, 6641, 1615, 1610, 8231,
     1627, 1631, 1624, 8231, 1633, 1627, 1629, 6664, 6687, 1633,
     1637, 1638, 8231, 8231, 1626, 1651, 1630, 6710, 1645, 1661,
     8231, 8231, 6733, 8231, 1658, 1654, 8231, 6756, 6779, 6802,
     1656, 6825, 8231, 6858, 8231, 1680, 6881, 1684, 1670, 8231,

     1693, 8231, 1681, 8231, 6904, 8231, 1692, 6927, 6950, 1693,
     8231, 8231, 1709, 1718, 8231, 8231, 8231, 8231, 1717, 6973,
     1719, 6996, 7019, 1865, 1720, 7042, 1721, 8231, 7065, 8231,
     1726, 1741, 1735, 8231, 8231, 1740, 7088, 1750, 8231, 8231,
     1761, 1767, 7111, 1773, 8231, 1770, 8231, 7134, 7157, 1783,
     1773, 1790, 1784, 1791, 7200, 8231, 8231, 1810, 7223, 7246,
     7269, 1797, 7292, 8231, 7315, 1814, 8231, 1809, 1825, 8231,
     8231, 8231, 1835, 8231, 1826, 8231, 7338, 8231, 1832, 1830,
     1834, 7361, 8231, 7384, 8231, 8231, 7407, 1844, 1845, 7430,
     8231, 1856, 8231, 8231, 1860, 1867, 1863, 8231, 1865, 8231,

     1875, 1876, 1877, 7453, 8231, 7476, 1868, 1879, 8231, 7499,
     1880, 8231, 8231, 7522, 1872, 1882, 1883, 7545, 1885, 8231,
     1876, 8231, 8231, 8231, 7568, 8231, 8231, 1874, 1883, 1891,
     7591, 1892, 8231, 1884, 1912, 1910, 8231, 8231, 8231, 1911,
     1906, 8231, 1917, 1919, 1927, 7614, 7637, 1923, 1948, 1948,
     8231, 8231, 1947, 1948, 8231, 1949, 8231, 1957, 7660, 7683,
     8231, 1960, 7726, 8231, 7749, 1961, 1953, 8231, 7772, 1963,
     1964, 7795, 7818, 1965, 1970, 1954, 1952, 8231, 8231, 1958,
     7841, 1961, 7864, 1956, 1970, 7887, 8231, 8231, 1958, 1961,
     8231, 8231, 7910, 7933, 8231, 1975, 1967, 8231, 8231, 1980,

     1966, 7956, 1967, 1996, 8231, 7979, 8231, 8002, 1978, 8231,
     2007, 8025, 8231, 8231, 1995, 8048, 1996, 8071, 8231, 2015,
     2018, 8231, 8231, 2023, 2019, 8231, 8094, 8231, 8117, 8231,
     8140, 2028, 8163, 2027, 8231, 8231, 8231, 2016, 8231, 8186,
     2051, 8231, 2034, 2038, 2048, 2062, 2061, 2056, 2050, 2055,
     2071, 2071, 2061, 2077, 2064, 2068, 2084, 2083, 2082, 2060,
     2074, 2084, 2064, 2078, 2078, 2083, 2094, 2094, 2097, 2101,
     2107, 2112, 2102, 2127, 2115, 2123, 2139, 2127, 2142, 2147,
     2152, 2166, 2148, 2163, 2161, 2161, 8231, 8231, 8210, 8214,
     8218, 2211, 2212, 8222, 8226

    } ;

static yyconst flex_int16_t yy_def[1796] =
    {   0,
     1788,    1, 1789, 1789, 1789,    5, 1788, 1788, 1788, 1790,
     1788, 1788, 1791, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1793, 1788, 1794, 1791, 1788, 1795, 1788, 1788, 1788,
     1788, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,

     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,

     1792, 1792, 1792, 1788, 1788, 1788, 1788, 1793, 1794, 1794,
     1795, 1788, 1788, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,

     1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1788, 1792,
     1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,

     1792, 1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1788, 1788, 1788, 1792,
     1792, 1788, 1788, 1792, 1788, 1792, 1792, 1788, 1788, 1788,
     1788, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1788, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,

     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792,
     1792, 1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1788,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1788, 1792,
     1788, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1788, 1792, 1792, 1792, 1792, 1788,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,

     1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1788, 1788, 1792, 1788,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792,

     1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1788, 1788, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1788, 1788, 1792, 1792, 1792, 1788, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788,
     1788, 1792, 1792, 1788, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,

     1792, 1792, 1792, 1788, 1792, 1788, 1792, 1792, 1788, 1792,
     1788, 1792, 1792, 1788, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1788, 1792, 1788, 1788, 1792, 1792, 1792, 1788, 1788,
     1788, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1788, 1788, 1792, 1788, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1788, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1788, 1792, 1788, 1792, 1792, 1792,
     1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1788,

     1788, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1788, 1788, 1792, 1792, 1788, 1792,
     1788, 1792, 1788, 1792, 1788, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1788, 1792, 1788, 1792, 1792, 1792,
     1788, 1792, 1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792,
     1792, 1792, 1788, 1788, 1792, 1788, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,

     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1788, 1788, 1788, 1788, 1788, 1792, 1792, 1788, 1792,
     1792, 1788, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1788, 1792, 1792, 1788, 1788, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1788, 1792, 1788, 1792, 1788,
     1788, 1788, 1792, 1788, 1792, 1792, 1792, 1788, 1792, 1788,
     1788, 1792, 1788, 1788, 1792, 1792, 1792, 1792, 1788, 1788,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1788, 1792, 1788, 1792, 1792, 1792, 1792, 1792,

     1792, 1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1788,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1788, 1788, 1792, 1792, 1792, 1788, 1788,
     1788, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1788,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1788, 1792, 1788, 1788, 1792,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1788,
     1788, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1788, 1792,
     1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792, 1792,

     1792, 1792, 1792, 1792, 1792, 1788, 1788, 1792, 1788, 1788,
     1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1788, 1788,
     1792, 1792, 1788, 1788, 1792, 1792, 1792, 1792, 1792, 1788,
     1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1788, 1792,
     1788, 1792, 1788, 1788, 1792, 1792, 1788, 1792, 1792, 1788,
     1788, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1788, 1792, 1792,
     1788, 1792, 1788, 1792, 1788, 1788, 1792, 1788, 1792, 1788,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1788,

     1788, 1792, 1792, 1792, 1788, 1792, 1788, 1792, 1792, 1792,
     1788, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1788, 1792, 1788, 1792, 1788, 1788, 1792, 1792,
     1792, 1788, 1792, 1788, 1788, 1792, 1792, 1792, 1788, 1792,
     1788, 1788, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1788, 1788, 1788, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1788,
     1788, 1788, 1792, 1792, 1792, 1792, 1788, 1792, 1792, 1792,
     1788, 1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792,
     1792, 1788, 1792, 1792, 1788, 1792, 1792, 1792, 1788, 1792,

     1788, 1792, 1792, 1788, 1788, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1788, 1792, 1792, 1792, 1792,
     1788, 1792, 1792, 1792, 1792, 1788, 1788, 1792, 1792, 1792,
     1788, 1792, 1788, 1788, 1792, 1788, 1792, 1788, 1792, 1788,
     1788, 1788, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1788, 1792, 1792, 1788, 1792, 1792, 1792, 1788,
     1792, 1792, 1792, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1788, 1788, 1792, 1792, 1792, 1792, 1792, 1792,
     1788, 1788, 1792, 1788, 1792, 1792, 1788, 1792, 1792, 1792,
     1792, 1792, 1788, 1792, 1788, 1792, 1792, 1792, 1792, 1788,

     1792, 1788, 1792, 1788, 1792, 1788, 1792, 1792, 1792, 1792,
     1788, 1788, 1792, 1792, 1788, 1788, 1788, 1788, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1788,
     1788, 1792, 1792, 1788, 1788, 1792, 1792, 1792, 1788, 1788,
     1792, 1792, 1792, 1792, 1788, 1792, 1788, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1788, 1788, 1792, 1792, 1792,
     1792, 1792, 1792, 1788, 1792, 1792, 1788, 1792, 1792, 1788,
     1788, 1788, 1792, 1788, 1792, 1788, 1792, 1788, 1792, 1792,
     1792, 1792, 1788, 1792, 1788, 1788, 1792, 1792, 1792, 1792,
     1788, 1792, 1788, 1788, 1792, 1792, 1792, 1788, 1792, 1788,

     1788, 1792, 1792, 1792, 1788, 1792, 1792, 1792, 1788, 1792,
     1792, 1788, 1788, 1792, 1792, 1792, 1792, 1792, 1792, 1788,
     1792, 1788, 1788, 1788, 1792, 1788, 1788, 1792, 1792, 1792,
     1792, 1792, 1788, 1792, 1792, 1792, 1788, 1788, 1788, 1792,
     1792, 1788, 1792, 1792, 1792, 1792, 1792, 1788, 1792, 1792,
     1788, 1788, 1792, 1792, 1788, 1792, 1788, 1792, 1792, 1792,
     1788, 1792, 1792, 1788, 1792, 1792, 1792, 1788, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1788, 1788, 1788,
     1792, 1792, 1792, 1792, 1792, 1792, 1788, 1788, 1792, 1792,
     1788, 1788, 1792, 1792, 1788, 1792, 1792, 1788, 1788, 1792,

     1792, 1792, 1792, 1788, 1788, 1792, 1788, 1792, 1792, 1788,
     1792, 1792, 1788, 1788, 1792, 1792, 1792, 1792, 1788, 1792,
     1788, 1788, 1788, 1792, 1792, 1788, 1792, 1788, 1792, 1788,
     1792, 1788, 1792, 1792, 1788, 1788, 1788, 1788, 1788, 1792,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788,    0, 1788, 1788,
     1788, 1788, 1788, 1788, 1788

    } ;

static yyconst flex_int16_t yy_nxt[8285] =
    {   0,
        8,    9,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   29,    8,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       53,    8,    8,   55,   55,   73,   73,   56,   57,   58,
       59,   60,   61,   62,   63, 1094,   64,   79,   79,   65,
       66,   67,   68,   69,   70,   71,   55,   55,   80,   81,
       56,   57,   58,   59,   60,   61,   62,   63, 1096,   64,
      204,  204,   65,   66,   67,   68,   69,   70,   71,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   77, 1097,  127,   78,   78,
       84,   85,   86,  205,  206,   73,   73,  219,  135,   94,
       87,  128,   88,   95,  136,  220,   89,   90,   91,   92,
       93,   98,   96,  105, 1098,   99,  123,  106,  100,   97,
      244,  107,  101,  124,  245,  102,  125,  108,  103,  126,
      109,  104,  110,  110,  213,  213, 1099,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  214,  214,  110,  110,
      110,  110,  110,  110,  110,  129,  217,  130,  131,  218,

      240,  241,  221, 1100,  132,  133,  242,  111,  195,  112,
      134,  243,  196,  138,  113,  139,  197,  140,  269,  114,
      115,  141,  144,  222,  116,  328,  270,  142,  117,  329,
      145,  118,  143,  119,  120,  191,  146,  121,  289,  148,
      122,  149,  147,  150,  290,  332,  192,  258,  193,  235,
      169,  194,  259,  151,  170,  333,  236, 1101,  171,  152,
      153,  154,  237,  155,  172,  173,  161,  315,  294,  174,
      162,  156,  316,  157,  163,  158, 1102,  164,  159,  160,
      165,  198,  295,  166,  199,  200,  167,  175,  335,  176,
      381,  201,  177,  178,  202,  336,  265,  179,  266,  180,

      382,  181,  521,  185,  182,  183,  275,  186,  276,  184,
      187,  188,  277,  267,  268,  285,  522,  189,  286,  278,
      190,  224,  224,  279,  343,  344,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  232,  233,  224,  224,  224,
      224,  224,  224,  224,  351,  321,  318,  225,  322,  234,
      260,  393,  261,  226,  319,  262,  330,  394,  368,  352,
     1103,  263,  320,  227,  228,  228,  369,  331,  264,  228,
      228,  228,  228,  228,  228,  228,  228,  228, 1104,  399,
      228,  228,  228,  228,  228,  228,  228,  417,  229,  239,
      239,  400,  357,  418,  239,  239,  239,  239,  239,  239,

      239,  239,  239,  358,  359,  239,  239,  239,  239,  239,
      239,  239,  247,  248,  410,  323,  411,  364,  486,  324,
      616,  365,  487,  249,  250,  251,  325,  366,  617,  252,
      253,  254,  255,  284,  284,  326,  377,  396,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  378,  397,  284,
      284,  284,  284,  284,  284,  284,  292,  292,  665,  412,
      666,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      339,  413,  292,  292,  292,  292,  292,  292,  292,  383,
      340,  204,  204,  388,  403,  446,  341, 1106,  384,  342,
      389,  404,  447,  385,  427,  210,  386,  213,  213,  293,

      302,  302,  390,  428,  428,  302,  302,  302,  302,  302,
      302,  302,  302,  302,   83,   83,  302,  302,  302,  302,
      302,  302,  302,   83,   83,   83,  303,  304,   83,   83,
       83,   83,  305,   83,   83,   83,   83,  306,   83,  307,
       83,   83,  308,  309,   83,   83,   83,   83,   83,   83,
      310,  310,  516,  407,  629,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  630,  517,  310,  310,  310,  310,
      310,  310,  310,  408,  414,  457,  468,  458,  415, 1107,
      470, 1108,  416,  471,  607,  469,  608,  495,  311,  347,
      347,  496,  459,  609,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  595,  502,  347,  347,  347,  347,  347,
      347,  347,  542, 1109,  596, 1111,  543,  503,  348,  349,
      349,  504,  610,  611,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  472,  802,  349,  349,  349,  349,  349,
      349,  349,  662,  482,  473,  803,  619,  659,  660,  474,
      475,  663,  476,  620,  350,  353,  353,  483,  484,  485,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  651,
     1112,  353,  353,  353,  353,  353,  353,  353,  804,  804,
      823,  824,  354,  361,  361,  652,  674,  675,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  604, 1113,  361,

      361,  361,  361,  361,  361,  361,  371,  683,  680,  676,
      605,  372,  681,  606,  684,  687,  800,  687,  688,  688,
      801,  373,  816, 1115,  374,  935,  935,  375,  405,  405,
      817,  688,  688,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  888,  984,  405,  405,  405,  405,  405,  405,
      405,  406,  429,  429, 1116,  985,  889,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  986, 1117,  429,  429,
      429,  429,  429,  429,  429,  939,  987, 1039,  988, 1119,
     1040,  940, 1114, 1114, 1120, 1123, 1126, 1127, 1128, 1134,
      430,  432,  432, 1135, 1121, 1136,  432,  432,  432,  432,

      432,  432,  432,  432,  432, 1122, 1137,  432,  432,  432,
      432,  432,  432,  432,  433,  433, 1138, 1141, 1142,  433,
      433,  433,  433,  433,  433,  433,  433,  433, 1143, 1145,
      433,  433,  433,  433,  433,  433,  433,  434,  435,  435,
     1144, 1144, 1146,  435,  435,  435,  435,  435,  435,  435,
      435,  435, 1147, 1148,  435,  435,  435,  435,  435,  435,
      435, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1160,
     1161, 1162, 1163, 1165, 1166, 1167,  436,  438,  438, 1172,
     1174, 1175,  438,  438,  438,  438,  438,  438,  438,  438,
      438, 1176, 1177,  438,  438,  438,  438,  438,  438,  438,

      439,  439, 1178, 1180, 1181,  439,  439,  439,  439,  439,
      439,  439,  439,  439, 1183, 1184,  439,  439,  439,  439,
      439,  439,  439,  440,  440, 1185, 1186, 1187,  440,  440,
      440,  440,  440,  440,  440,  440,  440, 1188, 1189,  440,
      440,  440,  440,  440,  440,  440,  441,  441, 1190, 1191,
     1192,  441,  441,  441,  441,  441,  441,  441,  441,  441,
     1193, 1194,  441,  441,  441,  441,  441,  441,  441, 1168,
     1195, 1200, 1201, 1169, 1196, 1202, 1203, 1204,  442,  448,
      448, 1205, 1208, 1212,  448,  448,  448,  448,  448,  448,
      448,  448,  448, 1214, 1215,  448,  448,  448,  448,  448,

      448,  448,  454,  454, 1216, 1217, 1218,  454,  454,  454,
      454,  454,  454,  454,  454,  454, 1198, 1221,  454,  454,
      454,  454,  454,  454,  454,  455,  478,  478, 1222, 1225,
     1199,  478,  478,  478,  478,  478,  478,  478,  478,  478,
     1226, 1227,  478,  478,  478,  478,  478,  478,  478,  479,
      479, 1228, 1229, 1231,  479,  479,  479,  479,  479,  479,
      479,  479,  479, 1232, 1233,  479,  479,  479,  479,  479,
      479,  479,  488,  488, 1234, 1235, 1236,  488,  488,  488,
      488,  488,  488,  488,  488,  488, 1238, 1240,  488,  488,
      488,  488,  488,  488,  488, 1245,  691, 1246, 1248, 1249,

      692, 1252, 1253, 1255, 1256,  693, 1257, 1258, 1259, 1260,
      489,  694, 1261, 1262,  490,  492,  492,  695, 1263, 1265,
      492,  492,  492,  492,  492,  492,  492,  492,  492, 1266,
     1267,  492,  492,  492,  492,  492,  492,  492, 1269, 1270,
     1272, 1274, 1279, 1281, 1282, 1283, 1284,  493, 1285, 1286,
      494,  509,  509, 1287, 1288, 1290,  509,  509,  509,  509,
      509,  509,  509,  509,  509, 1291, 1292,  509,  509,  509,
      509,  509,  509,  509,  510,  515,  515, 1293, 1294, 1295,
      515,  515,  515,  515,  515,  515,  515,  515,  515, 1296,
     1297,  515,  515,  515,  515,  515,  515,  515,  523,  523,

     1299, 1302, 1303,  523,  523,  523,  523,  523,  523,  523,
      523,  523, 1304, 1306,  523,  523,  523,  523,  523,  523,
      523, 1307, 1308, 1309, 1310, 1311,  524, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1324,
     1329,  525,  530,  530, 1330, 1331, 1333,  530,  530,  530,
      530,  530,  530,  530,  530,  530, 1337, 1338,  530,  530,
      530,  530,  530,  530,  530,  548,  548, 1340, 1345, 1346,
      548,  548,  548,  548,  548,  548,  548,  548,  548, 1347,
     1348,  548,  548,  548,  548,  548,  548,  548, 1349, 1350,
     1351, 1352, 1356,  549, 1357, 1358, 1359, 1360, 1361, 1362,

     1363, 1364, 1365,  550,  554,  554, 1366, 1367, 1369,  554,
      554,  554,  554,  554,  554,  554,  554,  554, 1373, 1374,
      554,  554,  554,  554,  554,  554,  554,  564,  564, 1375,
     1376, 1378,  564,  564,  564,  564,  564,  564,  564,  564,
      564, 1379, 1380,  564,  564,  564,  564,  564,  564,  564,
      569,  569, 1382, 1383, 1384,  569,  569,  569,  569,  569,
      569,  569,  569,  569, 1386, 1387,  569,  569,  569,  569,
      569,  569,  569,  571,  571, 1388, 1389, 1390,  571,  571,
      571,  571,  571,  571,  571,  571,  571, 1391, 1393,  571,
      571,  571,  571,  571,  571,  571, 1394, 1396, 1397, 1398,

     1400, 1402, 1403, 1406, 1407, 1409, 1410, 1411, 1412, 1413,
     1415, 1417, 1418, 1419, 1420, 1423, 1424,  572,  573,  573,
     1425, 1428, 1429,  573,  573,  573,  573,  573,  573,  573,
      573,  573, 1430, 1432,  573,  573,  573,  573,  573,  573,
      573, 1435, 1436, 1437, 1439, 1440, 1440, 1443, 1444, 1445,
      574, 1446, 1447, 1449, 1450, 1451, 1452, 1454, 1455, 1457,
     1458, 1459,  575,  584,  584, 1461, 1465, 1466,  584,  584,
      584,  584,  584,  584,  584,  584,  584, 1467, 1468,  584,
      584,  584,  584,  584,  584,  584,  585,  585, 1469, 1470,
     1471,  585,  585,  585,  585,  585,  585,  585,  585,  585,

     1472, 1475,  585,  585,  585,  585,  585,  585,  585,  590,
      590, 1476, 1477, 1478,  590,  590,  590,  590,  590,  590,
      590,  590,  590, 1479, 1480,  590,  590,  590,  590,  590,
      590,  590,  602,  602, 1483, 1485, 1486,  602,  602,  602,
      602,  602,  602,  602,  602,  602, 1488, 1489,  602,  602,
      602,  602,  602,  602,  602,  634,  634, 1490, 1491, 1492,
      634,  634,  634,  634,  634,  634,  634,  634,  634, 1462,
     1494,  634,  634,  634,  634,  634,  634,  634, 1496, 1497,
     1498, 1499, 1501, 1503, 1505, 1463, 1507, 1508, 1509, 1510,
     1513, 1514, 1519,  635,  638,  638, 1520, 1521, 1522,  638,

      638,  638,  638,  638,  638,  638,  638,  638, 1523, 1524,
      638,  638,  638,  638,  638,  638,  638,  642,  642, 1525,
     1529, 1531,  642,  642,  642,  642,  642,  642,  642,  642,
      642, 1532, 1533,  642,  642,  642,  642,  642,  642,  642,
     1526, 1534, 1534,  643, 1527,  644, 1536, 1537, 1538, 1541,
     1542, 1543, 1544, 1548, 1549, 1550, 1551, 1552, 1553,  645,
     1554, 1555, 1558,  646,  650,  650, 1559, 1560, 1561,  650,
      650,  650,  650,  650,  650,  650,  650,  650, 1562, 1563,
      650,  650,  650,  650,  650,  650,  650,  654,  654, 1565,
     1566, 1568,  654,  654,  654,  654,  654,  654,  654,  654,

      654, 1569, 1573,  654,  654,  654,  654,  654,  654,  654,
      690,  690, 1577, 1579, 1580,  690,  690,  690,  690,  690,
      690,  690,  690,  690, 1581, 1582,  690,  690,  690,  690,
      690,  690,  690,  699,  699, 1584, 1587, 1588,  699,  699,
      699,  699,  699,  699,  699,  699,  699, 1589, 1590,  699,
      699,  699,  699,  699,  699,  699,  701,  701, 1592, 1597,
     1599,  701,  701,  701,  701,  701,  701,  701,  701,  701,
     1601,  702,  701,  701,  701,  701,  701,  701,  701,  713,
      713, 1602, 1603, 1604,  713,  713,  713,  713,  713,  713,
      713,  713,  713, 1606, 1607,  713,  713,  713,  713,  713,

      713,  713,  714,  714, 1608, 1610, 1611,  714,  714,  714,
      714,  714,  714,  714,  714,  714, 1615, 1616,  714,  714,
      714,  714,  714,  714,  714,  718,  718, 1617, 1618, 1619,
      718,  718,  718,  718,  718,  718,  718,  718,  718, 1621,
     1625,  718,  718,  718,  718,  718,  718,  718,  719,  720,
      742,  742, 1628, 1629, 1630,  742,  742,  742,  742,  742,
      742,  742,  742,  742, 1631, 1632,  742,  742,  742,  742,
      742,  742,  742,  743,  752,  752, 1634, 1635, 1636,  752,
      752,  752,  752,  752,  752,  752,  752,  752, 1640, 1641,
      752,  752,  752,  752,  752,  752,  752, 1595, 1643, 1644,

     1645, 1646, 1596, 1647, 1648, 1649, 1650, 1653, 1654, 1656,
     1658, 1659, 1660, 1662, 1663,  753,  762,  762, 1665, 1666,
     1667,  762,  762,  762,  762,  762,  762,  762,  762,  762,
     1669, 1670,  762,  762,  762,  762,  762,  762,  762,  763,
      763, 1671, 1672, 1673,  763,  763,  763,  763,  763,  763,
      763,  763,  763, 1674, 1675,  763,  763,  763,  763,  763,
      763,  763,  767,  767, 1676, 1677, 1680,  767,  767,  767,
      767,  767,  767,  767,  767,  767, 1681, 1682,  767,  767,
      767,  767,  767,  767,  767, 1683, 1684, 1685, 1686, 1690,
     1693, 1694, 1696, 1697, 1700, 1701, 1702, 1703, 1704, 1706,

     1708, 1709, 1711, 1712, 1715, 1716,  768,  780,  780, 1717,
     1718, 1720,  780,  780,  780,  780,  780,  780,  780,  780,
      780, 1721, 1724,  780,  780,  780,  780,  780,  780,  780,
      781,  781, 1725, 1727, 1729,  781,  781,  781,  781,  781,
      781,  781,  781,  781, 1731, 1732,  781,  781,  781,  781,
      781,  781,  781,  784,  784, 1733, 1734, 1738,  784,  784,
      784,  784,  784,  784,  784,  784,  784, 1740, 1741,  784,
      784,  784,  784,  784,  784,  784,  788,  788, 1743, 1744,
     1745,  788,  788,  788,  788,  788,  788,  788,  788,  788,
     1746, 1747,  788,  788,  788,  788,  788,  788,  788, 1748,

     1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758,
     1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,  789,  806,
      806, 1767, 1768, 1769,  806,  806,  806,  806,  806,  806,
      806,  806,  806, 1770, 1771,  806,  806,  806,  806,  806,
      806,  806,  809,  809, 1772, 1773, 1774,  809,  809,  809,
      809,  809,  809,  809,  809,  809, 1775, 1776,  809,  809,
      809,  809,  809,  809,  809,  811,  811, 1777, 1778, 1779,
      811,  811,  811,  811,  811,  811,  811,  811,  811, 1780,
     1781,  811,  811,  811,  811,  811,  811,  811,  814,  814,
     1782, 1783, 1784,  814,  814,  814,  814,  814,  814,  814,

      814,  814, 1785, 1786,  814,  814,  814,  814,  814,  814,
      814,  818,  818, 1787,   83,  208,  818,  818,  818,  818,
      818,  818,  818,  818,  818, 1092, 1091,  818,  818,  818,
      818,  818,  818,  818,  832,  832, 1090, 1089, 1088,  832,
      832,  832,  832,  832,  832,  832,  832,  832, 1087, 1086,
      832,  832,  832,  832,  832,  832,  832,  834,  834, 1085,
     1084, 1083,  834,  834,  834,  834,  834,  834,  834,  834,
      834, 1082, 1080,  834,  834,  834,  834,  834,  834,  834,
      835,  835, 1079, 1078, 1077,  835,  835,  835,  835,  835,
      835,  835,  835,  835, 1076, 1075,  835,  835,  835,  835,

      835,  835,  835, 1074, 1073, 1072, 1071, 1068, 1067, 1066,
     1065, 1062,  836,  839,  839, 1057, 1056, 1055,  839,  839,
      839,  839,  839,  839,  839,  839,  839, 1053, 1049,  839,
      839,  839,  839,  839,  839,  839,  840,  840, 1047, 1045,
     1043,  840,  840,  840,  840,  840,  840,  840,  840,  840,
     1042, 1041,  840,  840,  840,  840,  840,  840,  840,  841,
      841, 1038, 1037, 1036,  841,  841,  841,  841,  841,  841,
      841,  841,  841, 1033, 1032,  841,  841,  841,  841,  841,
      841,  841,  847,  847, 1030, 1029, 1028,  847,  847,  847,
      847,  847,  847,  847,  847,  847, 1027, 1026,  847,  847,

      847,  847,  847,  847,  847,  862,  862, 1025, 1024, 1021,
      862,  862,  862,  862,  862,  862,  862,  862,  862, 1020,
     1018,  862,  862,  862,  862,  862,  862,  862,  863,  863,
     1017, 1011, 1010,  863,  863,  863,  863,  863,  863,  863,
      863,  863, 1009, 1008,  863,  863,  863,  863,  863,  863,
      863,  865,  865, 1007, 1006, 1005,  865,  865,  865,  865,
      865,  865,  865,  865,  865, 1004, 1003,  865,  865,  865,
      865,  865,  865,  865,  873,  873, 1002, 1001, 1000,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  999,  998,
      873,  873,  873,  873,  873,  873,  873,  874,  874,  997,

      996,  995,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  994,  993,  874,  874,  874,  874,  874,  874,  874,
      884,  884,  992,  991,  990,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  989,  983,  884,  884,  884,  884,
      884,  884,  884,  885,  885,  982,  981,  980,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  979,  978,  885,
      885,  885,  885,  885,  885,  885,  887,  887,  976,  975,
      974,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      973,  972,  887,  887,  887,  887,  887,  887,  887,  893,
      893,  971,  970,  969,  893,  893,  893,  893,  893,  893,

      893,  893,  893,  968,  967,  893,  893,  893,  893,  893,
      893,  893,  900,  900,  965,  962,  961,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  960,  959,  900,  900,
      900,  900,  900,  900,  900,  901,  901,  958,  957,  955,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  954,
      953,  901,  901,  901,  901,  901,  901,  901,  952,  950,
      949,  948,  946,  943,  942,  941,  938,  937,  936,  932,
      930,  928,  923,  922,  921,  920,  919,  902,  918,  916,
      915,  914,  913,  912,  903,  908,  908,  911,  910,  909,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  907,

      906,  908,  908,  908,  908,  908,  908,  908,  917,  917,
      905,  904,  899,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  898,  897,  917,  917,  917,  917,  917,  917,
      917,  924,  924,  896,  895,  894,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  892,  891,  924,  924,  924,
      924,  924,  924,  924,  925,  925,  890,  886,  883,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  882,  881,
      925,  925,  925,  925,  925,  925,  925,  926,  926,  880,
      879,  878,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  877,  876,  926,  926,  926,  926,  926,  926,  926,

      875,  872,  871,  870,  869,  927,  929,  929,  868,  867,
      866,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      864,  861,  929,  929,  929,  929,  929,  929,  929,  931,
      931,  860,  859,  858,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  857,  856,  931,  931,  931,  931,  931,
      931,  931,  933,  933,  855,  854,  853,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  852,  851,  933,  933,
      933,  933,  933,  933,  933,  850,  849,  848,  846,  845,
      844,  843,  842,  838,  837,  833,  831,  830,  829,  828,
      827,  826,  825,  822,  934,  944,  944,  821,  820,  819,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  815,
      813,  944,  944,  944,  944,  944,  944,  944,  945,  945,
      812,  810,  808,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  807,  805,  945,  945,  945,  945,  945,  945,
      945,  947,  947,  799,  798,  797,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  796,  795,  947,  947,  947,
      947,  947,  947,  947,  951,  951,  794,  793,  792,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  791,  790,
      951,  951,  951,  951,  951,  951,  951,  956,  956,  787,
      786,  785,  956,  956,  956,  956,  956,  956,  956,  956,

      956,  783,  782,  956,  956,  956,  956,  956,  956,  956,
      963,  963,  779,  778,  777,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  776,  775,  963,  963,  963,  963,
      963,  963,  963,  964,  964,  774,  773,  772,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  771,  770,  964,
      964,  964,  964,  964,  964,  964,  966,  966,  769,  766,
      765,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      764,  761,  966,  966,  966,  966,  966,  966,  966,  977,
      977,  760,  759,  758,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  757,  756,  977,  977,  977,  977,  977,

      977,  977, 1012, 1012,  755,  754,  751, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012,  750,  749, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1013, 1013,  748,  747,  746,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,  745,
      744, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1014, 1014,
      741,  740,  739, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014,  738,  737, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1015, 1015,  736,  735,  734, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015,  733,  732, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1016, 1016,  731,  730,  729, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,  728,  727,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1019, 1019,  726,
      725,  724, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019,  723,  722, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1022, 1022,  721,  717,  716, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022,  715,  712, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1023, 1023,  711,  710,  709, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  708,  707, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1031, 1031,  706,  705,
      704, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,

      703,  700, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1034,
     1034,  698,  697,  696, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034,  689,  686, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1035, 1035,  685,  682,  679, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035,  678,  677, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1044, 1044,  673,  672,  671,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,  670,
      669, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1046, 1046,
      668,  667,  664, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046,  661,  658, 1046, 1046, 1046, 1046, 1046, 1046,

     1046, 1048, 1048,  657,  656,  655, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048,  653,  649, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1050, 1050,  648,  647,  641, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,  640,  639,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051,  637,
      636,  633, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051,  632,  631, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1052, 1052,  628,  627,  626, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052,  625,  624, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1054, 1054,  623,  622,  621, 1054, 1054,

     1054, 1054, 1054, 1054, 1054, 1054, 1054,  618,  615, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1058, 1058,  614,  613,
      612, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
      603,  601, 1058, 1058, 1058, 1058, 1058, 1058, 1058,  600,
      599,  598,  597,  594,  593,  592,  591,  589,  588,  587,
      586,  583,  582,  581,  580,  579,  578,  577, 1059, 1060,
     1060,  576,  570,  568, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060,  567,  566, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1061, 1061,  565,  563,  562, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061,  561,  560, 1061, 1061,

     1061, 1061, 1061, 1061, 1061, 1063, 1063,  559,  558,  557,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,  556,
      555, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1064, 1064,
      553,  552,  551, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064,  547,  546, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1069, 1069,  545,  544,  541, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069,  540,  539, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1070, 1070,  538,  537,  536, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,  535,  534,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1081, 1081,  533,

      532,  531, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081,  529,  528, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1093, 1093,  527,  526,  520, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093,  519,  518, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1095, 1095,  514,  513,  512, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095,  511,  508, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1105, 1105,  507,  506,
      505, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
      501,  500, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1110,
     1110,  499,  498,  497, 1110, 1110, 1110, 1110, 1110, 1110,

     1110, 1110, 1110,  491,  481, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1118, 1118,  480,  477,  467, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118,  466,  465, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1124, 1124,  464,  463,  462,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,  461,
      460, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1125, 1125,
      456,  453,  452, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
     1125, 1125,  451,  450, 1125, 1125, 1125, 1125, 1125, 1125,
     1125, 1129, 1129,  449,  445,  444, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129,  443,  437, 1129, 1129, 1129,

     1129, 1129, 1129, 1129, 1130, 1130,  431,  212,  210, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,  426,  425,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1131, 1131,  424,
      423,  422, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131,  421,  420, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1132, 1132,  419,  409,  402, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132,  401,  398, 1132, 1132, 1132, 1132,
     1132, 1132, 1132,  395,  392,  391,  387,  380,  379,  376,
      370,  367,  363,  362,  360,  356,  355,  346,  345,  338,
      337,  334, 1133, 1139, 1139,  327,  317,  314, 1139, 1139,

     1139, 1139, 1139, 1139, 1139, 1139, 1139,  313,  312, 1139,
     1139, 1139, 1139, 1139, 1139, 1139,  301,  300,  299,  298,
      297,  296,  291,  288,  287,  283,  282,  281,  280,  274,
      273,  272,  271,  257,  256,  246,  238,  231,  230,  223,
      216,  215,  212, 1140, 1156, 1156,   76,  210,  207, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,  203,  168,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1158, 1158,  137,
       82,   76, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1788, 1788, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1159, 1159, 1788, 1788, 1788, 1159, 1159, 1159, 1159, 1159,

     1159, 1159, 1159, 1159, 1788, 1788, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1164, 1164, 1788, 1788, 1788, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1788, 1788, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1170, 1170, 1788, 1788,
     1788, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1788, 1788, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171,
     1171, 1788, 1788, 1788, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1788, 1788, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1173, 1173, 1788, 1788, 1788, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1788, 1788, 1173, 1173,

     1173, 1173, 1173, 1173, 1173, 1179, 1179, 1788, 1788, 1788,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1788,
     1788, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1182, 1182,
     1788, 1788, 1788, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1788, 1788, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1197, 1197, 1788, 1788, 1788, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1788, 1788, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1206, 1206, 1788, 1788, 1788, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1788, 1788,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1207, 1207, 1788,

     1788, 1788, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1788, 1788, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1209, 1209, 1788, 1788, 1788, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1788, 1788, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1210, 1210, 1788, 1788, 1788, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1788, 1788, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1211, 1213, 1213, 1788, 1788,
     1788, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1788, 1788, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1219,

     1219, 1788, 1788, 1788, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1788, 1788, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1220, 1220, 1788, 1788, 1788, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1788, 1788, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1223, 1223, 1788, 1788, 1788,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1788,
     1788, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1224, 1224,
     1788, 1788, 1788, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1788, 1788, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1230, 1230, 1788, 1788, 1788, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1788, 1788, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1237, 1237, 1788, 1788, 1788, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1788, 1788,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1239, 1239, 1788,
     1788, 1788, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1788, 1788, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1241, 1241, 1788, 1788, 1788, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1788, 1788, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1788, 1788, 1242, 1243, 1243, 1788, 1788, 1788, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1788, 1788, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1244, 1244, 1788, 1788,
     1788, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1788, 1788, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1247,
     1247, 1788, 1788, 1788, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1788, 1788, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1250, 1250, 1788, 1788, 1788, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1788, 1788, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1251, 1251, 1788, 1788, 1788,

     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1788,
     1788, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1254, 1254,
     1788, 1788, 1788, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1788, 1788, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1264, 1264, 1788, 1788, 1788, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1788, 1788, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1268, 1268, 1788, 1788, 1788, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1788, 1788,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1271, 1271, 1788,
     1788, 1788, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1788, 1788, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1273, 1273, 1788, 1788, 1788, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1788, 1788, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1275, 1275, 1788, 1788, 1788, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1788, 1788, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1276, 1276, 1788, 1788,
     1788, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1788, 1788, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1277, 1278,

     1278, 1788, 1788, 1788, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1788, 1788, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1280, 1280, 1788, 1788, 1788, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1788, 1788, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1289, 1289, 1788, 1788, 1788,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1788,
     1788, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1298, 1298,
     1788, 1788, 1788, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1788, 1788, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1300, 1300, 1788, 1788, 1788, 1300, 1300, 1300, 1300,

     1300, 1300, 1300, 1300, 1300, 1788, 1788, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1301, 1301, 1788, 1788, 1788, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1788, 1788,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1305, 1305, 1788,
     1788, 1788, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1788, 1788, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1323, 1323, 1788, 1788, 1788, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1323, 1788, 1788, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1325, 1325, 1788, 1788, 1788, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1788, 1788, 1325,

     1325, 1325, 1325, 1325, 1325, 1325, 1788, 1788, 1788, 1788,
     1326, 1327, 1327, 1788, 1788, 1788, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1788, 1788, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1328, 1328, 1788, 1788, 1788, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1788, 1788,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1332, 1332, 1788,
     1788, 1788, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1788, 1788, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1334, 1334, 1788, 1788, 1788, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1788, 1788, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1335, 1335, 1788, 1788, 1788, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1788, 1788, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1336, 1339, 1339, 1788, 1788,
     1788, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1788, 1788, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1341,
     1341, 1788, 1788, 1788, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1788, 1788, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1342, 1342, 1788, 1788, 1788, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1788, 1788, 1342, 1342,

     1342, 1342, 1342, 1342, 1342, 1343, 1344, 1344, 1788, 1788,
     1788, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1788, 1788, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1353,
     1353, 1788, 1788, 1788, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1788, 1788, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1354, 1354, 1788, 1788, 1788, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1788, 1788, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1355, 1355, 1788, 1788, 1788,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1788,
     1788, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1368, 1368,

     1788, 1788, 1788, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1788, 1788, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1370, 1370, 1788, 1788, 1788, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1788, 1788, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1371, 1371, 1788, 1788, 1788, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1788, 1788,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372, 1788,
     1788, 1788, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1788, 1788, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1377, 1377, 1788, 1788, 1788, 1377, 1377, 1377, 1377, 1377,

     1377, 1377, 1377, 1377, 1788, 1788, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1381, 1381, 1788, 1788, 1788, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1788, 1788, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1385, 1385, 1788, 1788,
     1788, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1788, 1788, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1392,
     1392, 1788, 1788, 1788, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1788, 1788, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1395, 1395, 1788, 1788, 1788, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1788, 1788, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1399, 1399, 1788, 1788, 1788,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1788,
     1788, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1401, 1401,
     1788, 1788, 1788, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1788, 1788, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1404, 1404, 1788, 1788, 1788, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1788, 1788, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1405, 1405, 1788, 1788, 1788, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1788, 1788,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1408, 1408, 1788,

     1788, 1788, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1788, 1788, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1414, 1414, 1788, 1788, 1788, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1788, 1788, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1416, 1416, 1788, 1788, 1788, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1788, 1788, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1421, 1421, 1788, 1788,
     1788, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1788, 1788, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422,
     1426, 1426, 1788, 1788, 1788, 1426, 1426, 1426, 1426, 1426,

     1426, 1426, 1426, 1426, 1788, 1788, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1427, 1427, 1788, 1788, 1788, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1788, 1788, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1431, 1431, 1788, 1788,
     1788, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1788, 1788, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1433,
     1433, 1788, 1788, 1788, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1788, 1788, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1434, 1434, 1788, 1788, 1788, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1788, 1788, 1434, 1434,

     1434, 1434, 1434, 1434, 1434, 1438, 1438, 1788, 1788, 1788,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1788,
     1788, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1441, 1441,
     1788, 1788, 1788, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1788, 1788, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1442, 1442, 1788, 1788, 1788, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1788, 1788, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1448, 1448, 1788, 1788, 1788, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1788, 1788,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1453, 1453, 1788,

     1788, 1788, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1788, 1788, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1456, 1456, 1788, 1788, 1788, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1788, 1788, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1460, 1460, 1788, 1788, 1788, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1788, 1788, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1464, 1464, 1788, 1788,
     1788, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1788, 1788, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1473,
     1473, 1788, 1788, 1788, 1473, 1473, 1473, 1473, 1473, 1473,

     1473, 1473, 1473, 1788, 1788, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1474, 1474, 1788, 1788, 1788, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1788, 1788, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1481, 1481, 1788, 1788, 1788,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1788,
     1788, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1482, 1482,
     1788, 1788, 1788, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1788, 1788, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1484, 1484, 1788, 1788, 1788, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1788, 1788, 1484, 1484, 1484,

     1484, 1484, 1484, 1484, 1487, 1487, 1788, 1788, 1788, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1788, 1788,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1493, 1493, 1788,
     1788, 1788, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1788, 1788, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1495, 1495, 1788, 1788, 1788, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1788, 1788, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1500, 1500, 1788, 1788, 1788, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1788, 1788, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1502, 1502, 1788, 1788,

     1788, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1788, 1788, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1504,
     1504, 1788, 1788, 1788, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1788, 1788, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1506, 1506, 1788, 1788, 1788, 1506, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1506, 1788, 1788, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1511, 1511, 1788, 1788, 1788,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1788,
     1788, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1512, 1512,
     1788, 1788, 1788, 1512, 1512, 1512, 1512, 1512, 1512, 1512,

     1512, 1512, 1788, 1788, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1515, 1515, 1788, 1788, 1788, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1515, 1788, 1788, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1516, 1516, 1788, 1788, 1788, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1788, 1788,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1517, 1517, 1788,
     1788, 1788, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1788, 1788, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1518, 1518, 1788, 1788, 1788, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1788, 1788, 1518, 1518, 1518, 1518,

     1518, 1518, 1518, 1528, 1528, 1788, 1788, 1788, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1788, 1788, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1530, 1530, 1788, 1788,
     1788, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1788, 1788, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1535,
     1535, 1788, 1788, 1788, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1535, 1788, 1788, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1539, 1539, 1788, 1788, 1788, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1788, 1788, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1540, 1540, 1788, 1788, 1788,

     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1788,
     1788, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1545, 1545,
     1788, 1788, 1788, 1545, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1545, 1788, 1788, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1546, 1547, 1547, 1788, 1788, 1788, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1788, 1788, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1556, 1556, 1788, 1788, 1788,
     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1788,
     1788, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1557, 1557,
     1788, 1788, 1788, 1557, 1557, 1557, 1557, 1557, 1557, 1557,

     1557, 1557, 1788, 1788, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1564, 1564, 1788, 1788, 1788, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1788, 1788, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1567, 1567, 1788, 1788, 1788, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1788, 1788,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1570, 1570, 1788,
     1788, 1788, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1788, 1788, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1571, 1571, 1788, 1788, 1788, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1788, 1788, 1571, 1571, 1571, 1571,

     1571, 1571, 1571, 1572, 1572, 1788, 1788, 1788, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1788, 1788, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1574, 1574, 1788, 1788,
     1788, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1788, 1788, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1575, 1576,
     1576, 1788, 1788, 1788, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1788, 1788, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1578, 1578, 1788, 1788, 1788, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1788, 1788, 1578, 1578,

     1578, 1578, 1578, 1578, 1578, 1583, 1583, 1788, 1788, 1788,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1788,
     1788, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1585, 1585,
     1788, 1788, 1788, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1788, 1788, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1586, 1586, 1788, 1788, 1788, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1788, 1788, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1591, 1591, 1788, 1788, 1788, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1788, 1788,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1593, 1593, 1788,

     1788, 1788, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1788, 1788, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1594, 1594, 1788, 1788, 1788, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1788, 1788, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1598, 1598, 1788, 1788, 1788, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1788, 1788, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1600, 1600, 1788, 1788,
     1788, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1788, 1788, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1605,
     1605, 1788, 1788, 1788, 1605, 1605, 1605, 1605, 1605, 1605,

     1605, 1605, 1605, 1788, 1788, 1605, 1605, 1605, 1605, 1605,
     1605, 1605, 1609, 1609, 1788, 1788, 1788, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1788, 1788, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1612, 1612, 1788, 1788, 1788,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1788,
     1788, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1613, 1613,
     1788, 1788, 1788, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1788, 1788, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,

     1614, 1620, 1620, 1788, 1788, 1788, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1788, 1788, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1622, 1622, 1788, 1788, 1788, 1622,
     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1788, 1788,
     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1623, 1623, 1788,
     1788, 1788, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1788, 1788, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1624, 1624, 1788, 1788, 1788, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1788, 1788, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1626, 1626, 1788, 1788, 1788, 1626, 1626,

     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1788, 1788, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1627, 1627, 1788, 1788,
     1788, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1788, 1788, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1633,
     1633, 1788, 1788, 1788, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1788, 1788, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1637, 1637, 1788, 1788, 1788, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1788, 1788, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1638, 1638, 1788, 1788, 1788,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1788,

     1788, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1639, 1639,
     1788, 1788, 1788, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1639, 1788, 1788, 1639, 1639, 1639, 1639, 1639, 1639,
     1639, 1642, 1642, 1788, 1788, 1788, 1642, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1788, 1788, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1651, 1651, 1788, 1788, 1788, 1651,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1788, 1788,
     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1652, 1652, 1788,
     1788, 1788, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1788, 1788, 1652, 1652, 1652, 1652, 1652, 1652, 1652,

     1655, 1655, 1788, 1788, 1788, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1788, 1788, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1657, 1657, 1788, 1788, 1788, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1788, 1788, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1661, 1661, 1788, 1788,
     1788, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1788, 1788, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1664,
     1664, 1788, 1788, 1788, 1664, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1788, 1788, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1668, 1668, 1788, 1788, 1788, 1668, 1668, 1668,

     1668, 1668, 1668, 1668, 1668, 1668, 1788, 1788, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1678, 1678, 1788, 1788, 1788,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1788,
     1788, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1679, 1679,
     1788, 1788, 1788, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679, 1788, 1788, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1687, 1687, 1788, 1788, 1788, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1788, 1788, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1688, 1688, 1788, 1788, 1788, 1688,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1788, 1788,

     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1689, 1691, 1691, 1788,
     1788, 1788, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1691, 1788, 1788, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1692, 1692, 1788, 1788, 1788, 1692, 1692, 1692, 1692, 1692,
     1692, 1692, 1692, 1692, 1788, 1788, 1692, 1692, 1692, 1692,
     1692, 1692, 1692, 1695, 1695, 1788, 1788, 1788, 1695, 1695,
     1695, 1695, 1695, 1695, 1695, 1695, 1695, 1788, 1788, 1695,
     1695, 1695, 1695, 1695, 1695, 1695, 1698, 1698, 1788, 1788,

     1788, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1788, 1788, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1699,
     1699, 1788, 1788, 1788, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1788, 1788, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1705, 1705, 1788, 1788, 1788, 1705, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1788, 1788, 1705, 1705,
     1705, 1705, 1705, 1705, 1705, 1707, 1707, 1788, 1788, 1788,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1788,
     1788, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1710, 1710,
     1788, 1788, 1788, 1710, 1710, 1710, 1710, 1710, 1710, 1710,

     1710, 1710, 1788, 1788, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1713, 1713, 1788, 1788, 1788, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1788, 1788, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1714, 1714, 1788, 1788, 1788, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1788, 1788,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1719, 1719, 1788,
     1788, 1788, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
     1719, 1788, 1788, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
     1722, 1722, 1788, 1788, 1788, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1788, 1788, 1722, 1722, 1722, 1722,

     1722, 1722, 1722, 1723, 1723, 1788, 1788, 1788, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1788, 1788, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1726, 1726, 1788, 1788,
     1788, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
     1788, 1788, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1728,
     1728, 1788, 1788, 1788, 1728, 1728, 1728, 1728, 1728, 1728,
     1728, 1728, 1728, 1788, 1788, 1728, 1728, 1728, 1728, 1728,
     1728, 1728, 1730, 1730, 1788, 1788, 1788, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 1730, 1730, 1788, 1788, 1730, 1730,
     1730, 1730, 1730, 1730, 1730, 1735, 1735, 1788, 1788, 1788,

     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1788,
     1788, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1736, 1736,
     1788, 1788, 1788, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1788, 1788, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1737, 1737, 1788, 1788, 1788, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1788, 1788, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1739, 1739, 1788, 1788, 1788, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1788, 1788,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1742, 1742, 1788,
     1788, 1788, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,

     1742, 1788, 1788, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
        8,    8,    8,    8,   74,   74, 1788,   74,   75,   75,
       75,   75,  209, 1788,  209,  209,  211,  211,  211,  211,
        7, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788
    } ;

static yyconst flex_int16_t yy_chk[8285] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    9,    9,    3,    3,    3,
        3,    3,    3,    3,    3,  872,    3,   22,   22,    3,
        3,    3,    3,    3,    3,    3,    4,    4,   25,   25,
        4,    4,    4,    4,    4,    4,    4,    4,  876,    4,
       55,   55,    4,    4,    4,    4,    4,    4,    4,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   19,  877,   37,   19,   19,
       30,   30,   30,   67,   67,   73,   73,   87,   39,   31,
       30,   37,   30,   31,   39,   87,   30,   30,   30,   30,
       30,   32,   31,   33,  878,   32,   36,   33,   32,   31,
      100,   33,   32,   36,  100,   32,   36,   33,   32,   36,
       33,   32,   34,   34,   78,   78,  879,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   79,   79,   34,   34,
       34,   34,   34,   34,   34,   38,   86,   38,   38,   86,

       98,   98,   88,  880,   38,   38,   99,   34,   51,   34,
       38,   99,   51,   41,   34,   41,   51,   41,  108,   34,
       35,   41,   42,   88,   35,  144,  108,   41,   35,  144,
       42,   35,   41,   35,   35,   50,   42,   35,  123,   43,
       35,   43,   42,   43,  123,  146,   50,  105,   50,   95,
       47,   50,  105,   43,   47,  146,   95,  881,   47,   43,
       44,   44,   95,   44,   47,   47,   45,  138,  126,   47,
       45,   44,  138,   44,   45,   44,  882,   45,   44,   44,
       45,   52,  126,   45,   52,   52,   45,   48,  148,   48,
      175,   52,   48,   48,   52,  148,  107,   48,  107,   48,

      175,   48,  283,   49,   48,   48,  114,   49,  114,   48,
       49,   49,  114,  107,  107,  120,  283,   49,  120,  114,
       49,   90,   90,  114,  152,  152,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   94,   94,   90,   90,   90,
       90,   90,   90,   90,  157,  141,  140,   90,  141,   94,
      106,  181,  106,   90,  140,  106,  145,  181,  168,  157,
      883,  106,  140,   90,   91,   91,  168,  145,  106,   91,
       91,   91,   91,   91,   91,   91,   91,   91,  886,  185,
       91,   91,   91,   91,   91,   91,   91,  195,   91,   97,
       97,  185,  161,  195,   97,   97,   97,   97,   97,   97,

       97,   97,   97,  161,  161,   97,   97,   97,   97,   97,
       97,   97,  102,  102,  192,  142,  192,  166,  258,  142,
      371,  166,  258,  102,  102,  102,  142,  166,  371,  102,
      102,  102,  102,  119,  119,  142,  172,  183,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  172,  183,  119,
      119,  119,  119,  119,  119,  119,  125,  125,  410,  193,
      410,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      151,  193,  125,  125,  125,  125,  125,  125,  125,  176,
      151,  204,  204,  178,  188,  230,  151,  889,  176,  151,
      178,  188,  230,  176,  210,  210,  176,  213,  213,  125,

      133,  133,  178,  214,  214,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      134,  134,  279,  190,  382,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  382,  279,  134,  134,  134,  134,
      134,  134,  134,  190,  194,  240,  249,  240,  194,  890,
      250,  891,  194,  250,  365,  249,  365,  262,  134,  155,
      155,  262,  240,  365,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  355,  268,  155,  155,  155,  155,  155,
      155,  155,  304,  892,  355,  895,  304,  268,  155,  156,
      156,  268,  366,  366,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  251,  549,  156,  156,  156,  156,  156,
      156,  156,  408,  257,  251,  549,  373,  406,  406,  251,
      251,  408,  251,  373,  156,  158,  158,  257,  257,  257,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  398,
      896,  158,  158,  158,  158,  158,  158,  158,  550,  550,
      572,  572,  158,  163,  163,  398,  418,  418,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  364,  897,  163,

      163,  163,  163,  163,  163,  163,  170,  424,  422,  418,
      364,  170,  422,  364,  424,  428,  547,  428,  428,  428,
      547,  170,  563,  899,  170,  687,  687,  170,  189,  189,
      563,  688,  688,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  643,  743,  189,  189,  189,  189,  189,  189,
      189,  189,  215,  215,  902,  743,  643,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  744,  903,  215,  215,
      215,  215,  215,  215,  215,  693,  744,  803,  744,  905,
      803,  693,  898,  898,  906,  909,  912,  913,  914,  920,
      215,  217,  217,  921,  907,  922,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  907,  923,  217,  217,  217,
      217,  217,  217,  217,  218,  218,  927,  930,  932,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  934,  936,
      218,  218,  218,  218,  218,  218,  218,  218,  219,  219,
      935,  935,  937,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  938,  939,  219,  219,  219,  219,  219,  219,
      219,  940,  941,  942,  943,  946,  948,  949,  952,  955,
      957,  958,  959,  961,  962,  965,  219,  221,  221,  970,
      972,  973,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  974,  975,  221,  221,  221,  221,  221,  221,  221,

      222,  222,  976,  979,  980,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  982,  983,  222,  222,  222,  222,
      222,  222,  222,  223,  223,  984,  985,  986,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  987,  988,  223,
      223,  223,  223,  223,  223,  223,  225,  225,  989,  990,
      991,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      992,  993,  225,  225,  225,  225,  225,  225,  225,  967,
      994,  997,  998,  967,  994,  999, 1000, 1001,  225,  231,
      231, 1002, 1005, 1008,  231,  231,  231,  231,  231,  231,
      231,  231,  231, 1010, 1011,  231,  231,  231,  231,  231,

      231,  231,  237,  237, 1017, 1018, 1020,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  996, 1025,  237,  237,
      237,  237,  237,  237,  237,  237,  253,  253, 1026, 1029,
      996,  253,  253,  253,  253,  253,  253,  253,  253,  253,
     1030, 1032,  253,  253,  253,  253,  253,  253,  253,  254,
      254, 1033, 1036, 1038,  254,  254,  254,  254,  254,  254,
      254,  254,  254, 1039, 1040,  254,  254,  254,  254,  254,
      254,  254,  259,  259, 1041, 1042, 1043,  259,  259,  259,
      259,  259,  259,  259,  259,  259, 1047, 1053,  259,  259,
      259,  259,  259,  259,  259, 1059,  434, 1062, 1066, 1067,

      434, 1072, 1073, 1075, 1076,  434, 1077, 1078, 1079, 1080,
      259,  434, 1082, 1083,  259,  261,  261,  434, 1084, 1086,
      261,  261,  261,  261,  261,  261,  261,  261,  261, 1087,
     1088,  261,  261,  261,  261,  261,  261,  261, 1090, 1091,
     1094, 1097, 1101, 1103, 1104, 1106, 1107,  261, 1108, 1109,
      261,  273,  273, 1111, 1112, 1115,  273,  273,  273,  273,
      273,  273,  273,  273,  273, 1116, 1117,  273,  273,  273,
      273,  273,  273,  273,  273,  278,  278, 1119, 1120, 1121,
      278,  278,  278,  278,  278,  278,  278,  278,  278, 1122,
     1123,  278,  278,  278,  278,  278,  278,  278,  285,  285,

     1127, 1134, 1135,  285,  285,  285,  285,  285,  285,  285,
      285,  285, 1136, 1138,  285,  285,  285,  285,  285,  285,
      285, 1140, 1141, 1142, 1143, 1144,  285, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1160,
     1165,  285,  290,  290, 1166, 1167, 1169,  290,  290,  290,
      290,  290,  290,  290,  290,  290, 1175, 1176,  290,  290,
      290,  290,  290,  290,  290,  309,  309, 1178, 1184, 1185,
      309,  309,  309,  309,  309,  309,  309,  309,  309, 1186,
     1187,  309,  309,  309,  309,  309,  309,  309, 1188, 1189,
     1190, 1191, 1195,  309, 1196, 1198, 1199, 1200, 1201, 1202,

     1203, 1204, 1205,  309,  314,  314, 1208, 1211, 1214,  314,
      314,  314,  314,  314,  314,  314,  314,  314, 1218, 1221,
      314,  314,  314,  314,  314,  314,  314,  324,  324, 1222,
     1225, 1227,  324,  324,  324,  324,  324,  324,  324,  324,
      324, 1228, 1229,  324,  324,  324,  324,  324,  324,  324,
      329,  329, 1232, 1233, 1234,  329,  329,  329,  329,  329,
      329,  329,  329,  329, 1236, 1238,  329,  329,  329,  329,
      329,  329,  329,  331,  331, 1240, 1242, 1245,  331,  331,
      331,  331,  331,  331,  331,  331,  331, 1246, 1249,  331,
      331,  331,  331,  331,  331,  331, 1252, 1255, 1256, 1257,

     1259, 1261, 1262, 1266, 1267, 1270, 1272, 1274, 1277, 1279,
     1282, 1284, 1285, 1286, 1287, 1290, 1291,  331,  332,  332,
     1292, 1295, 1296,  332,  332,  332,  332,  332,  332,  332,
      332,  332, 1297, 1302,  332,  332,  332,  332,  332,  332,
      332, 1306, 1307, 1308, 1310, 1311, 1311, 1314, 1315, 1316,
      332, 1317, 1318, 1320, 1321, 1322, 1324, 1329, 1330, 1333,
     1336, 1337,  332,  341,  341, 1340, 1346, 1347,  341,  341,
      341,  341,  341,  341,  341,  341,  341, 1348, 1349,  341,
      341,  341,  341,  341,  341,  341,  342,  342, 1350, 1351,
     1352,  342,  342,  342,  342,  342,  342,  342,  342,  342,

     1356, 1359,  342,  342,  342,  342,  342,  342,  342,  348,
      348, 1360, 1361, 1362,  348,  348,  348,  348,  348,  348,
      348,  348,  348, 1363, 1364,  348,  348,  348,  348,  348,
      348,  348,  362,  362, 1367, 1373, 1374,  362,  362,  362,
      362,  362,  362,  362,  362,  362, 1376, 1378,  362,  362,
      362,  362,  362,  362,  362,  386,  386, 1379, 1380, 1382,
      386,  386,  386,  386,  386,  386,  386,  386,  386, 1343,
     1384,  386,  386,  386,  386,  386,  386,  386, 1387, 1388,
     1389, 1390, 1393, 1396, 1398, 1343, 1402, 1403, 1406, 1407,
     1411, 1412, 1419,  386,  389,  389, 1420, 1422, 1423,  389,

      389,  389,  389,  389,  389,  389,  389,  389, 1424, 1425,
      389,  389,  389,  389,  389,  389,  389,  393,  393, 1428,
     1432, 1436,  393,  393,  393,  393,  393,  393,  393,  393,
      393, 1437, 1439,  393,  393,  393,  393,  393,  393,  393,
     1429, 1440, 1440,  393, 1429,  393, 1444, 1445, 1446, 1450,
     1451, 1452, 1454, 1458, 1459, 1461, 1462, 1463, 1465,  393,
     1466, 1467, 1470,  393,  397,  397, 1471, 1472, 1475,  397,
      397,  397,  397,  397,  397,  397,  397,  397, 1476, 1477,
      397,  397,  397,  397,  397,  397,  397,  400,  400, 1479,
     1480, 1485,  400,  400,  400,  400,  400,  400,  400,  400,

      400, 1486, 1491,  400,  400,  400,  400,  400,  400,  400,
      431,  431, 1496, 1498, 1499,  431,  431,  431,  431,  431,
      431,  431,  431,  431, 1501, 1503,  431,  431,  431,  431,
      431,  431,  431,  443,  443, 1507, 1510, 1513,  443,  443,
      443,  443,  443,  443,  443,  443,  443, 1514, 1519,  443,
      443,  443,  443,  443,  443,  443,  445,  445, 1521, 1525,
     1527,  445,  445,  445,  445,  445,  445,  445,  445,  445,
     1531,  445,  445,  445,  445,  445,  445,  445,  445,  458,
      458, 1532, 1533, 1536,  458,  458,  458,  458,  458,  458,
      458,  458,  458, 1538, 1541,  458,  458,  458,  458,  458,

      458,  458,  459,  459, 1542, 1544, 1546,  459,  459,  459,
      459,  459,  459,  459,  459,  459, 1550, 1551,  459,  459,
      459,  459,  459,  459,  459,  463,  463, 1552, 1553, 1554,
      463,  463,  463,  463,  463,  463,  463,  463,  463, 1558,
     1562,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      487,  487, 1566, 1568, 1569,  487,  487,  487,  487,  487,
      487,  487,  487,  487, 1573, 1575,  487,  487,  487,  487,
      487,  487,  487,  487,  498,  498, 1579, 1580, 1581,  498,
      498,  498,  498,  498,  498,  498,  498,  498, 1588, 1589,
      498,  498,  498,  498,  498,  498,  498, 1524, 1592, 1595,

     1596, 1597, 1524, 1599, 1601, 1602, 1603, 1607, 1608, 1611,
     1615, 1616, 1617, 1619, 1621,  498,  507,  507, 1628, 1629,
     1630,  507,  507,  507,  507,  507,  507,  507,  507,  507,
     1632, 1634,  507,  507,  507,  507,  507,  507,  507,  508,
      508, 1635, 1636, 1640,  508,  508,  508,  508,  508,  508,
      508,  508,  508, 1641, 1643,  508,  508,  508,  508,  508,
      508,  508,  513,  513, 1644, 1645, 1648,  513,  513,  513,
      513,  513,  513,  513,  513,  513, 1649, 1650,  513,  513,
      513,  513,  513,  513,  513, 1653, 1654, 1656, 1658, 1662,
     1666, 1667, 1670, 1671, 1674, 1675, 1676, 1677, 1680, 1682,

     1684, 1685, 1689, 1690, 1696, 1697,  513,  527,  527, 1700,
     1701, 1703,  527,  527,  527,  527,  527,  527,  527,  527,
      527, 1704, 1709,  527,  527,  527,  527,  527,  527,  527,
      528,  528, 1711, 1715, 1717,  528,  528,  528,  528,  528,
      528,  528,  528,  528, 1720, 1721,  528,  528,  528,  528,
      528,  528,  528,  532,  532, 1724, 1725, 1732,  532,  532,
      532,  532,  532,  532,  532,  532,  532, 1734, 1738,  532,
      532,  532,  532,  532,  532,  532,  536,  536, 1741, 1743,
     1744,  536,  536,  536,  536,  536,  536,  536,  536,  536,
     1745, 1746,  536,  536,  536,  536,  536,  536,  536, 1747,

     1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
     1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,  536,  552,
      552, 1766, 1767, 1768,  552,  552,  552,  552,  552,  552,
      552,  552,  552, 1769, 1770,  552,  552,  552,  552,  552,
      552,  552,  556,  556, 1771, 1772, 1773,  556,  556,  556,
      556,  556,  556,  556,  556,  556, 1774, 1775,  556,  556,
      556,  556,  556,  556,  556,  558,  558, 1776, 1777, 1778,
      558,  558,  558,  558,  558,  558,  558,  558,  558, 1779,
     1780,  558,  558,  558,  558,  558,  558,  558,  561,  561,
     1781, 1782, 1783,  561,  561,  561,  561,  561,  561,  561,

      561,  561, 1784, 1785,  561,  561,  561,  561,  561,  561,
      561,  565,  565, 1786, 1792, 1793,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  870,  869,  565,  565,  565,
      565,  565,  565,  565,  581,  581,  868,  867,  866,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  864,  861,
      581,  581,  581,  581,  581,  581,  581,  583,  583,  860,
      859,  858,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  857,  855,  583,  583,  583,  583,  583,  583,  583,
      586,  586,  854,  853,  852,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  851,  850,  586,  586,  586,  586,

      586,  586,  586,  849,  848,  846,  845,  842,  838,  837,
      836,  830,  586,  589,  589,  826,  825,  824,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  822,  817,  589,
      589,  589,  589,  589,  589,  589,  591,  591,  815,  812,
      808,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      807,  805,  591,  591,  591,  591,  591,  591,  591,  592,
      592,  802,  801,  800,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  797,  796,  592,  592,  592,  592,  592,
      592,  592,  598,  598,  794,  793,  792,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  791,  790,  598,  598,

      598,  598,  598,  598,  598,  614,  614,  789,  787,  783,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  782,
      778,  614,  614,  614,  614,  614,  614,  614,  615,  615,
      777,  771,  770,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  769,  768,  615,  615,  615,  615,  615,  615,
      615,  617,  617,  766,  765,  764,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  761,  760,  617,  617,  617,
      617,  617,  617,  617,  625,  625,  759,  758,  757,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  756,  755,
      625,  625,  625,  625,  625,  625,  625,  626,  626,  754,

      753,  751,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  750,  749,  626,  626,  626,  626,  626,  626,  626,
      637,  637,  748,  747,  746,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  745,  741,  637,  637,  637,  637,
      637,  637,  637,  639,  639,  740,  739,  738,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  737,  736,  639,
      639,  639,  639,  639,  639,  639,  641,  641,  734,  733,
      732,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      731,  730,  641,  641,  641,  641,  641,  641,  641,  647,
      647,  729,  728,  727,  647,  647,  647,  647,  647,  647,

      647,  647,  647,  726,  725,  647,  647,  647,  647,  647,
      647,  647,  656,  656,  723,  720,  719,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  717,  716,  656,  656,
      656,  656,  656,  656,  656,  657,  657,  715,  712,  710,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  709,
      708,  657,  657,  657,  657,  657,  657,  657,  707,  705,
      704,  703,  700,  696,  695,  694,  692,  691,  689,  685,
      683,  681,  677,  676,  675,  674,  673,  657,  672,  670,
      669,  668,  667,  666,  657,  662,  662,  665,  664,  663,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  661,

      660,  662,  662,  662,  662,  662,  662,  662,  671,  671,
      659,  658,  655,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  653,  652,  671,  671,  671,  671,  671,  671,
      671,  678,  678,  651,  649,  648,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  646,  645,  678,  678,  678,
      678,  678,  678,  678,  679,  679,  644,  640,  636,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  635,  633,
      679,  679,  679,  679,  679,  679,  679,  680,  680,  632,
      631,  630,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  629,  628,  680,  680,  680,  680,  680,  680,  680,

      627,  624,  623,  622,  621,  680,  682,  682,  620,  619,
      618,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      616,  613,  682,  682,  682,  682,  682,  682,  682,  684,
      684,  612,  611,  610,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  609,  608,  684,  684,  684,  684,  684,
      684,  684,  686,  686,  607,  606,  605,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  604,  603,  686,  686,
      686,  686,  686,  686,  686,  601,  600,  599,  597,  596,
      595,  594,  593,  588,  587,  582,  580,  579,  578,  577,
      576,  575,  574,  570,  686,  697,  697,  568,  567,  566,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  562,
      560,  697,  697,  697,  697,  697,  697,  697,  698,  698,
      559,  557,  555,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  553,  551,  698,  698,  698,  698,  698,  698,
      698,  702,  702,  546,  545,  544,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  543,  542,  702,  702,  702,
      702,  702,  702,  702,  706,  706,  541,  540,  539,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  538,  537,
      706,  706,  706,  706,  706,  706,  706,  711,  711,  535,
      534,  533,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  531,  529,  711,  711,  711,  711,  711,  711,  711,
      721,  721,  526,  525,  524,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  522,  521,  721,  721,  721,  721,
      721,  721,  721,  722,  722,  520,  519,  518,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  517,  516,  722,
      722,  722,  722,  722,  722,  722,  724,  724,  514,  512,
      511,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      510,  506,  724,  724,  724,  724,  724,  724,  724,  735,
      735,  505,  504,  503,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  502,  501,  735,  735,  735,  735,  735,

      735,  735,  772,  772,  500,  499,  497,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  496,  495,  772,  772,
      772,  772,  772,  772,  772,  773,  773,  494,  493,  491,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  490,
      489,  773,  773,  773,  773,  773,  773,  773,  774,  774,
      486,  485,  484,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  483,  482,  774,  774,  774,  774,  774,  774,
      774,  775,  775,  481,  480,  477,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  476,  475,  775,  775,  775,
      775,  775,  775,  775,  776,  776,  474,  473,  472,  776,

      776,  776,  776,  776,  776,  776,  776,  776,  471,  470,
      776,  776,  776,  776,  776,  776,  776,  779,  779,  469,
      468,  467,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  466,  465,  779,  779,  779,  779,  779,  779,  779,
      785,  785,  464,  462,  461,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  460,  457,  785,  785,  785,  785,
      785,  785,  785,  786,  786,  456,  455,  453,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  452,  451,  786,
      786,  786,  786,  786,  786,  786,  795,  795,  450,  449,
      447,  795,  795,  795,  795,  795,  795,  795,  795,  795,

      446,  444,  795,  795,  795,  795,  795,  795,  795,  798,
      798,  442,  437,  436,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  430,  426,  798,  798,  798,  798,  798,
      798,  798,  799,  799,  425,  423,  421,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  420,  419,  799,  799,
      799,  799,  799,  799,  799,  810,  810,  417,  416,  415,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  414,
      413,  810,  810,  810,  810,  810,  810,  810,  813,  813,
      412,  411,  409,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  407,  404,  813,  813,  813,  813,  813,  813,

      813,  816,  816,  403,  402,  401,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  399,  396,  816,  816,  816,
      816,  816,  816,  816,  819,  819,  395,  394,  392,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  391,  390,
      819,  819,  819,  819,  819,  819,  819,  820,  820,  388,
      387,  385,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  384,  383,  820,  820,  820,  820,  820,  820,  820,
      821,  821,  381,  380,  379,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  378,  377,  821,  821,  821,  821,
      821,  821,  821,  823,  823,  376,  375,  374,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  372,  370,  823,
      823,  823,  823,  823,  823,  823,  827,  827,  369,  368,
      367,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      363,  360,  827,  827,  827,  827,  827,  827,  827,  359,
      358,  357,  356,  354,  352,  351,  350,  346,  345,  344,
      343,  340,  339,  338,  337,  336,  335,  334,  827,  828,
      828,  333,  330,  328,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  327,  326,  828,  828,  828,  828,  828,
      828,  828,  829,  829,  325,  323,  322,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  321,  320,  829,  829,

      829,  829,  829,  829,  829,  831,  831,  319,  318,  317,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  316,
      315,  831,  831,  831,  831,  831,  831,  831,  833,  833,
      313,  312,  311,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  308,  307,  833,  833,  833,  833,  833,  833,
      833,  843,  843,  306,  305,  303,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  301,  300,  843,  843,  843,
      843,  843,  843,  843,  844,  844,  299,  298,  297,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  296,  295,
      844,  844,  844,  844,  844,  844,  844,  856,  856,  294,

      293,  291,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  289,  288,  856,  856,  856,  856,  856,  856,  856,
      871,  871,  287,  286,  282,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  281,  280,  871,  871,  871,  871,
      871,  871,  871,  875,  875,  277,  276,  275,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  274,  272,  875,
      875,  875,  875,  875,  875,  875,  888,  888,  271,  270,
      269,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      267,  266,  888,  888,  888,  888,  888,  888,  888,  894,
      894,  265,  264,  263,  894,  894,  894,  894,  894,  894,

      894,  894,  894,  260,  256,  894,  894,  894,  894,  894,
      894,  894,  904,  904,  255,  252,  248,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  247,  246,  904,  904,
      904,  904,  904,  904,  904,  910,  910,  245,  244,  243,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  242,
      241,  910,  910,  910,  910,  910,  910,  910,  911,  911,
      238,  236,  235,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  234,  233,  911,  911,  911,  911,  911,  911,
      911,  915,  915,  232,  229,  227,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  226,  220,  915,  915,  915,

      915,  915,  915,  915,  916,  916,  216,  211,  209,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  203,  202,
      916,  916,  916,  916,  916,  916,  916,  918,  918,  201,
      200,  199,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  198,  197,  918,  918,  918,  918,  918,  918,  918,
      919,  919,  196,  191,  187,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  186,  184,  919,  919,  919,  919,
      919,  919,  919,  182,  180,  179,  177,  174,  173,  171,
      169,  167,  165,  164,  162,  160,  159,  154,  153,  150,
      149,  147,  919,  928,  928,  143,  139,  137,  928,  928,

      928,  928,  928,  928,  928,  928,  928,  136,  135,  928,
      928,  928,  928,  928,  928,  928,  132,  131,  130,  129,
      128,  127,  124,  122,  121,  118,  117,  116,  115,  113,
      112,  111,  109,  104,  103,  101,   96,   93,   92,   89,
       85,   84,   77,  928,  950,  950,   75,   74,   69,  950,
      950,  950,  950,  950,  950,  950,  950,  950,   54,   46,
      950,  950,  950,  950,  950,  950,  950,  953,  953,   40,
       27,   13,  953,  953,  953,  953,  953,  953,  953,  953,
      953,    7,    0,  953,  953,  953,  953,  953,  953,  953,
      954,  954,    0,    0,    0,  954,  954,  954,  954,  954,

      954,  954,  954,  954,    0,    0,  954,  954,  954,  954,
      954,  954,  954,  960,  960,    0,    0,    0,  960,  960,
      960,  960,  960,  960,  960,  960,  960,    0,    0,  960,
      960,  960,  960,  960,  960,  960,  968,  968,    0,    0,
        0,  968,  968,  968,  968,  968,  968,  968,  968,  968,
        0,    0,  968,  968,  968,  968,  968,  968,  968,  969,
      969,    0,    0,    0,  969,  969,  969,  969,  969,  969,
      969,  969,  969,    0,    0,  969,  969,  969,  969,  969,
      969,  969,  971,  971,    0,    0,    0,  971,  971,  971,
      971,  971,  971,  971,  971,  971,    0,    0,  971,  971,

      971,  971,  971,  971,  971,  978,  978,    0,    0,    0,
      978,  978,  978,  978,  978,  978,  978,  978,  978,    0,
        0,  978,  978,  978,  978,  978,  978,  978,  981,  981,
        0,    0,    0,  981,  981,  981,  981,  981,  981,  981,
      981,  981,    0,    0,  981,  981,  981,  981,  981,  981,
      981,  995,  995,    0,    0,    0,  995,  995,  995,  995,
      995,  995,  995,  995,  995,    0,    0,  995,  995,  995,
      995,  995,  995,  995, 1003, 1003,    0,    0,    0, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,    0,    0,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1004, 1004,    0,

        0,    0, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004,    0,    0, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1006, 1006,    0,    0,    0, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006,    0,    0, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1007, 1007,    0,    0,    0, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007,    0,    0, 1007,
     1007, 1007, 1007, 1007, 1007, 1007,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1007, 1009, 1009,    0,    0,
        0, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
        0,    0, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1021,

     1021,    0,    0,    0, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021,    0,    0, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1024, 1024,    0,    0,    0, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024,    0,    0, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1027, 1027,    0,    0,    0,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,    0,
        0, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028,
        0,    0,    0, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028,    0,    0, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1037, 1037,    0,    0,    0, 1037, 1037, 1037, 1037,

     1037, 1037, 1037, 1037, 1037,    0,    0, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1045, 1045,    0,    0,    0, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,    0,    0,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1049, 1049,    0,
        0,    0, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049,    0,    0, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1055, 1055,    0,    0,    0, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055,    0,    0, 1055, 1055, 1055, 1055,
     1055, 1055, 1055,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1055, 1056, 1056,    0,    0,    0, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056,    0,    0, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1057, 1057,    0,    0,
        0, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
        0,    0, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1065,
     1065,    0,    0,    0, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065,    0,    0, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1068, 1068,    0,    0,    0, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068,    0,    0, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1071, 1071,    0,    0,    0,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,    0,
        0, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1074, 1074,
        0,    0,    0, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074,    0,    0, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1085, 1085,    0,    0,    0, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085,    0,    0, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1089, 1089,    0,    0,    0, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,    0,    0,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1092, 1092,    0,
        0,    0, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,

     1092,    0,    0, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1096, 1096,    0,    0,    0, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096,    0,    0, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1098, 1098,    0,    0,    0, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098,    0,    0, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099,    0,    0,
        0, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
        0,    0, 1099, 1099, 1099, 1099, 1099, 1099, 1099,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1099, 1100,

     1100,    0,    0,    0, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100,    0,    0, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1102, 1102,    0,    0,    0, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102,    0,    0, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1113, 1113,    0,    0,    0,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,    0,
        0, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1126, 1126,
        0,    0,    0, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126,    0,    0, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1128, 1128,    0,    0,    0, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128,    0,    0, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1133, 1133,    0,    0,    0, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,    0,    0,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1137, 1137,    0,
        0,    0, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137,    0,    0, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1157, 1157,    0,    0,    0, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157,    0,    0, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1161, 1161,    0,    0,    0, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161,    0,    0, 1161,

     1161, 1161, 1161, 1161, 1161, 1161,    0,    0,    0,    0,
     1161, 1162, 1162,    0,    0,    0, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162,    0,    0, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1163, 1163,    0,    0,    0, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,    0,    0,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1168, 1168,    0,
        0,    0, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168,    0,    0, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1172, 1172,    0,    0,    0, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172,    0,    0, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1174, 1174,    0,    0,    0, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174,    0,    0, 1174,
     1174, 1174, 1174, 1174, 1174, 1174,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1174, 1177, 1177,    0,    0,
        0, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
        0,    0, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1180,
     1180,    0,    0,    0, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180,    0,    0, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1181, 1181,    0,    0,    0, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181,    0,    0, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1183, 1183,    0,    0,
        0, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
        0,    0, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1192,
     1192,    0,    0,    0, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192,    0,    0, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1193, 1193,    0,    0,    0, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193,    0,    0, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1194, 1194,    0,    0,    0,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,    0,
        0, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1212, 1212,

        0,    0,    0, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212,    0,    0, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1215, 1215,    0,    0,    0, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215,    0,    0, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1216, 1216,    0,    0,    0, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,    0,    0,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1217, 1217,    0,
        0,    0, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217,    0,    0, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1226, 1226,    0,    0,    0, 1226, 1226, 1226, 1226, 1226,

     1226, 1226, 1226, 1226,    0,    0, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1231, 1231,    0,    0,    0, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231,    0,    0, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1235, 1235,    0,    0,
        0, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
        0,    0, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1248,
     1248,    0,    0,    0, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248,    0,    0, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1253, 1253,    0,    0,    0, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253,    0,    0, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1258, 1258,    0,    0,    0,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,    0,
        0, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1260, 1260,
        0,    0,    0, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260,    0,    0, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1263, 1263,    0,    0,    0, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263,    0,    0, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1265, 1265,    0,    0,    0, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,    0,    0,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1269, 1269,    0,

        0,    0, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269,    0,    0, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1281, 1281,    0,    0,    0, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281,    0,    0, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1283, 1283,    0,    0,    0, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283,    0,    0, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1288, 1288,    0,    0,
        0, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
        0,    0, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1293, 1293,    0,    0,    0, 1293, 1293, 1293, 1293, 1293,

     1293, 1293, 1293, 1293,    0,    0, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1294, 1294,    0,    0,    0, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294,    0,    0, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1299, 1299,    0,    0,
        0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
        0,    0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1303,
     1303,    0,    0,    0, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303,    0,    0, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1304, 1304,    0,    0,    0, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304,    0,    0, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1309, 1309,    0,    0,    0,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,    0,
        0, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1312, 1312,
        0,    0,    0, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312,    0,    0, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1313, 1313,    0,    0,    0, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313,    0,    0, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1319, 1319,    0,    0,    0, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,    0,    0,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1326, 1326,    0,

        0,    0, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326,    0,    0, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1331, 1331,    0,    0,    0, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331,    0,    0, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1338, 1338,    0,    0,    0, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338,    0,    0, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1345, 1345,    0,    0,
        0, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
        0,    0, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1357,
     1357,    0,    0,    0, 1357, 1357, 1357, 1357, 1357, 1357,

     1357, 1357, 1357,    0,    0, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1358, 1358,    0,    0,    0, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358,    0,    0, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1365, 1365,    0,    0,    0,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,    0,
        0, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1366, 1366,
        0,    0,    0, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366,    0,    0, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1369, 1369,    0,    0,    0, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369,    0,    0, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1375, 1375,    0,    0,    0, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,    0,    0,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1383, 1383,    0,
        0,    0, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383,    0,    0, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1386, 1386,    0,    0,    0, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386,    0,    0, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1391, 1391,    0,    0,    0, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391,    0,    0, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1394, 1394,    0,    0,

        0, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
        0,    0, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1397,
     1397,    0,    0,    0, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397,    0,    0, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1400, 1400,    0,    0,    0, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400,    0,    0, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1409, 1409,    0,    0,    0,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,    0,
        0, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1410, 1410,
        0,    0,    0, 1410, 1410, 1410, 1410, 1410, 1410, 1410,

     1410, 1410,    0,    0, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1413, 1413,    0,    0,    0, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413,    0,    0, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1415, 1415,    0,    0,    0, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,    0,    0,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1417, 1417,    0,
        0,    0, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417,    0,    0, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1418, 1418,    0,    0,    0, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418,    0,    0, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1430, 1430,    0,    0,    0, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430,    0,    0, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1435, 1435,    0,    0,
        0, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
        0,    0, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1443,
     1443,    0,    0,    0, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443,    0,    0, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1447, 1447,    0,    0,    0, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447,    0,    0, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1449, 1449,    0,    0,    0,

     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,    0,
        0, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1455, 1455,
        0,    0,    0, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455,    0,    0, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1457, 1457,    0,    0,    0, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457,    0,    0, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1468, 1468,    0,    0,    0,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,    0,
        0, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1469, 1469,
        0,    0,    0, 1469, 1469, 1469, 1469, 1469, 1469, 1469,

     1469, 1469,    0,    0, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1478, 1478,    0,    0,    0, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1478,    0,    0, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1483, 1483,    0,    0,    0, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,    0,    0,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1488, 1488,    0,
        0,    0, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1488,    0,    0, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1489, 1489,    0,    0,    0, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489,    0,    0, 1489, 1489, 1489, 1489,

     1489, 1489, 1489, 1490, 1490,    0,    0,    0, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490,    0,    0, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1492, 1492,    0,    0,
        0, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
        0,    0, 1492, 1492, 1492, 1492, 1492, 1492, 1492,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1492, 1494,
     1494,    0,    0,    0, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494,    0,    0, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1497, 1497,    0,    0,    0, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1497,    0,    0, 1497, 1497,

     1497, 1497, 1497, 1497, 1497, 1505, 1505,    0,    0,    0,
     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,    0,
        0, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1508, 1508,
        0,    0,    0, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1508,    0,    0, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1509, 1509,    0,    0,    0, 1509, 1509, 1509, 1509,
     1509, 1509, 1509, 1509, 1509,    0,    0, 1509, 1509, 1509,
     1509, 1509, 1509, 1509, 1520, 1520,    0,    0,    0, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,    0,    0,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1522, 1522,    0,

        0,    0, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522,    0,    0, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1523, 1523,    0,    0,    0, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523,    0,    0, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1526, 1526,    0,    0,    0, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526,    0,    0, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1529, 1529,    0,    0,
        0, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
        0,    0, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1537,
     1537,    0,    0,    0, 1537, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537,    0,    0, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1543, 1543,    0,    0,    0, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543,    0,    0, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1548, 1548,    0,    0,    0,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,    0,
        0, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1549, 1549,
        0,    0,    0, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1549,    0,    0, 1549, 1549, 1549, 1549, 1549, 1549,
     1549,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1549, 1555, 1555,    0,    0,    0, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555,    0,    0, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1559, 1559,    0,    0,    0, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,    0,    0,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1560, 1560,    0,
        0,    0, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560,    0,    0, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1561, 1561,    0,    0,    0, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561,    0,    0, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1563, 1563,    0,    0,    0, 1563, 1563,

     1563, 1563, 1563, 1563, 1563, 1563, 1563,    0,    0, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1565, 1565,    0,    0,
        0, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
        0,    0, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1577,
     1577,    0,    0,    0, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577,    0,    0, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1582, 1582,    0,    0,    0, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582,    0,    0, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1584, 1584,    0,    0,    0,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,    0,

        0, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1587, 1587,
        0,    0,    0, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587,    0,    0, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1590, 1590,    0,    0,    0, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590,    0,    0, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1604, 1604,    0,    0,    0, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,    0,    0,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1606, 1606,    0,
        0,    0, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606,    0,    0, 1606, 1606, 1606, 1606, 1606, 1606, 1606,

     1610, 1610,    0,    0,    0, 1610, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610,    0,    0, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1614, 1614,    0,    0,    0, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614,    0,    0, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1618, 1618,    0,    0,
        0, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
        0,    0, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1625,
     1625,    0,    0,    0, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1625,    0,    0, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1631, 1631,    0,    0,    0, 1631, 1631, 1631,

     1631, 1631, 1631, 1631, 1631, 1631,    0,    0, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1646, 1646,    0,    0,    0,
     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,    0,
        0, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1647, 1647,
        0,    0,    0, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647,    0,    0, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1659, 1659,    0,    0,    0, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659,    0,    0, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1660, 1660,    0,    0,    0, 1660,
     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,    0,    0,

     1660, 1660, 1660, 1660, 1660, 1660, 1660,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1660, 1663, 1663,    0,
        0,    0, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663,    0,    0, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1665, 1665,    0,    0,    0, 1665, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1665,    0,    0, 1665, 1665, 1665, 1665,
     1665, 1665, 1665, 1669, 1669,    0,    0,    0, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669,    0,    0, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1672, 1672,    0,    0,

        0, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
        0,    0, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1673,
     1673,    0,    0,    0, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673,    0,    0, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1681, 1681,    0,    0,    0, 1681, 1681, 1681,
     1681, 1681, 1681, 1681, 1681, 1681,    0,    0, 1681, 1681,
     1681, 1681, 1681, 1681, 1681, 1683, 1683,    0,    0,    0,
     1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683,    0,
        0, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1686, 1686,
        0,    0,    0, 1686, 1686, 1686, 1686, 1686, 1686, 1686,

     1686, 1686,    0,    0, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1693, 1693,    0,    0,    0, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693,    0,    0, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1694, 1694,    0,    0,    0, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,    0,    0,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1702, 1702,    0,
        0,    0, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1702,    0,    0, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1706, 1706,    0,    0,    0, 1706, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1706,    0,    0, 1706, 1706, 1706, 1706,

     1706, 1706, 1706, 1708, 1708,    0,    0,    0, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708,    0,    0, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1712, 1712,    0,    0,
        0, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712,
        0,    0, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1716,
     1716,    0,    0,    0, 1716, 1716, 1716, 1716, 1716, 1716,
     1716, 1716, 1716,    0,    0, 1716, 1716, 1716, 1716, 1716,
     1716, 1716, 1718, 1718,    0,    0,    0, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718,    0,    0, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1727, 1727,    0,    0,    0,

     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,    0,
        0, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1729, 1729,
        0,    0,    0, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
     1729, 1729,    0,    0, 1729, 1729, 1729, 1729, 1729, 1729,
     1729, 1731, 1731,    0,    0,    0, 1731, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1731,    0,    0, 1731, 1731, 1731,
     1731, 1731, 1731, 1731, 1733, 1733,    0,    0,    0, 1733,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,    0,    0,
     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1740, 1740,    0,
        0,    0, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,

     1740,    0,    0, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1789, 1789, 1789, 1789, 1790, 1790,    0, 1790, 1791, 1791,
     1791, 1791, 1794,    0, 1794, 1794, 1795, 1795, 1795, 1795,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
     1788, 1788, 1788, 1788
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "sqlscanner.l"
#line 2 "sqlscanner.l"
#include "sqlparser.h"
#include "sqltypes.h"
#include <iostream>

#include <field.h>

using namespace std;
#line 13 "sqlscanner.l"


#line 2866 "lex.yy.c"

#define INITIAL 0
#define DelimOrSep 1
#define Name 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 21 "sqlscanner.l"

#line 3021 "lex.yy.c"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1789 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8231 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 22 "sqlscanner.l"
return AMPERSAND;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 23 "sqlscanner.l"
return SEMICOLON;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 24 "sqlscanner.l"
return ASTERISK;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 25 "sqlscanner.l"
return ARITHMETIC_PLUS;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 26 "sqlscanner.l"
return ARITHMETIC_MINUS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 27 "sqlscanner.l"
return SLASH;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 28 "sqlscanner.l"
return LEFTPAREN;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 29 "sqlscanner.l"
return RIGHTPAREN;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 30 "sqlscanner.l"
return DOT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 31 "sqlscanner.l"
return DOLLAR_SIGN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 32 "sqlscanner.l"
return PERCENT;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 34 "sqlscanner.l"
return EQUAL;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 35 "sqlscanner.l"
return NOT_EQUAL;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 36 "sqlscanner.l"
return LESS_THAN;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 37 "sqlscanner.l"
return LESS_OR_EQUAL;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 38 "sqlscanner.l"
return GREATER_THAN;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 39 "sqlscanner.l"
return GREATER_OR_EQUAL;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 42 "sqlscanner.l"
return SINGLE_QUOTE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 43 "sqlscanner.l"
return QUESTION_MARK;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 44 "sqlscanner.l"
return COLON;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 45 "sqlscanner.l"
return COMMA;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 46 "sqlscanner.l"
{
	yylval.integerValue = atoi(yytext);
	return SIGNED_INTEGER;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 50 "sqlscanner.l"
{
	yylval.integerValue = atoi(yytext);
	return UNSIGNED_INTEGER;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 54 "sqlscanner.l"
{
	char digitBuffer[ 10 ];
	digitBuffer[ 0 ] = yytext[ 0 ];
	digitBuffer[ 1 ] = yytext[ 1 ];
	digitBuffer[ 2 ] = yytext[ 2 ];
	digitBuffer[ 3 ] = yytext[ 3 ];
	digitBuffer[ 4 ] = 0;
//X 	sscanf( digitBuffer, "%hd", &yylval.date_.year );

	digitBuffer[ 0 ] = yytext[ 5 ];
	digitBuffer[ 1 ] = yytext[ 6 ];
	digitBuffer[ 2 ] = 0;
//X 	sscanf( digitBuffer, "%hu", &yylval.date_.month );

	digitBuffer[ 0 ] = yytext[ 8 ];
	digitBuffer[ 1 ] = yytext[ 9 ];
	digitBuffer[ 2 ] = 0;
//X 	sscanf( digitBuffer, "%hu", &yylval.date_.day );
	return DATE_VALUE;
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 74 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ABS;
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 79 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ABSOLUTE;
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 84 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ACOS;
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 89 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADA;
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 94 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD;
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 99 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_DAYS;
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 104 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_HOURS;
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 109 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_MINUTES;
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 114 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_MONTHS;
}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 119 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_SECONDS;
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 124 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ADD_YEARS;
}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 129 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.comparisonMod = SetComparisonConstants::MOD_ALL;
	return ALL;
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 135 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ALLOCATE;
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 140 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ALTER;
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 145 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.logicalOp = ParserConstants::LOP_AND;
	return AND;
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 151 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//X 	yylval.comparisonMod = SetComparisonConstants::MOD_ANY;
	return ANY;
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 157 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ARE;
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 162 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASCII;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 167 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASC;
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 172 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASIN;
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 177 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AS;
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 182 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ASSERTION;
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 187 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ATAN2;
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 192 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ATAN;
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 197 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AT;
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 202 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AUTHORIZATION;
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 207 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return AUTO_INCREMENT;
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 213 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.aggregate = ParserConstants::AGGREGATE_AVG;
	return AVG;
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 219 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BEFORE;
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 224 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_BEGIN;
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 229 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BETWEEN;
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 234 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::BigInteger;
	return SQL_TYPE;
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 240 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::BLOB;
	return SQL_TYPE;
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 246 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::ShortInteger;
	return SQL_TYPE;
}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 252 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BIT_LENGTH;
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 257 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BREAK;
}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 262 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return BY;
}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 267 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASCADE;
}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 272 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASCADED;
}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 277 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CASE;
}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 282 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CAST;
}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 287 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CATALOG;
}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 292 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CEILING;
}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 297 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CENTER;
}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 302 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Text;
	return SQL_TYPE;
}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 308 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHAR_LENGTH;
}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 313 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Text;
	return SQL_TYPE;
}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 319 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHAR_LENGTH;
}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 324 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CHECK;
}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 329 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CLOSE;
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 334 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COALESCE;
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 339 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COBOL;
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 344 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLLATE;
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 349 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLLATION;
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 354 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COLUMN;
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 359 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COMMIT;
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 364 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COMPUTE;
}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 369 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONCAT;
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 374 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONNECT;
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 379 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONNECTION;
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 384 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONSTRAINT;
}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 389 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONSTRAINTS;
}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 394 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONTINUE;
}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 399 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CONVERT;
}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 404 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CORRESPONDING;
}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 409 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COS;
}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 414 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COT;
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 419 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return COUNT;
}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 424 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CREATE;
}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 429 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURDATE;
}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 434 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_DATE;
}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 439 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_TIME;
}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 444 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT_TIMESTAMP;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 449 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHERE_CURRENT_OF;
}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 454 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURRENT;
}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 459 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURSOR;
}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 464 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CURTIME;
}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 469 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATABASE;
}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 474 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Date;
	return SQL_TYPE;
}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 480 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATE_FORMAT;
}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 485 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DATE_REMAINDER;
}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 490 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFMONTH;
}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 495 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFWEEK;
}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 500 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYOFYEAR;
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 505 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAYS_BETWEEN;
}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 510 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DAY;
}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 515 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEALLOCATE;
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 520 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEC;
}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 525 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEC;
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 530 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DECLARE;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 535 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFAULT;
}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 540 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFERRABLE;
}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 545 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DEFERRED;
}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 550 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_DELETE;
}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 555 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESC;
}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 560 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESCRIBE;
}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 565 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DESCRIPTOR;
}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 570 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DIAGNOSTICS;
}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 575 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DICTIONARY;
}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 580 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DIRECTORY;
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 585 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISCONNECT;
}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 590 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISPLACEMENT;
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 595 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DISTINCT;
}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 600 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DOMAIN_TOKEN;
}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 605 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_DOUBLE;
}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 610 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return DROP;
}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 615 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ELSE;
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 620 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return END;
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 625 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return END_EXEC;
}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 630 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ESCAPE;
}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 635 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXCEPT;
}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 640 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_EXCEPTION;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 645 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXEC;
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 650 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXECUTE;
}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 655 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXISTS;
}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 660 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXP;
}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 665 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXTERNAL;
}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 670 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXTRACT;
}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 675 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_FALSE;
}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 680 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FETCH;
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 685 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FIRST;
}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 690 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_FLOAT;
}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 695 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FLOOR;
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 700 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FN;
}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 705 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOR;
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 710 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOREIGN;
}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 715 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FORTRAN;
}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 720 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FOUND;
}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 725 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FROM;
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 730 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return FULL;
}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 735 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GET;
}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 740 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GLOBAL;
}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 745 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GO;
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 750 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GOTO;
}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 755 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GRANT;
}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 760 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GROUP;
}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 765 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HAVING;
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 770 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HOUR;
}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 775 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return HOURS_BETWEEN;
}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 780 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IDENTITY;
}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 785 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IFNULL;
}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 790 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_IGNORE;
}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 795 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IMMEDIATE;
}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 800 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_IN;
}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 805 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INCLUDE;
}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 810 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INDEX;
}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 815 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INDICATOR;
}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 820 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INITIALLY;
}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 825 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INNER;
}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 830 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INPUT;
}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 835 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INSENSITIVE;
}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 840 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INSERT;
}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 845 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Integer;
	return SQL_TYPE;
}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 851 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTEGER;
}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 856 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERSECT;
}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 861 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERSECT;
}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 866 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return INTERVAL;
}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 871 "sqlscanner.l"
{
	BEGIN Name;
	return INTO;
}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 875 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return IS;
}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 880 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ISOLATION;
}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 885 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return JOIN;
}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 890 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return JUSTIFY;
}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 895 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return KEY;
}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 900 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LANGUAGE;
}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 905 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LAST;
}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 910 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LCASE;
}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 915 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LEFT;
}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 920 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LENGTH;
}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 925 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LEVEL;
}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 930 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LIKE;
}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 935 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LINE_WIDTH;
}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 940 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOCAL;
}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 945 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOCATE;
}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 950 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOG;
}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 955 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	yylval.coltype = KexiDB::Field::Integer;
	return SQL_TYPE;
}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 961 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LOWER;
}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 966 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return LTRIM;
}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 971 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MATCH;
}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 976 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.aggregate = ParserConstants::AGGREGATE_MAX;
	return SQL_MAX;
}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 982 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MICROSOFT;
}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 987 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.aggregate = ParserConstants::AGGREGATE_MIN;
	return SQL_MIN;
}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 993 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUS;
}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 998 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUTE;
}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 1003 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MINUTES_BETWEEN;
}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 1008 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MODIFY;
}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 1013 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MOD;
}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 1018 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MODULE;
}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 1023 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MONTH;
}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 1028 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MONTHS_BETWEEN;
}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 1033 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return MUMPS;
}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 1038 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NAMES;
}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 1043 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NATIONAL;
}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 1048 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NCHAR;
}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 1053 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NEXT;
}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 1058 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NODUP;
}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 1063 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NONE;
}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 1068 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NOT;
}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 1073 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NOW;
}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 1078 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_NULL;
}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 1083 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NULLIF;
}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 1088 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return NUMERIC;
}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 1093 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OCTET_LENGTH;
}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 1098 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ODBC;
}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 1103 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OF;
}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 1108 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_OFF;
}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 1113 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_ON;
}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 1118 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ONLY;
}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 1123 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OPEN;
}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 1128 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OPTION;
}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 1133 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.logicalOp = ParserConstants::LOP_OR;
	return OR;
}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 1139 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ORDER;
}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 1144 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OUTER;
}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 1149 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OUTPUT;
}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 1154 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return OVERLAPS;
}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 1159 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PAGE;
}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 1164 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PARTIAL;
}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 1169 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_PASCAL;
}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 1174 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PERSISTENT;
}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 1179 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return CQL_PI;
}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 1184 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PLI;
}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 1189 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return POSITION;
}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 1194 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRECISION;
}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 1199 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PREPARE;
}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 1204 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRESERVE;
}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 1209 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIMARY;
}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 1214 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIOR;
}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 1219 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRIVILEGES;
}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 1224 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PROCEDURE;
}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 1229 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PRODUCT;
}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 1234 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return PUBLIC;
}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 1239 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return QUARTER;
}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 1244 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return QUIT;
}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 1249 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RAND;
}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 1254 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return READ_ONLY;
}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 1259 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REAL;
}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 1264 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REFERENCES;
}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 1269 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REPEAT;
}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 1274 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REPLACE;
}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 1279 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RESTRICT;
}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 1284 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return REVOKE;
}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 1289 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RIGHT;
}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 1294 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ROLLBACK;
}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 1299 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return ROWS;
}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 1304 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RPAD;
}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 1309 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return RTRIM;
}
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 1314 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCHEMA;
}
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 1319 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCREEN_WIDTH;
}
	YY_BREAK
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 1324 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SCROLL;
}
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 1329 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SECOND;
}
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 1334 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SECONDS_BETWEEN;
}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 1339 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SELECT;
}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 1344 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SEQUENCE;
}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 1349 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SETOPT;
}
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 1354 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SET;
}
	YY_BREAK
case 279:
/* rule 279 can match eol */
YY_RULE_SETUP
#line 1359 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SHOWOPT;
}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 1364 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SIGN;
}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 1369 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SIN;
}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 1374 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_SIZE;
}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 1379 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SMALLINT;
}
	YY_BREAK
case 284:
/* rule 284 can match eol */
YY_RULE_SETUP
#line 1384 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SOME;
}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 1389 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL;
}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 1394 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLCA;
}
	YY_BREAK
case 287:
/* rule 287 can match eol */
YY_RULE_SETUP
#line 1399 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLCODE;
}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 1404 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLERROR;
}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 1409 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLSTATE;
}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 1414 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQLWARNING;
}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 1419 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQRT;
}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 1424 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return STDEV;
}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 1429 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SUBSTRING;
}
	YY_BREAK
case 294:
/* rule 294 can match eol */
YY_RULE_SETUP
#line 1434 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	//yylval.aggregate = ParserConstants::AGGREGATE_SUM;
	return SUM;
}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 1440 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSDATE;
}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 1445 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSDATE_FORMAT;
}
	YY_BREAK
case 297:
/* rule 297 can match eol */
YY_RULE_SETUP
#line 1450 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SYSTEM;
}
	YY_BREAK
case 298:
/* rule 298 can match eol */
YY_RULE_SETUP
#line 1455 "sqlscanner.l"
{
	BEGIN Name;
	return TABLE;
}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 1459 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TAN;
}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 1464 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TEMPORARY;
}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 1469 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return THEN;
}
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 1474 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIME;
}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 1479 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMESTAMP;
}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 1484 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMEZONE_HOUR;
}
	YY_BREAK
case 305:
/* rule 305 can match eol */
YY_RULE_SETUP
#line 1489 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TIMEZONE_MINUTE;
}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 1494 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TITLE;
}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 1499 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO;
}
	YY_BREAK
case 308:
/* rule 308 can match eol */
YY_RULE_SETUP
#line 1504 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO_CHAR;
}
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 1509 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TO_DATE;
}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 1514 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSACTION;
}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 1519 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSLATE;
}
	YY_BREAK
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 1524 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRANSLATION;
}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 1529 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_TRUE;
}
	YY_BREAK
case 314:
/* rule 314 can match eol */
YY_RULE_SETUP
#line 1534 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return TRUNCATE;
}
	YY_BREAK
case 315:
/* rule 315 can match eol */
YY_RULE_SETUP
#line 1539 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return GENERAL_TITLE;
}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 1544 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UCASE;
}
	YY_BREAK
case 317:
/* rule 317 can match eol */
YY_RULE_SETUP
#line 1549 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UNION;
}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 1554 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UNIQUE;
}
	YY_BREAK
case 319:
/* rule 319 can match eol */
YY_RULE_SETUP
#line 1559 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return SQL_UNKNOWN;
}
	YY_BREAK
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 1564 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UPDATE;
}
	YY_BREAK
case 321:
/* rule 321 can match eol */
YY_RULE_SETUP
#line 1569 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return UPPER;
}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 1574 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USAGE;
}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 1579 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USER;
}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 1584 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return USING;
}
	YY_BREAK
case 325:
/* rule 325 can match eol */
YY_RULE_SETUP
#line 1589 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VALUES;
}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 1594 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VALUE;
}
	YY_BREAK
case 327:
/* rule 327 can match eol */
YY_RULE_SETUP
#line 1599 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VARBINARY;
}
	YY_BREAK
case 328:
/* rule 328 can match eol */
YY_RULE_SETUP
#line 1604 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
//	yylval.coltype = KexiDBField::SQLVarchar;
//	return SQL_TYPE;
	return VARCHAR;
}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 1611 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VARYING;
}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 1616 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VENDOR;
}
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 1621 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return VIEW;
}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 1626 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WEEK;
}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 1631 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHEN;
}
	YY_BREAK
case 334:
/* rule 334 can match eol */
YY_RULE_SETUP
#line 1636 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHENEVER;
}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 1641 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WHERE;
}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 1646 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WITH;
}
	YY_BREAK
case 337:
/* rule 337 can match eol */
YY_RULE_SETUP
#line 1651 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WORD_WRAPPED;
}
	YY_BREAK
case 338:
/* rule 338 can match eol */
YY_RULE_SETUP
#line 1656 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WORK;
}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 1661 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return WRAPPED;
}
	YY_BREAK
case 340:
/* rule 340 can match eol */
YY_RULE_SETUP
#line 1666 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return YEAR;
}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 1671 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return YEARS_BETWEEN;
}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 1676 "sqlscanner.l"
{
	unput( yytext[ yyleng - 1 ] );
	BEGIN DelimOrSep;
	return EXPONENT;
}
	YY_BREAK
case 343:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1681 "sqlscanner.l"
;
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 1683 "sqlscanner.l"
{ 
strcpy(yylval.stringValue, yytext);
return CHARACTER_STRING_LITERAL;
}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 1688 "sqlscanner.l"
{
strcpy(yylval.stringValue, yytext);
return DOUBLE_QUOTED_STRING;
}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 1693 "sqlscanner.l"
{
//	BEGIN DelimOrSep;
	strcpy(yylval.stringValue, yytext);
//	yylval.stringValue = yytext;
//	int len = strlen( yylval.parserUserName );
//	for( scannerPtr = yylval.parserUserName + ( len - 1 ); *scannerPtr == ' ' && scannerPtr >= yylval.parserUserName; scannerPtr-- )
//		*scannerPtr = 0;
	return USER_DEFINED_NAME;
}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 1702 "sqlscanner.l"
;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 1704 "sqlscanner.l"
{
	BEGIN 0;
	return AMPERSAND;
}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 1708 "sqlscanner.l"
{
	BEGIN 0;
	return SEMICOLON;
}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 1712 "sqlscanner.l"
{
	BEGIN 0;
	return ASTERISK;
}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 1716 "sqlscanner.l"
{
	BEGIN 0;
	return ARITHMETIC_PLUS;
}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 1720 "sqlscanner.l"
{
	BEGIN 0;
	return ARITHMETIC_MINUS;
}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 1724 "sqlscanner.l"
{
	BEGIN 0;
	return SLASH;
}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 1728 "sqlscanner.l"
{
	BEGIN 0;
	return LEFTPAREN;
}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 1732 "sqlscanner.l"
{
	BEGIN 0;
	return RIGHTPAREN;
}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 1736 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_EQUAL;
	return PERCENT;
}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 1741 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_EQUAL;
	return EQUAL;
}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 1746 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_NOT_EQUAL;
	return NOT_EQUAL;
}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 1751 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER;
	return GREATER_THAN;
}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 1756 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_GREATER_OR_EQUAL;
	return GREATER_OR_EQUAL;
}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 1761 "sqlscanner.l"
{
	BEGIN 0;
//	yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS_OR_EQUAL;
	return LESS_OR_EQUAL;
}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 1766 "sqlscanner.l"
{
	BEGIN 0;
	//yylval.comparisonOp = SetComparisonConstants::SETCOMP_LESS;
	return LESS_THAN;
}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 1771 "sqlscanner.l"
{
	BEGIN 0;
	return SINGLE_QUOTE;
}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 1775 "sqlscanner.l"
{
	BEGIN 0;
	return QUESTION_MARK;
}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 1779 "sqlscanner.l"
{
	BEGIN 0;
	return COLON;
}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 1783 "sqlscanner.l"
{
	BEGIN 0;
	return COMMA;
}
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 1787 "sqlscanner.l"
{
	BEGIN 0;
}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 1790 "sqlscanner.l"
{
	BEGIN DelimOrSep;
//	strcpy( yylval.parserUserName, yytext );
	strcpy(yylval.stringValue, yytext);
	return USER_DEFINED_NAME;
}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 1796 "sqlscanner.l"
ECHO;
	YY_BREAK
#line 6671 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DelimOrSep):
case YY_STATE_EOF(Name):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1789 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1789 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1788);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 1796 "sqlscanner.l"



void tookenize(const char *data)
{
	yy_switch_to_buffer(yy_scan_string(data));
}


