--- ./include.cvs/mdbtools.h	2007-03-06 00:34:47.000000000 +0100
+++ ./include/mdbtools.h	2007-11-09 22:05:36.078125000 +0100
@@ -13,8 +13,8 @@
  *
  * You should have received a copy of the GNU Library General Public
  * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
+ * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
  */
 #ifndef _mdbtools_h_
 #define _mdbtools_h_
@@ -32,6 +32,7 @@
 #include <ctype.h>
 #include <string.h>
 #include <glib.h>
+#include <config.h>
 
 #ifdef HAVE_ICONV
 #include <iconv.h>
@@ -153,10 +154,16 @@
 #define IS_JET4(mdb) (mdb->f->jet_version==MDB_VER_JET4)
 #define IS_JET3(mdb) (mdb->f->jet_version==MDB_VER_JET3)
 
+#if !MDB_NO_BACKENDS
+/* hash to store registered backends */
+extern GHashTable	*mdb_backends;
+#endif
+
 /* forward declarations */
 typedef struct mdbindex MdbIndex;
 typedef struct mdbsargtree MdbSargNode;
 
+#if !MDB_NO_BACKENDS
 typedef struct {
 	char *name;
 	unsigned char needs_length; /* or precision */
@@ -167,11 +174,14 @@
 typedef struct {
 	 MdbBackendType *types_table;
 } MdbBackend;
+#endif
 
+#if !MDB_NO_STATS
 typedef struct {
 	gboolean collect;
 	unsigned long pg_reads;
 } MdbStatistics;
+#endif
 
 typedef struct {
 	int           fd;
@@ -180,9 +190,13 @@
 	guint32		jet_version;
 	guint32		db_key;
 	char		db_passwd[14];
+#if !MDB_NO_BACKENDS
 	MdbBackend	*default_backend;
 	char			*backend_name;
+#endif
+#if !MDB_NO_STATS
 	MdbStatistics	*stats;
+#endif
 	/* free map */
 	int  map_sz;
 	unsigned char *free_map;
@@ -221,11 +235,16 @@
 	unsigned char alt_pg_buf[MDB_PGSIZE];
 	unsigned int  num_catalog;
 	GPtrArray	*catalog;
+#if !MDB_NO_BACKENDS
 	MdbBackend	*default_backend;
 	char		*backend_name;
+#endif
 	MdbFormatConstants *fmt;
+#if !MDB_NO_STATS
 	MdbStatistics *stats;
+#endif
 #ifdef HAVE_ICONV
+	char*	jet3_iconv_code;
 	iconv_t	iconv_in;
 	iconv_t	iconv_out;
 #endif
@@ -402,6 +421,7 @@
 extern long   mdb_pg_get_int32(MdbHandle *mdb, int offset);
 extern float  mdb_pg_get_single(MdbHandle *mdb, int offset);
 extern double mdb_pg_get_double(MdbHandle *mdb, int offset);
+extern void mdb_set_encoding(MdbHandle *mdb, const char *encoding_name);
 extern MdbHandle *mdb_open(const char *filename, MdbFileFlags flags);
 extern void mdb_close(MdbHandle *mdb);
 extern MdbHandle *mdb_clone_handle(MdbHandle *mdb);
@@ -450,6 +470,7 @@
 /* dump.c */
 extern void buffer_dump(const void *buf, int start, size_t len);
 
+#if !MDB_NO_BACKENDS
 /* backend.c */
 extern char *mdb_get_coltype_string(MdbBackend *backend, int col_type);
 extern int  mdb_coltype_takes_length(MdbBackend *backend, int col_type);
@@ -458,6 +479,7 @@
 extern void mdb_remove_backends();
 extern int  mdb_set_default_backend(MdbHandle *mdb, const char *backend_name);
 extern char *mdb_get_relationships(MdbHandle *mdb);
+#endif
 
 /* sargs.c */
 extern int mdb_test_sargs(MdbTableDef *table, MdbField *fields, int num_fields);
@@ -485,10 +507,12 @@
 void mdb_index_page_reset(MdbIndexPage *ipg);
 extern int mdb_index_pack_bitmap(MdbHandle *mdb, MdbIndexPage *ipg);
 
+#if !MDB_NO_STATS
 /* stats.c */
 extern void mdb_stats_on(MdbHandle *mdb);
 extern void mdb_stats_off(MdbHandle *mdb);
 extern void mdb_dump_stats(MdbHandle *mdb);
+#endif
 
 /* like.c */
 extern int mdb_like_cmp(char *s, char *r);
