--- ./libmdb.cvs/file.c	2005-06-28 06:53:40.000000000 +0200
+++ ./libmdb/file.c	2007-11-09 22:05:36.468750000 +0100
@@ -13,8 +13,8 @@
  *
  * You should have received a copy of the GNU Library General Public
  * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
+ * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
  */
 
 #include "mdbtools.h"
@@ -94,6 +94,32 @@
 	g_strfreev(dir);
 	return NULL;
 }
+
+/**
+ * mdb_set_encoding:
+ * @mdb: Handle to MDB database file
+ * @encoding_name: encoding name for MDB (database) file in JET3 version.
+ *                 A copy of the string will be created.
+ *
+ * Sets encoding name for MDB (database) file in JET3 version.
+ * JET3 databases have no usincode support but only ANSI code page (e.g. CP1252)
+ * (not ISO), so you need to decide what code page strings in the MDB file are encoded in.
+ *
+ * Use this function after mdb_open()) but BEFORE any operation which reads text strings 
+ * from the MDB file.
+ * "MDB_JET3_CHARSET" environment variable has priority over this setting.
+ *
+ **/
+void mdb_set_encoding(MdbHandle *mdb, const char *encoding_name)
+{
+#ifdef HAVE_ICONV
+	mdb_iconv_close(mdb);
+	g_free(mdb->jet3_iconv_code);
+	mdb->jet3_iconv_code = g_strdup(encoding_name);
+	mdb_iconv_init(mdb);
+#endif
+}
+
 /**
  * mdb_open:
  * @filename: path to MDB (database) file
@@ -111,8 +137,11 @@
 	int open_flags;
 
 	mdb = (MdbHandle *) g_malloc0(sizeof(MdbHandle));
+#if !MDB_NO_BACKENDS
 	mdb_set_default_backend(mdb, "access");
+#endif
 #ifdef HAVE_ICONV
+	mdb->jet3_iconv_code = 0;
 	mdb->iconv_in = (iconv_t)-1;
 	mdb->iconv_out = (iconv_t)-1;
 #endif
@@ -181,9 +210,12 @@
 {
 	if (!mdb) return;	
 	mdb_free_catalog(mdb);
+#if !MDB_NO_STATS
 	g_free(mdb->stats);
+#endif
+#if !MDB_NO_BACKENDS
 	g_free(mdb->backend_name);
-
+#endif
 	if (mdb->f) {
 		if (mdb->f->refs > 1) {
 			mdb->f->refs--;
@@ -196,6 +228,9 @@
 
 	mdb_iconv_close(mdb);
 
+#ifdef HAVE_ICONV
+	g_free(mdb->jet3_iconv_code);
+#endif
 	g_free(mdb);
 }
 /**
@@ -214,18 +249,25 @@
 	unsigned int i;
 
 	newmdb = (MdbHandle *) g_memdup(mdb, sizeof(MdbHandle));
+#if !MDB_NO_STATS
 	newmdb->stats = NULL;
+#endif
 	newmdb->catalog = g_ptr_array_new();
 	for (i=0;i<mdb->num_catalog;i++) {
 		entry = g_ptr_array_index(mdb->catalog,i);
 		data = g_memdup(entry,sizeof(MdbCatalogEntry));
 		g_ptr_array_add(newmdb->catalog, data);
 	}
-	mdb->backend_name = NULL;
+#if !MDB_NO_BACKENDS
+	newmdb->backend_name = NULL;
+#endif
 	if (mdb->f) {
 		mdb->f->refs++;
 	}
-	mdb_iconv_init(mdb);
+#ifdef HAVE_ICONV
+	newmdb->jet3_iconv_code = g_strdup(mdb->jet3_iconv_code);
+#endif
+	mdb_iconv_init(newmdb);
 
 	return newmdb;
 }
@@ -240,7 +282,7 @@
 	if (pg && mdb->cur_pg == pg) return mdb->fmt->pg_size;
 
 	len = _mdb_read_pg(mdb, mdb->pg_buf, pg);
-	//fprintf(stderr, "read page %d type %02x\n", pg, mdb->pg_buf[0]);
+	
 	mdb->cur_pg = pg;
 	/* kan - reset the cur_pos on a new page read */
 	mdb->cur_pos = 0; /* kan */
@@ -264,9 +306,10 @@
                 fprintf(stderr,"offset %lu is beyond EOF\n",offset);
                 return 0;
         }
+#if !MDB_NO_STATS
 	if (mdb->stats && mdb->stats->collect) 
 		mdb->stats->pg_reads++;
-
+#endif
 	lseek(mdb->f->fd, offset, SEEK_SET);
 	len = read(mdb->f->fd,pg_buf,mdb->fmt->pg_size);
 	if (len==-1) {
@@ -295,7 +338,7 @@
 }
 unsigned char mdb_pg_get_byte(MdbHandle *mdb, int offset)
 {
-	if (offset < 0 || offset+1 > mdb->fmt->pg_size) return -1;
+	if (offset < 0 || (offset+1) > (int)mdb->fmt->pg_size) return -1;
 	mdb->cur_pos++;
 	return mdb->pg_buf[offset];
 }
@@ -303,12 +346,12 @@
 int mdb_get_int16(void *buf, int offset)
 {
 	guint16 l;
-	memcpy(&l, buf + offset, 2);
+	memcpy(&l, (char*)buf + offset, 2);
 	return (int)GUINT16_FROM_LE(l);
 }
 int mdb_pg_get_int16(MdbHandle *mdb, int offset)
 {
-	if (offset < 0 || offset+2 > mdb->fmt->pg_size) return -1;
+	if (offset < 0 || (offset+2) > (int)mdb->fmt->pg_size) return -1;
 	mdb->cur_pos+=2;
 	return mdb_get_int16(mdb->pg_buf, offset);
 }
@@ -316,18 +359,18 @@
 long mdb_get_int32_msb(void *buf, int offset)
 {
 	gint32 l;
-	memcpy(&l, buf + offset, 4);
+	memcpy(&l, (char*)buf + offset, 4);
 	return (long)GINT32_FROM_BE(l);
 }
 long mdb_get_int32(void *buf, int offset)
 {
 	gint32 l;
-	memcpy(&l, buf + offset, 4);
+	memcpy(&l, (char*)buf + offset, 4);
 	return (long)GINT32_FROM_LE(l);
 }
 long mdb_pg_get_int32(MdbHandle *mdb, int offset)
 {
-	if (offset <0 || offset+4 > mdb->fmt->pg_size) return -1;
+	if (offset <0 || (offset+4) > (int)mdb->fmt->pg_size) return -1;
 	mdb->cur_pos+=4;
 	return mdb_get_int32(mdb->pg_buf, offset);
 }
@@ -335,13 +378,13 @@
 float mdb_get_single(void *buf, int offset)
 {
 	union {guint32 g; float f;} f;
-	memcpy(&f, buf + offset, 4);
+	memcpy(&f, (char*)buf + offset, 4);
 	f.g = GUINT32_FROM_LE(f.g);
 	return f.f;
 }
 float mdb_pg_get_single(MdbHandle *mdb, int offset)
 {
-       if (offset <0 || offset+4 > mdb->fmt->pg_size) return -1;
+       if (offset <0 || (offset+4) > (int)mdb->fmt->pg_size) return -1;
        mdb->cur_pos+=4;
        return mdb_get_single(mdb->pg_buf, offset);
 }
@@ -349,13 +392,13 @@
 double mdb_get_double(void *buf, int offset)
 {
 	union {guint64 g; double d;} d;
-	memcpy(&d, buf + offset, 8);
+	memcpy(&d, (char*)buf + offset, 8);
 	d.g = GUINT64_FROM_LE(d.g);
 	return d.d;
 }
 double mdb_pg_get_double(MdbHandle *mdb, int offset)
 {
-	if (offset <0 || offset+8 > mdb->fmt->pg_size) return -1;
+	if (offset <0 || (offset+8) > (int)mdb->fmt->pg_size) return -1;
 	mdb->cur_pos+=8;
 	return mdb_get_double(mdb->pg_buf, offset);
 }
@@ -364,7 +407,7 @@
 int 
 mdb_set_pos(MdbHandle *mdb, int pos)
 {
-	if (pos<0 || pos >= mdb->fmt->pg_size) return 0;
+	if (pos<0 || pos >= (int)mdb->fmt->pg_size) return 0;
 
 	mdb->cur_pos=pos;
 	return pos;
